{
    "openapi": "3.0.3",
    "info": {
      "title": "@weka-api",
      "version": "4.3",
      "description": "<div>The WEKA system offers a RESTful API, a key feature for automating interactions with the WEKA system and integrating it seamlessly into your existing workflows or monitoring systems.<br>The API can be accessed at the /api/v2 URL on port 14000. To explore the API within the cluster, navigate to /api/v2/docs (for example, https://weka01:14000/api/v2/docs). <div style=\"margin-top: 15px;\">Important: WEKA uses 64-bit numbers, which requires careful handling when interacting with the API across different programming languages. In JavaScript, for instance, the \"json-bigint\" library is recommended.</div></div>"
    },
    "servers": [
      {
        "url": "/api/v2"
      }
    ],
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "requestBodies": {},
      "schemas": {
        "fileSystem": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "FSId<2>"
            },
            "auto_max_files": {
              "type": "boolean",
              "example": false
            },
            "used_ssd_data": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "name": {
              "type": "string",
              "example": "fs1"
            },
            "uid": {
              "type": "string",
              "example": "245"
            },
            "is_removing": {
              "type": "boolean",
              "example": false
            },
            "group_id": {
              "type": "string",
              "example": "FSGroupId<0>"
            },
            "is_creating": {
              "type": "boolean",
              "example": true
            },
            "free_total": {
              "type": "integer",
              "format": "int64",
              "example": 1073737728
            },
            "is_encrypted": {
              "type": "boolean",
              "example": true
            },
            "metadata_budget": {
              "type": "integer",
              "format": "int64",
              "example": 4202496
            },
            "used_total_data": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "used_total": {
              "type": "integer",
              "format": "int64",
              "example": 4096
            },
            "ssd_budget": {
              "type": "integer",
              "format": "int64",
              "example": 1073741824
            },
            "is_ready": {
              "type": "boolean",
              "example": false
            },
            "group_name": {
              "type": "string",
              "example": "default"
            },
            "available_total": {
              "type": "integer",
              "format": "int64",
              "example": 1073741824
            },
            "status": {
              "type": "string",
              "example": "CREATING"
            },
            "used_ssd_metadata": {
              "type": "integer",
              "format": "int64",
              "example": 4096
            },
            "auth_required": {
              "type": "boolean",
              "example": true
            },
            "available_ssd_metadata": {
              "type": "integer",
              "format": "int64",
              "example": 4202496
            },
            "total_budget": {
              "type": "integer",
              "format": "int64",
              "example": 1073741824
            },
            "used_ssd": {
              "type": "integer",
              "format": "int64",
              "example": 4096
            },
            "object_storages": {
              "type": "array",
              "deprecated": true,
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "237"
                  },
                  "state": {
                    "type": "string",
                    "example": "ACTIVE"
                  },
                  "status": {
                    "type": "string",
                    "example": "UP"
                  },
                  "detachProgress": {
                    "type": "number",
                    "example": 0
                  },
                  "obsId": {
                    "type": "string",
                    "example": "ObjectStorageId<0>"
                  },
                  "mode": {
                    "type": "string",
                    "example": "WRITABLE"
                  },
                  "name": {
                    "type": "string",
                    "example": "OBS_1"
                  }
                }
              }
            },
            "obs_buckets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "237"
                  },
                  "state": {
                    "type": "string",
                    "example": "ACTIVE"
                  },
                  "status": {
                    "type": "string",
                    "example": "UP"
                  },
                  "detachProgress": {
                    "type": "number",
                    "example": 0
                  },
                  "obsId": {
                    "type": "string",
                    "example": "ObjectStorageId<0>"
                  },
                  "mode": {
                    "type": "string",
                    "example": "WRITABLE"
                  },
                  "name": {
                    "type": "string",
                    "example": "OBS_1"
                  }
                }
              }
            },
            "available_ssd": {
              "type": "integer",
              "format": "int64",
              "example": 1073741824
            },
            "free_ssd": {
              "type": "integer",
              "format": "int64",
              "example": 1073737728
            },
            "data_reduction": {
              "type": "boolean",
              "example": true
            },
            "data_reduction_percent": {
              "type": "number",
              "example": 100
            },
            "used_ssd_pending": {
              "type": "integer",
              "format": "int64",
              "example": 1073737728
            },
            "compressed_estimation": {
              "type": "integer",
              "format": "int64",
              "example": 1073737728
            }
          }
        },
        "alert": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "AdminDefaultPassword"
            },
            "muted": {
              "type": "boolean",
              "example": true
            },
            "fmt": {
              "type": "string",
              "example": "The admin password is still set to factory default, it should to be changed to ensure only authorized users can access the cluster"
            },
            "action": {
              "type": "string",
              "example": "Change the admin user password to using 'weka user passwd' to ensure only authorized users can access the cluster"
            },
            "title": {
              "type": "string",
              "example": "Default Password In Use"
            },
            "params": {
              "type": "object"
            }
          }
        },
        "defaultNet": {
          "type": "object",
          "properties": {
            "range": {
              "type": "string",
              "description": "IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
              "example": "1.1.1.1-1.1.1.254"
            },
            "gateway": {
              "type": "string",
              "description": "Default gateway IP",
              "example": "255.255.255.255"
            },
            "netmask": {
              "type": "number",
              "description": "Subnet mask bits (0..32)",
              "example": 0
            }
          }
        },
        "drive": {
          "type": "object",
          "properties": {
            "added_time": {
              "type": "string",
              "example": "2021-03-07T07:28:48.46952Z"
            },
            "attachment": {
              "type": "string",
              "example": "OK"
            },
            "block_size": {
              "type": "number",
              "example": 512
            },
            "device_path": {
              "type": "string",
              "example": "0000:00:1e.0"
            },
            "failure_domain": {
              "type": "string",
              "example": "FailureDomainId<1>"
            },
            "failure_domain_name": {
              "type": "string",
              "example": "DOM-005"
            },
            "firmware": {
              "type": "string",
              "example": "0"
            },
            "host_id": {
              "type": "string",
              "example": "HostId<5>"
            },
            "hostname": {
              "type": "string",
              "example": "s731-5"
            },
            "id": {
              "type": "string",
              "example": "DiskId<0>"
            },
            "model": {
              "type": "string",
              "example": "Amazon EC2 NVMe Instance Storage"
            },
            "node_id": {
              "type": "string",
              "example": "NodeId<101>"
            },
            "percentage_used": {
              "type": "string",
              "example": 0
            },
            "removed_time": {
              "type": "string",
              "nullable": true,
              "example": "2021-03-07T09:28:48.46952Z"
            },
            "serial_number": {
              "type": "string",
              "nullable": true,
              "example": "AWS66292A9B076E48A38"
            },
            "should_be_active": {
              "type": "boolean",
              "example": true
            },
            "size_bytes": {
              "type": "number",
              "example": 474998934528
            },
            "spares_remaining": {
              "type": "number",
              "example": 100
            },
            "spares_threshold": {
              "type": "number",
              "example": 0
            },
            "status": {
              "type": "string",
              "example": "ACTIVE"
            },
            "state_change_time": {
              "type": "string",
              "example": "2021-03-07T09:28:48.46952Z"
            },
            "uid": {
              "type": "string",
              "example": "137"
            },
            "uuid": {
              "type": "string",
              "example": "11d0c5f9-7b68-4d81-be41-2025c8368913"
            },
            "vendor": {
              "type": "string",
              "example": "AMAZON"
            }
          }
        },
        "failureDomain": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "DOM-001"
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "DiskId<2>"
              }
            },
            "hosts": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "host": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "HostId<0>"
            },
            "sw_release_string": {
              "type": "string",
              "example": "4.2.1.8293-f8b6ea71df13d0395ff974e5164424a8"
            },
            "mode": {
              "type": "string",
              "example": "backend"
            },
            "failure_domain_id": {
              "type": "string",
              "example": "FailureDomainId<1>"
            },
            "container_name": {
              "type": "string",
              "nullable": true,
              "example": "default"
            },
            "machine_identifier": {
              "type": "string",
              "example": "uid_string"
            },
            "bandwidth": {
              "type": "number",
              "nullable": true,
              "example": 6497
            },
            "failure_domain": {
              "type": "string",
              "example": "DOM-000"
            },
            "added_time": {
              "type": "string",
              "example": "2021-03-10T09:47:14.835443Z"
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "drives_dedicated_cores": {
              "type": "number",
              "example": 0
            },
            "hostname": {
              "type": "string",
              "example": "exam-0"
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.17.71"
              }
            },
            "member_of_leadership": {
              "type": "boolean",
              "example": true
            },
            "io_nodes": {
              "type": "number",
              "example": 1
            },
            "cloud": {
              "type": "object",
              "properties": {
                "instance_type": {
                  "type": "string",
                  "example": "VM.Standard.E4.Flex"
                },
                "provider": {
                  "type": "string",
                  "example": "OCI"
                },
                "availability_zone": {
                  "type": "string",
                  "example": "eu-frankfurt-1"
                },
                "instance_id": {
                  "type": "string",
                  "example": "i-0286561555bf9dcc5"
                }
              }
            },
            "last_failure_time": {
              "type": "string",
              "example": "2021-03-10T09:47:04.927107Z"
            },
            "state": {
              "type": "string",
              "example": "ACTIVE"
            },
            "start_time": {
              "type": "string",
              "example": "2021-03-10T09:47:05.563549Z"
            },
            "aws": {
              "type": "object",
              "properties": {
                "instance_type": {
                  "type": "string",
                  "example": "i3.large"
                },
                "availability_zone": {
                  "type": "string",
                  "example": "eu-west-1a"
                },
                "instance_id": {
                  "type": "string",
                  "example": "i-0286561555bf9dcc5"
                }
              }
            },
            "sw_version": {
              "type": "string",
              "example": "3.11.1.6928"
            },
            "os_info": {
              "type": "object",
              "properties": {
                "kernel_name": {
                  "type": "string",
                  "example": "Linux"
                },
                "platform": {
                  "type": "string",
                  "example": "x86_64"
                },
                "kernel_version": {
                  "type": "string",
                  "example": "#1 SMP Mon Jul 29 17:46:05 UTC 2019"
                },
                "os_name": {
                  "type": "string",
                  "example": "GNU/Linux"
                },
                "kernel_release": {
                  "type": "string",
                  "example": "3.10.0-957.27.2.el7.x86_64"
                },
                "drivers": {
                  "type": "object",
                  "properties": {
                    "ixgbe": {
                      "type": "string",
                      "example": ""
                    },
                    "ixgbevf": {
                      "type": "string",
                      "example": ""
                    },
                    "mlx5_core": {
                      "type": "string",
                      "example": ""
                    },
                    "ib_uverbs": {
                      "type": "string",
                      "example": ""
                    },
                    "uio_pci_generic": {
                      "type": "string",
                      "example": "5f49bb7dc1b5d192fb01b442b17ddc0451313ea2"
                    }
                  }
                }
              }
            },
            "last_failure_code": {
              "type": "string",
              "example": "ApplyingResources"
            },
            "cores_ids": {
              "type": "array",
              "items": {
                "type": "number",
                "example": 1
              }
            },
            "memory": {
              "type": "number",
              "example": 1493172224
            },
            "frontend_dedicated_cores": {
              "type": "number",
              "example": 0
            },
            "failure_domain_type": {
              "type": "string",
              "example": "USER"
            },
            "leadership_role": {
              "type": "string",
              "nullable": true,
              "example": "member"
            },
            "state_changed_time": {
              "type": "string",
              "example": "2021-03-10T09:47:04.927107Z"
            },
            "status": {
              "type": "string",
              "example": "UP"
            },
            "cores": {
              "type": "number",
              "example": 1
            },
            "host_ip": {
              "type": "string",
              "example": "172.31.17.71"
            },
            "is_dedicated": {
              "type": "boolean",
              "example": false
            },
            "last_failure": {
              "type": "string",
              "example": "Applying resources on container"
            },
            "mgmt_port": {
              "type": "number",
              "example": 14000
            },
            "auto_remove_timeout": {
              "type": "number",
              "nullable": true,
              "example": 100
            }
          }
        },
        "container": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "HostId<0>"
            },
            "sw_release_string": {
              "type": "string",
              "example": "4.2.1.8293-f1b6ea71df13d4395ff974e5164424a8"
            },
            "mode": {
              "type": "string",
              "example": "backend"
            },
            "failure_domain_id": {
              "type": "string",
              "example": "FailureDomainId<1>"
            },
            "bandwidth": {
              "type": "number",
              "nullable": true,
              "example": 6497
            },
            "container_name": {
              "type": "string",
              "nullable": true,
              "example": "default"
            },
            "failure_domain": {
              "type": "string",
              "example": "DOM-000"
            },
            "added_time": {
              "type": "string",
              "example": "2021-03-10T09:47:14.835443Z"
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "server_identifier": {
              "type": "string",
              "example": "uid_string"
            },
            "drives_dedicated_cores": {
              "type": "number",
              "example": 0
            },
            "hostname": {
              "type": "string",
              "example": "exam-0"
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.17.71"
              }
            },
            "member_of_leadership": {
              "type": "boolean",
              "example": true
            },
            "cloud": {
              "type": "object",
              "properties": {
                "instance_type": {
                  "type": "string",
                  "example": "VM.Standard.E4.Flex"
                },
                "provider": {
                  "type": "string",
                  "example": "OCI"
                },
                "availability_zone": {
                  "type": "string",
                  "example": "eu-frankfurt-1"
                },
                "instance_id": {
                  "type": "string",
                  "example": "i-0286561555bf9dcc5"
                }
              }
            },
            "io_processes": {
              "type": "number",
              "example": 1
            },
            "last_failure_time": {
              "type": "string",
              "example": "2021-03-10T09:47:04.927107Z"
            },
            "state": {
              "type": "string",
              "example": "ACTIVE"
            },
            "start_time": {
              "type": "string",
              "example": "2021-03-10T09:47:05.563549Z"
            },
            "aws": {
              "type": "object",
              "properties": {
                "instance_type": {
                  "type": "string",
                  "example": "i3.large"
                },
                "availability_zone": {
                  "type": "string",
                  "example": "eu-west-1a"
                },
                "instance_id": {
                  "type": "string",
                  "example": "i-0286561555bf9dcc5"
                }
              }
            },
            "sw_version": {
              "type": "string",
              "example": "3.11.1.6928"
            },
            "os_info": {
              "type": "object",
              "properties": {
                "kernel_name": {
                  "type": "string",
                  "example": "Linux"
                },
                "platform": {
                  "type": "string",
                  "example": "x86_64"
                },
                "kernel_version": {
                  "type": "string",
                  "example": "#1 SMP Mon Jul 29 17:46:05 UTC 2019"
                },
                "os_name": {
                  "type": "string",
                  "example": "GNU/Linux"
                },
                "kernel_release": {
                  "type": "string",
                  "example": "3.10.0-957.27.2.el7.x86_64"
                },
                "drivers": {
                  "type": "object",
                  "properties": {
                    "ixgbe": {
                      "type": "string",
                      "example": ""
                    },
                    "ixgbevf": {
                      "type": "string",
                      "example": ""
                    },
                    "mlx5_core": {
                      "type": "string",
                      "example": ""
                    },
                    "ib_uverbs": {
                      "type": "string",
                      "example": ""
                    },
                    "uio_pci_generic": {
                      "type": "string",
                      "example": "5f49bb7dc1b5d192fb01b442b17ddc0451313ea2"
                    }
                  }
                }
              }
            },
            "last_failure_code": {
              "type": "string",
              "example": "ApplyingResources"
            },
            "cores_ids": {
              "type": "array",
              "items": {
                "type": "number",
                "example": 1
              }
            },
            "memory": {
              "type": "number",
              "example": 1493172224
            },
            "frontend_dedicated_cores": {
              "type": "number",
              "example": 0
            },
            "failure_domain_type": {
              "type": "string",
              "example": "USER"
            },
            "leadership_role": {
              "type": "string",
              "nullable": true,
              "example": "member"
            },
            "state_changed_time": {
              "type": "string",
              "example": "2021-03-10T09:47:04.927107Z"
            },
            "status": {
              "type": "string",
              "example": "UP"
            },
            "cores": {
              "type": "number",
              "example": 1
            },
            "container_ip": {
              "type": "string",
              "example": "172.31.17.71"
            },
            "is_dedicated": {
              "type": "boolean",
              "example": false
            },
            "last_failure": {
              "type": "string",
              "example": "Applying resources on container"
            },
            "mgmt_port": {
              "type": "number",
              "example": 14000
            },
            "auto_remove_timeout": {
              "type": "number",
              "nullable": true,
              "example": 100
            }
          }
        },
        "interfaceGroup": {
          "type": "object",
          "properties": {
            "subnet_mask": {
              "type": "string",
              "example": "255.0.0.0"
            },
            "ports": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "host_uid": {
                    "type": "string",
                    "example": "uid_string"
                  },
                  "host_id": {
                    "type": "string",
                    "example": "HostId<0>"
                  },
                  "port": {
                    "type": "string",
                    "example": "eth0"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  }
                }
              }
            },
            "name": {
              "type": "string",
              "example": "DefaultInterfaceGroup"
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "168.32.0.0"
              }
            },
            "allow_manage_gids": {
              "type": "boolean",
              "example": false
            },
            "type": {
              "type": "string",
              "example": "NFS"
            },
            "gateway": {
              "type": "string",
              "example": "172.31.0.0"
            },
            "status": {
              "type": "string",
              "example": "OK"
            }
          }
        },
        "user": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "org_id": {
              "type": "number",
              "example": 0
            },
            "source": {
              "type": "string",
              "example": "Internal"
            },
            "posix_uid": {
              "type": "number",
              "example": 0
            },
            "posix_gid": {
              "type": "number",
              "example": 0
            },
            "username": {
              "type": "string",
              "example": "admin"
            },
            "role": {
              "type": "string",
              "example": "ClusterAdmin"
            },
            "policy": {
              "type": "string",
              "example": "readonly"
            }
          }
        },
        "event": {
          "type": "object",
          "properties": {
            "category": {
              "type": "string",
              "example": "Filesystem"
            },
            "cloud_digested_ts": {
              "type": "string",
              "example": "2021-03-11T08:48:52.020804Z"
            },
            "cloud_id": {
              "type": "string",
              "example": "91b5d073-2e3f-febe-b731-ad43d021ae45"
            },
            "entity": {
              "type": "string",
              "example": "ClusterAdmin internal user (admin from 172.31.41.19)"
            },
            "guid": {
              "type": "string",
              "example": "23caf2eb-246e-4743-b6f1-ebcc70672b07"
            },
            "hash": {
              "type": "number",
              "example": 0
            },
            "is_backend": {
              "type": "boolean",
              "example": true
            },
            "nid": {
              "type": "string",
              "example": "NodeId<40>"
            },
            "org_id": {
              "type": "string",
              "example": "OrgId<1>"
            },
            "params": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "default"
                },
                "parameters": {
                  "type": "string",
                  "example": "GroupName: default, TotalCapacity: 1829454741504, SSDCapacity: 1829454741504"
                }
              }
            },
            "permission": {
              "type": "string",
              "example": "USER"
            },
            "related_node_ids": {
              "type": "array",
              "items": {
                "type": "number",
                "example": 40
              }
            },
            "s3_time": {
              "type": "string",
              "example": "2021-03-11T08:48:52.020804Z"
            },
            "severity": {
              "type": "string",
              "example": "INFO"
            },
            "snid": {
              "type": "array",
              "items": {
                "type": "number",
                "example": 0
              }
            },
            "sqs_message_time": {
              "type": "string",
              "example": "2021-03-11T08:48:52.020804Z"
            },
            "timestamp": {
              "type": "string",
              "example": "2021-03-11T08:48:47.570754Z"
            },
            "description": {
              "type": "string",
              "example": "User login failed"
            },
            "type": {
              "type": "string",
              "example": "FilesystemAdded"
            }
          }
        },
        "eventDescription": {
          "type": "object",
          "properties": {
            "dedup_parameters": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "parameters": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "username"
              }
            },
            "severity": {
              "type": "string",
              "example": "INFO"
            },
            "is_dedup_event": {
              "type": "boolean",
              "example": false
            },
            "permission": {
              "type": "string",
              "example": "User"
            },
            "category": {
              "type": "string",
              "example": "User"
            },
            "type": {
              "type": "string",
              "example": "UserLoginFailed"
            },
            "description": {
              "type": "string",
              "example": "User login failed"
            },
            "formatString": {
              "type": "string",
              "example": "`{username}` failed logging-in: {reason}"
            }
          }
        },
        "hostResource": {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "example": "BACKEND"
            },
            "memory": {
              "type": "number",
              "example": 0
            },
            "format": {
              "type": "number",
              "example": 3
            },
            "bandwidth": {
              "type": "number",
              "example": 2000
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "some_drive"
              }
            },
            "failure_domain": {
              "type": "string",
              "example": ""
            },
            "hardware_watchdog": {
              "type": "boolean",
              "example": false
            },
            "wait_io_nodes_timeout": {
              "type": "number",
              "example": 300
            },
            "backend_endpoints": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ip": {
                    "type": "string",
                    "example": "172.31.13.97"
                  },
                  "port": {
                    "type": "number",
                    "example": 14000
                  }
                }
              }
            },
            "hostname": {
              "type": "string",
              "example": ""
            },
            "reserve_1g_hugepages": {
              "type": "boolean",
              "example": true
            },
            "net_devices": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "eth0"
              }
            },
            "dedicate_memory": {
              "type": "boolean",
              "example": true
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.11.41"
              }
            },
            "ui_enabled": {
              "type": "boolean",
              "example": true
            },
            "join_secret": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "secret"
              }
            },
            "nodes": {
              "type": "object",
              "properties": {
                "0": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "MANAGEMENT"
                      }
                    },
                    "core_id": {
                      "type": "number",
                      "example": 4294967295
                    },
                    "http_port": {
                      "type": "number",
                      "example": 14000
                    },
                    "dedicate_core": {
                      "type": "boolean",
                      "example": false
                    },
                    "rpc_port": {
                      "type": "number",
                      "example": 14010
                    },
                    "dedicated_mode": {
                      "type": "string",
                      "example": "FULL"
                    }
                  }
                },
                "1": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "FRONTEND"
                      }
                    },
                    "core_id": {
                      "type": "number",
                      "example": 4294967295
                    },
                    "http_port": {
                      "type": "number",
                      "example": 14000
                    },
                    "dedicate_core": {
                      "type": "boolean",
                      "example": true
                    },
                    "rpc_port": {
                      "type": "number",
                      "example": 14011
                    },
                    "dedicated_mode": {
                      "type": "string",
                      "example": "FULL"
                    }
                  }
                }
              }
            },
            "host_id": {
              "type": "number",
              "example": 65535
            },
            "auto_remove_timeout": {
              "type": "number",
              "example": 0
            },
            "disable_numa_balancing": {
              "type": "boolean",
              "example": true
            },
            "mask_interrupts": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "containerResource": {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "example": "BACKEND"
            },
            "memory": {
              "type": "number",
              "example": 0
            },
            "format": {
              "type": "number",
              "example": 3
            },
            "bandwidth": {
              "type": "number",
              "example": 2000
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "some_drive"
              }
            },
            "failure_domain": {
              "type": "string",
              "example": ""
            },
            "hardware_watchdog": {
              "type": "boolean",
              "example": false
            },
            "wait_io_nodes_timeout": {
              "type": "number",
              "example": 300
            },
            "backend_endpoints": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ip": {
                    "type": "string",
                    "example": "172.31.13.97"
                  },
                  "port": {
                    "type": "number",
                    "example": 14000
                  }
                }
              }
            },
            "hostname": {
              "type": "string",
              "example": ""
            },
            "reserve_1g_hugepages": {
              "type": "boolean",
              "example": true
            },
            "net_devices": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "eth0"
              }
            },
            "dedicate_memory": {
              "type": "boolean",
              "example": true
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.11.41"
              }
            },
            "ui_enabled": {
              "type": "boolean",
              "example": true
            },
            "join_secret": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "secret"
              }
            },
            "nodes": {
              "type": "object",
              "properties": {
                "0": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "MANAGEMENT"
                      }
                    },
                    "core_id": {
                      "type": "number",
                      "example": 4294967295
                    },
                    "http_port": {
                      "type": "number",
                      "example": 14000
                    },
                    "dedicate_core": {
                      "type": "boolean",
                      "example": false
                    },
                    "rpc_port": {
                      "type": "number",
                      "example": 14010
                    },
                    "dedicated_mode": {
                      "type": "string",
                      "example": "FULL"
                    }
                  }
                },
                "1": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "FRONTEND"
                      }
                    },
                    "core_id": {
                      "type": "number",
                      "example": 4294967295
                    },
                    "http_port": {
                      "type": "number",
                      "example": 14000
                    },
                    "dedicate_core": {
                      "type": "boolean",
                      "example": true
                    },
                    "rpc_port": {
                      "type": "number",
                      "example": 14011
                    },
                    "dedicated_mode": {
                      "type": "string",
                      "example": "FULL"
                    }
                  }
                }
              }
            },
            "container_id": {
              "type": "number",
              "example": 65535
            },
            "auto_remove_timeout": {
              "type": "number",
              "example": 0
            },
            "disable_numa_balancing": {
              "type": "boolean",
              "example": true
            },
            "mask_interrupts": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "netdev": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "NetDevId<3>"
            },
            "id_type": {
              "type": "string",
              "example": "INVALID"
            },
            "netmask_bits": {
              "type": "number",
              "example": 20
            },
            "owner_nodes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "NodeId<1>"
              }
            },
            "name": {
              "type": "string",
              "example": "0000:00:04.0"
            },
            "uid": {
              "type": "string",
              "example": "uid_str"
            },
            "hostname": {
              "type": "string",
              "example": "stewie-0"
            },
            "net_devices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mac_address": {
                    "type": "string",
                    "example": "02:5a:d7:de:50:5c"
                  },
                  "mtu": {
                    "type": "number",
                    "example": 0
                  },
                  "is_virtual": {
                    "type": "boolean",
                    "example": true
                  },
                  "interface_alias": {
                    "type": "string",
                    "example": "some alias "
                  },
                  "numa": {
                    "type": "number",
                    "example": -1
                  },
                  "aws": {
                    "type": "object",
                    "properties": {
                      "netmask_bits": {
                        "type": "number",
                        "example": 20
                      },
                      "ip": {
                        "type": "string",
                        "example": "172.31.12.149"
                      },
                      "gateway": {
                        "type": "string",
                        "example": "172.31.0.1"
                      }
                    }
                  },
                  "interface_name": {
                    "type": "string",
                    "example": "some name"
                  },
                  "max_vfs_num": {
                    "type": "number",
                    "example": 0
                  },
                  "vendor": {
                    "type": "string",
                    "example": "Amazon.com, Inc."
                  },
                  "slave_devices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "some_devices"
                    }
                  },
                  "pci_slot": {
                    "type": "string",
                    "example": "0000:00:04.0"
                  },
                  "device": {
                    "type": "string",
                    "example": "Elastic Network Adapter (ENA)"
                  },
                  "driver": {
                    "type": "string",
                    "example": "igb_uio"
                  }
                }
              }
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.12.149"
              }
            },
            "max_cores": {
              "type": "number",
              "example": 1
            },
            "vlan_id": {
              "type": "string",
              "example": "some_id"
            },
            "gateway": {
              "type": "string",
              "example": "172.31.0.1"
            },
            "host_id": {
              "type": "string",
              "example": "HostId<0>"
            },
            "identifier": {
              "type": "string",
              "example": "0000:00:04.0"
            },
            "network_label": {
              "type": "string",
              "example": "label"
            }
          }
        },
        "netdevContainer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "NetDevId<3>"
            },
            "id_type": {
              "type": "string",
              "example": "INVALID"
            },
            "netmask_bits": {
              "type": "number",
              "example": 20
            },
            "owner_processes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "NodeId<1>"
              }
            },
            "name": {
              "type": "string",
              "example": "0000:00:04.0"
            },
            "uid": {
              "type": "string",
              "example": "uid_str"
            },
            "hostname": {
              "type": "string",
              "example": "stewie-0"
            },
            "net_devices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mac_address": {
                    "type": "string",
                    "example": "02:5a:d7:de:50:5c"
                  },
                  "mtu": {
                    "type": "number",
                    "example": 0
                  },
                  "is_virtual": {
                    "type": "boolean",
                    "example": true
                  },
                  "interface_alias": {
                    "type": "string",
                    "example": "some alias "
                  },
                  "numa": {
                    "type": "number",
                    "example": -1
                  },
                  "aws": {
                    "type": "object",
                    "properties": {
                      "netmask_bits": {
                        "type": "number",
                        "example": 20
                      },
                      "ip": {
                        "type": "string",
                        "example": "172.31.12.149"
                      },
                      "gateway": {
                        "type": "string",
                        "example": "172.31.0.1"
                      }
                    }
                  },
                  "interface_name": {
                    "type": "string",
                    "example": "some name"
                  },
                  "max_vfs_num": {
                    "type": "number",
                    "example": 0
                  },
                  "vendor": {
                    "type": "string",
                    "example": "Amazon.com, Inc."
                  },
                  "slave_devices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "some_devices"
                    }
                  },
                  "pci_slot": {
                    "type": "string",
                    "example": "0000:00:04.0"
                  },
                  "device": {
                    "type": "string",
                    "example": "Elastic Network Adapter (ENA)"
                  },
                  "driver": {
                    "type": "string",
                    "example": "igb_uio"
                  }
                }
              }
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.12.149"
              }
            },
            "max_cores": {
              "type": "number",
              "example": 1
            },
            "vlan_id": {
              "type": "string",
              "example": "some_id"
            },
            "gateway": {
              "type": "string",
              "example": "172.31.0.1"
            },
            "container_id": {
              "type": "string",
              "example": "HostId<0>"
            },
            "identifier": {
              "type": "string",
              "example": "0000:00:04.0"
            },
            "network_label": {
              "type": "string",
              "example": "label"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "example": "access_token_string"
            },
            "token_type": {
              "type": "string",
              "example": "Bearer"
            },
            "expires_in": {
              "type": "number",
              "example": 3000
            },
            "refresh_token": {
              "type": "string",
              "example": "refresh_token_string"
            },
            "password_change_required": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "nfsPermission": {
          "type": "object",
          "properties": {
            "group_id": {
              "type": "string",
              "example": "NfsClientGroupId<0>"
            },
            "privileged_port": {
              "type": "boolean",
              "example": false
            },
            "supported_versions": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "V3"
              }
            },
            "id": {
              "type": "string",
              "example": "NfsExportId<0>"
            },
            "obs_direct": {
              "type": "boolean",
              "example": false
            },
            "anon_uid": {
              "type": "string",
              "example": "65534"
            },
            "manage_gids": {
              "type": "boolean",
              "example": false
            },
            "custom_options": {
              "type": "string",
              "example": ""
            },
            "filesystem": {
              "type": "string",
              "example": "fs_1"
            },
            "uid": {
              "type": "string",
              "example": "315"
            },
            "group": {
              "type": "string",
              "example": "DefaultClientGroup"
            },
            "filesystem_id": {
              "type": "string",
              "example": "FSId<1>"
            },
            "permission_type": {
              "type": "string",
              "example": "RW"
            },
            "mount_options": {
              "type": "string",
              "example": "readcache,dentry_max_age_positive=1000,dentry_max_age_negative=0"
            },
            "path": {
              "type": "string",
              "example": "/1"
            },
            "squash_mode": {
              "type": "string",
              "example": "none"
            },
            "root_squashing": {
              "type": "boolean",
              "example": false
            },
            "anon_gid": {
              "type": "string",
              "example": "65534"
            },
            "enable_auth_types": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "KRB5"
              }
            }
          }
        },
        "clientGroup": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "242"
            },
            "rules": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "IP"
                  },
                  "uid": {
                    "type": "string",
                    "example": "244"
                  },
                  "rule": {
                    "type": "string",
                    "example": "0.0.0.0/0.0.0.0"
                  },
                  "id": {
                    "type": "string",
                    "example": "NfsClientGroupRuleId<0>"
                  }
                }
              }
            },
            "id": {
              "type": "string",
              "example": "NfsClientGroupId<0>"
            },
            "name": {
              "type": "string",
              "example": "DefaultClientGroup"
            }
          }
        },
        "s3Bucket": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "bucket1"
            },
            "hard_limit_bytes": {
              "type": "number",
              "example": 10000003072
            },
            "path": {
              "type": "string",
              "example": "/path"
            },
            "used_bytes": {
              "type": "number",
              "example": 4096
            },
            "fs": {
              "type": "string",
              "example": "default"
            }
          }
        },
        "node": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "NodeId<61>"
            },
            "dpdk_port_info": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "info"
              }
            },
            "network_mode": {
              "type": "string",
              "example": "DPDK"
            },
            "mode": {
              "type": "string",
              "example": "backend"
            },
            "container_name": {
              "type": "string",
              "example": "default"
            },
            "lowest_node_path_issue": {
              "type": "string",
              "example": "NodeId<INVALID>"
            },
            "last_fencing_reason": {
              "type": "string",
              "example": "INVALID"
            },
            "uid": {
              "type": "string",
              "example": "2689d12c-5b47-d867-6af4-928dfa152a45"
            },
            "hostname": {
              "type": "string",
              "example": "ip-172-31-38-126.support.local"
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.41.173"
              }
            },
            "slot": {
              "type": "number",
              "example": 1
            },
            "is_blacklisted": {
              "type": "boolean",
              "example": false
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "FRONTEND"
              }
            },
            "missing_links": {
              "type": "object",
              "properties": {
                "missing": {
                  "type": "number",
                  "example": 0
                },
                "self_report": {
                  "type": "object",
                  "properties": {
                    "up": {
                      "type": "object",
                      "properties": {
                        "missing": {
                          "type": "number",
                          "example": 0
                        },
                        "synced": {
                          "type": "number",
                          "example": 23
                        },
                        "required": {
                          "type": "number",
                          "example": 23
                        }
                      }
                    },
                    "joining": {
                      "type": "object",
                      "properties": {
                        "missing": {
                          "type": "number",
                          "example": 0
                        },
                        "synced": {
                          "type": "number",
                          "example": 0
                        },
                        "required": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    },
                    "syncing": {
                      "type": "object",
                      "properties": {
                        "missing": {
                          "type": "number",
                          "example": 0
                        },
                        "synced": {
                          "type": "number",
                          "example": 0
                        },
                        "required": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 23
                    }
                  }
                },
                "others_report": {
                  "type": "object",
                  "properties": {
                    "syncing_reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    },
                    "up_reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    },
                    "joining_missing": {
                      "type": "number",
                      "example": 0
                    },
                    "up_missing": {
                      "type": "number",
                      "example": 0
                    },
                    "syncing_missing": {
                      "type": "number",
                      "example": 0
                    },
                    "missing": {
                      "type": "number",
                      "example": 0
                    },
                    "joining_reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    },
                    "reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    }
                  }
                }
              }
            },
            "is_ucx": {
              "type": "boolean",
              "example": false
            },
            "cpu_is_dedicated": {
              "type": "boolean",
              "example": true
            },
            "sw_version": {
              "type": "string",
              "example": "4.0.1.5908"
            },
            "cpu_core_id": {
              "type": "number",
              "example": 1
            },
            "host_id": {
              "type": "string",
              "example": "HostId<3>"
            },
            "cpu_numa_node": {
              "type": "number",
              "example": 0
            },
            "gds_mode": {
              "type": "string",
              "example": "mode"
            },
            "cpu_socket_id": {
              "type": "number",
              "example": 0
            },
            "rdma_mode": {
              "type": "string",
              "example": "mode"
            },
            "memory": {
              "type": "number",
              "example": 1476395008
            },
            "up_since": {
              "type": "string",
              "example": "2022-07-27T07:51:54.782895Z"
            },
            "trace_history_in_seconds": {
              "type": "number",
              "example": 6367
            },
            "leadership_role": {
              "type": "string",
              "example": "role"
            },
            "mgmt_ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.38.126"
              }
            },
            "last_fencing_time": {
              "type": "string",
              "example": "2021-11-22T08:44:15.725096Z"
            },
            "status": {
              "type": "string",
              "example": "UP"
            },
            "cpu_model": {
              "type": "string",
              "example": "Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz"
            },
            "dpdk_ip": {
              "type": "string",
              "example": "172.31.41.173"
            },
            "ucx_mode": {
              "type": "string",
              "example": "mode"
            },
            "dpdk_socket_info": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "info"
              }
            },
            "mgmt_port": {
              "type": "number",
              "example": 14000
            },
            "last_join_reject_reason": {
              "type": "string",
              "example": "NONE"
            },
            "is_dpdk": {
              "type": "boolean",
              "example": true
            },
            "cpu_id": {
              "type": "number",
              "example": 1
            }
          }
        },
        "process": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "NodeId<61>"
            },
            "dpdk_port_info": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "info"
              }
            },
            "network_mode": {
              "type": "string",
              "example": "DPDK"
            },
            "mode": {
              "type": "string",
              "example": "backend"
            },
            "container_name": {
              "type": "string",
              "example": "default"
            },
            "lowest_node_path_issue": {
              "type": "string",
              "example": "NodeId<INVALID>"
            },
            "last_fencing_reason": {
              "type": "string",
              "example": "INVALID"
            },
            "uid": {
              "type": "string",
              "example": "2689d12c-5b47-d867-6af4-928dfa152a45"
            },
            "hostname": {
              "type": "string",
              "example": "ip-172-31-38-126.support.local"
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.41.173"
              }
            },
            "slot": {
              "type": "number",
              "example": 1
            },
            "is_blacklisted": {
              "type": "boolean",
              "example": false
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "FRONTEND"
              }
            },
            "missing_links": {
              "type": "object",
              "properties": {
                "missing": {
                  "type": "number",
                  "example": 0
                },
                "self_report": {
                  "type": "object",
                  "properties": {
                    "up": {
                      "type": "object",
                      "properties": {
                        "missing": {
                          "type": "number",
                          "example": 0
                        },
                        "synced": {
                          "type": "number",
                          "example": 23
                        },
                        "required": {
                          "type": "number",
                          "example": 23
                        }
                      }
                    },
                    "joining": {
                      "type": "object",
                      "properties": {
                        "missing": {
                          "type": "number",
                          "example": 0
                        },
                        "synced": {
                          "type": "number",
                          "example": 0
                        },
                        "required": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    },
                    "syncing": {
                      "type": "object",
                      "properties": {
                        "missing": {
                          "type": "number",
                          "example": 0
                        },
                        "synced": {
                          "type": "number",
                          "example": 0
                        },
                        "required": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 23
                    }
                  }
                },
                "others_report": {
                  "type": "object",
                  "properties": {
                    "syncing_reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    },
                    "up_reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    },
                    "joining_missing": {
                      "type": "number",
                      "example": 0
                    },
                    "up_missing": {
                      "type": "number",
                      "example": 0
                    },
                    "syncing_missing": {
                      "type": "number",
                      "example": 0
                    },
                    "missing": {
                      "type": "number",
                      "example": 0
                    },
                    "joining_reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    },
                    "reporters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "report"
                      }
                    }
                  }
                }
              }
            },
            "is_ucx": {
              "type": "boolean",
              "example": false
            },
            "cpu_is_dedicated": {
              "type": "boolean",
              "example": true
            },
            "sw_version": {
              "type": "string",
              "example": "4.0.1.5908"
            },
            "cpu_core_id": {
              "type": "number",
              "example": 1
            },
            "container_id": {
              "type": "string",
              "example": "HostId<3>"
            },
            "cpu_numa_node": {
              "type": "number",
              "example": 0
            },
            "gds_mode": {
              "type": "string",
              "example": "mode"
            },
            "cpu_socket_id": {
              "type": "number",
              "example": 0
            },
            "rdma_mode": {
              "type": "string",
              "example": "mode"
            },
            "memory": {
              "type": "number",
              "example": 1476395008
            },
            "up_since": {
              "type": "string",
              "example": "2022-07-27T07:51:54.782895Z"
            },
            "trace_history_in_seconds": {
              "type": "number",
              "example": 6367
            },
            "leadership_role": {
              "type": "string",
              "example": "role"
            },
            "mgmt_ips": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "172.31.38.126"
              }
            },
            "last_fencing_time": {
              "type": "string",
              "example": "2021-11-22T08:44:15.725096Z"
            },
            "status": {
              "type": "string",
              "example": "UP"
            },
            "cpu_model": {
              "type": "string",
              "example": "Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz"
            },
            "dpdk_ip": {
              "type": "string",
              "example": "172.31.41.173"
            },
            "ucx_mode": {
              "type": "string",
              "example": "mode"
            },
            "dpdk_socket_info": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "info"
              }
            },
            "mgmt_port": {
              "type": "number",
              "example": 14000
            },
            "last_join_reject_reason": {
              "type": "string",
              "example": "NONE"
            },
            "is_dpdk": {
              "type": "boolean",
              "example": true
            },
            "cpu_id": {
              "type": "number",
              "example": 1
            }
          }
        },
        "objectStore": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "ObsId<1>"
            },
            "secret_key": {
              "type": "string",
              "example": "**********"
            },
            "bandwidth": {
              "type": "object",
              "properties": {
                "_mbps": {
                  "type": "number",
                  "example": 1000
                }
              }
            },
            "name": {
              "type": "string",
              "example": "OBS_1"
            },
            "obs_site": {
              "type": "string",
              "example": "local"
            },
            "uid": {
              "type": "string",
              "example": "302"
            },
            "hostname": {
              "type": "string",
              "example": "s3.eu-west-1.amazonaws.com"
            },
            "auth_method": {
              "type": "string",
              "example": "AWSSignature4"
            },
            "max_concurrent_removals": {
              "type": "number",
              "example": 10
            },
            "max_extents_in_data_blob": {
              "type": "number",
              "example": 10
            },
            "max_blocks_in_data_blob": {
              "type": "number",
              "example": 10
            },
            "uploadBandwidth": {
              "type": "object",
              "properties": {
                "_mbps": {
                  "type": "number",
                  "example": 4294967295
                }
              }
            },
            "access_key_id": {
              "type": "string",
              "example": "AKIA32X4U5TENMEYBPJE"
            },
            "port": {
              "type": "number",
              "example": 80
            },
            "max_concurrent_downloads": {
              "type": "number",
              "example": 10
            },
            "region": {
              "type": "string",
              "example": "eu-west-1"
            },
            "protocol": {
              "type": "string",
              "example": "HTTP"
            },
            "upload_memory_blocks_limit": {
              "type": "number",
              "example": 17000
            },
            "enable_upload_tags": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "objectStoreBucket": {
          "type": "object",
          "properties": {
            "status_remove": {
              "type": "string",
              "example": "UP"
            },
            "id": {
              "type": "string",
              "example": "ObsBucketId<1>"
            },
            "secret_key": {
              "type": "string",
              "example": "**********"
            },
            "errors_timeout": {
              "type": "number",
              "example": 60
            },
            "bandwidth": {
              "type": "object",
              "properties": {
                "_mbps": {
                  "type": "number",
                  "example": 1000
                }
              }
            },
            "name": {
              "type": "string",
              "example": "OBS_1"
            },
            "obs_name": {
              "type": "string",
              "example": "default"
            },
            "obs_site": {
              "type": "string",
              "example": "local"
            },
            "prefetch_mib": {
              "type": "number",
              "example": 10
            },
            "uid": {
              "type": "string",
              "example": "302"
            },
            "hostname": {
              "type": "string",
              "example": "s3.eu-west-1.amazonaws.com"
            },
            "enable_upload_tags": {
              "type": "boolean",
              "example": true
            },
            "unknown_nodes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "NodeId<61>"
              }
            },
            "unknown_count": {
              "type": "number",
              "example": 0
            },
            "up_nodes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "NodeId<100>"
              }
            },
            "up_count": {
              "type": "number",
              "example": 14
            },
            "down_count": {
              "type": "number",
              "example": 0
            },
            "max_concurrent_uploads": {
              "type": "number",
              "example": 10
            },
            "auth_method": {
              "type": "string",
              "example": "AWSSignature4"
            },
            "status_upload": {
              "type": "string",
              "example": "UP"
            },
            "download_bandwidth": {
              "type": "object",
              "properties": {
                "_mbps": {
                  "type": "number",
                  "example": 4294967295
                }
              }
            },
            "max_concurrent_removals": {
              "type": "number",
              "example": 10
            },
            "max_extents_in_data_blob": {
              "type": "number",
              "example": 10
            },
            "max_blocks_in_data_blob": {
              "type": "number",
              "example": 10
            },
            "upload_bandwidth": {
              "type": "object",
              "properties": {
                "_mbps": {
                  "type": "number",
                  "example": 4294967295
                }
              }
            },
            "up_since": {
              "type": "string",
              "nullable": true,
              "example": "2021-03-09T08:56:27.923664Z"
            },
            "access_key_id": {
              "type": "string",
              "example": "AKIA32X4U5TENMEYBPJE"
            },
            "last_errors": {
              "type": "string",
              "nullable": true,
              "example": "last error"
            },
            "port": {
              "type": "number",
              "example": 80
            },
            "status_download": {
              "type": "string",
              "example": "UP"
            },
            "bucket": {
              "type": "string",
              "example": "eu-west-1-aws.weka.io.def-oo-test/obs_1"
            },
            "status": {
              "type": "string",
              "example": "UP"
            },
            "obs_type": {
              "type": "string",
              "example": "AWS"
            },
            "max_concurrent_downloads": {
              "type": "number",
              "example": 10
            },
            "obs_id": {
              "type": "string",
              "example": "ObsId<0>"
            },
            "region": {
              "type": "string",
              "example": "eu-west-1"
            },
            "protocol": {
              "type": "string",
              "example": "HTTP"
            },
            "down_nodes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "NodeId<60>"
              }
            }
          }
        },
        "organization": {
          "type": "object",
          "properties": {
            "total_quota": {
              "type": "number",
              "example": 20000002048
            },
            "id": {
              "type": "number",
              "example": 1
            },
            "ssd_quota": {
              "type": "number",
              "example": 10000003072
            },
            "ssd_allocated": {
              "type": "number",
              "example": 0
            },
            "name": {
              "type": "string",
              "example": "ORG-1"
            },
            "total_allocated": {
              "type": "number",
              "example": 0
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            }
          }
        },
        "smbDomain": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "SMBTrustedDomainId<0>"
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "idmapBackend": {
              "type": "string",
              "example": "rfc2307"
            },
            "mappingFromId": {
              "type": "number",
              "example": 4291000001
            },
            "mappingToId": {
              "type": "number",
              "example": 4294967294
            },
            "domainName": {
              "type": "string",
              "example": "ad.company.com"
            }
          }
        },
        "smbShare": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "SambaShareId<0>"
            },
            "innerPath": {
              "type": "string",
              "example": "/"
            },
            "fileCreateMask": {
              "type": "string",
              "example": "0744"
            },
            "mountOptions": {
              "type": "string",
              "example": "writecache"
            },
            "readWriteUsers": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "wekadmin"
              }
            },
            "readOnly": {
              "type": "boolean",
              "example": true
            },
            "validUsers": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "username"
              }
            },
            "invalidUsers": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "username2"
              }
            },
            "hidden": {
              "type": "boolean",
              "example": false
            },
            "shareName": {
              "type": "string",
              "example": "share-1"
            },
            "readOnlyUsers": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "username3"
              }
            },
            "encryption": {
              "type": "string",
              "example": "cluster_default"
            },
            "uid": {
              "type": "string",
              "example": "435"
            },
            "acl": {
              "type": "boolean",
              "example": true
            },
            "additionalShareOptions": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "string"
              }
            },
            "directoryCreateMask": {
              "type": "string",
              "example": "0755"
            },
            "description": {
              "type": "string",
              "example": "some description"
            },
            "obsDirect": {
              "type": "boolean",
              "example": true
            },
            "allowGuestAccess": {
              "type": "boolean",
              "example": false
            },
            "fsName": {
              "type": "string",
              "example": "default"
            },
            "caseSensitivity": {
              "type": "boolean",
              "example": true
            },
            "namedStreams": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "snapshot": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "SnapViewId<10>"
            },
            "isWritable": {
              "type": "boolean",
              "example": false
            },
            "uploadSize": {
              "type": "object",
              "properties": {
                "LOCAL": {
                  "type": "number",
                  "example": 0
                },
                "REMOTE": {
                  "type": "number",
                  "example": 0
                }
              }
            },
            "task_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "task_id"
              }
            },
            "remoteStowInfo": {
              "type": "object",
              "properties": {
                "stowProgress": {
                  "type": "string",
                  "example": "100%"
                },
                "locator": {
                  "type": "string",
                  "example": "0c295aa9/d/s/7/spec/0906-4408-aecd-34fd7f8ad498"
                },
                "stowStatus": {
                  "type": "string",
                  "example": "SYNCHRONIZED"
                }
              }
            },
            "filesystemId": {
              "type": "string",
              "example": "FSId<0>"
            },
            "locator": {
              "type": "string",
              "example": "0c295aa9/d/s/7/spec/0906-4408-aecd-34fd7f8ad498"
            },
            "isRemoving": {
              "type": "boolean",
              "example": false
            },
            "filesystemUid": {
              "type": "string",
              "example": "7a6bfe5e-9944-4bf4-b799-527e9b5c2a13"
            },
            "name": {
              "type": "string",
              "example": "base"
            },
            "filesystem": {
              "type": "string",
              "example": "default"
            },
            "uid": {
              "type": "string",
              "example": "d4d24f1f-1d4b-58bc-c3de-169055ee6b95"
            },
            "localStowInfo": {
              "type": "object",
              "properties": {
                "stowProgress": {
                  "type": "string",
                  "example": "100%"
                },
                "locator": {
                  "type": "string",
                  "example": "0c295aa9/d/s/7/spec/0906-4408-aecd-34fd7f8ad498"
                },
                "stowStatus": {
                  "type": "string",
                  "example": "SYNCHRONIZED"
                }
              }
            },
            "accessPoint": {
              "type": "string",
              "example": "@GMT-2022.07.27-10.41.09"
            },
            "stowStatus": {
              "type": "string",
              "example": "SYNCHRONIZED"
            },
            "creationTime": {
              "type": "string",
              "example": "2022-07-27T10:41:10Z"
            },
            "objectProgress": {
              "type": "string",
              "example": "100%"
            },
            "snapshotSize": {
              "type": "number",
              "example": 0
            }
          }
        },
        "snapshotEdit": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "SnapViewId<10>"
            },
            "stowInfo": {
              "type": "object",
              "properties": {
                "LOCAL": {
                  "type": "object",
                  "properties": {
                    "stowProgress": {
                      "type": "string",
                      "example": "100%"
                    },
                    "locator": {
                      "type": "string",
                      "example": "0c295aa9/d/s/7/spec/0906-4408-aecd-34fd7f8ad498"
                    },
                    "multiObs": {
                      "type": "boolean",
                      "example": false
                    },
                    "locatorInfo": {
                      "type": "object",
                      "properties": {
                        "guid": {
                          "type": "string",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "snapLayerId": {
                          "type": "string",
                          "example": "SnapLayerId<0>"
                        }
                      }
                    },
                    "stowStatus": {
                      "type": "string",
                      "example": "SYNCHRONIZED"
                    },
                    "stowVersion": {
                      "type": "string",
                      "example": "StowVersion<INVALID>"
                    },
                    "generation": {
                      "type": "string",
                      "example": "SnapLayerStowGeneration<INVALID>"
                    },
                    "isDownloaded": {
                      "type": "string",
                      "example": "no"
                    }
                  }
                },
                "REMOTE": {
                  "type": "object",
                  "properties": {
                    "stowProgress": {
                      "type": "string",
                      "example": "100%"
                    },
                    "locator": {
                      "type": "string",
                      "example": "0c295aa9/d/s/7/spec/0906-4408-aecd-34fd7f8ad498"
                    },
                    "multiObs": {
                      "type": "boolean",
                      "example": false
                    },
                    "locatorInfo": {
                      "type": "object",
                      "properties": {
                        "guid": {
                          "type": "string",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "snapLayerId": {
                          "type": "string",
                          "example": "SnapLayerId<0>"
                        }
                      }
                    },
                    "stowStatus": {
                      "type": "string",
                      "example": "SYNCHRONIZED"
                    },
                    "stowVersion": {
                      "type": "string",
                      "example": "StowVersion<INVALID>"
                    },
                    "generation": {
                      "type": "string",
                      "example": "SnapLayerStowGeneration<INVALID>"
                    },
                    "isDownloaded": {
                      "type": "string",
                      "example": "no"
                    }
                  }
                }
              }
            },
            "isWritable": {
              "type": "boolean",
              "example": false
            },
            "filesystemId": {
              "type": "string",
              "example": "FSId<0>"
            },
            "isRemoving": {
              "type": "boolean",
              "example": false
            },
            "name": {
              "type": "string",
              "example": "base"
            },
            "filesystem": {
              "type": "string",
              "example": "default"
            },
            "uid": {
              "type": "string",
              "example": "d4d24f1f-1d4b-58bc-c3de-169055ee6b95"
            },
            "accessPoint": {
              "type": "string",
              "example": "@GMT-2022.07.27-10.41.09"
            },
            "snapLayerId": {
              "type": "string",
              "example": "SnapLayerId<1>"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time",
              "example": "2022-07-27T10:41:10Z"
            }
          }
        },
        "fileSystemGroup": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "fs-group1"
            },
            "start_demote": {
              "type": "number",
              "example": 1800,
              "description": "The retention period according to the amount of data that will be created"
            },
            "target_ssd_retention": {
              "type": "number",
              "example": 86400,
              "description": "SSD retention period"
            },
            "uid": {
              "type": "string",
              "example": "uid_string"
            },
            "id": {
              "type": "string",
              "example": "FSGroupId<0>"
            }
          }
        },
        "ThinProvisionReserve": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 0
            },
            "uid": {
              "type": "string",
              "example": "d4d24f1f-1d4b-58bc-c3de-169055ee6b95"
            },
            "name": {
              "type": "string",
              "example": "Root"
            },
            "ssd_reserve": {
              "type": "integer",
              "format": "int64",
              "example": 0
            }
          }
        },
        "machines": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "BACKEND"
              }
            },
            "name": {
              "type": "string",
              "example": "machine_hostname"
            },
            "primary_ip_address": {
              "type": "string",
              "example": "1.2.3.4"
            },
            "primary_port": {
              "type": "number",
              "example": "14000"
            },
            "status": {
              "type": "string",
              "example": "DEGRADED"
            },
            "up_since": {
              "type": "string",
              "example": "2021-10-26T07:56:41.818Z"
            },
            "load": {
              "type": "number",
              "example": "55"
            },
            "nodes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "MGMT"
                    }
                  },
                  "dedicated_core": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            },
            "versions": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "3.14.1.36-6c0de5d42626970079f7e0c6f1416ea6"
              }
            },
            "ram_allocated": {
              "type": "number",
              "example": "343597383680"
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  }
                }
              }
            }
          }
        },
        "machine": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "BACKEND"
              }
            },
            "name": {
              "type": "string",
              "example": "machine_hostname"
            },
            "primary_ip_address": {
              "type": "string",
              "example": "1.2.3.4"
            },
            "primary_port": {
              "type": "number",
              "example": 14000
            },
            "status": {
              "type": "string",
              "example": "DEGRADED"
            },
            "up_since": {
              "type": "string",
              "example": "2021-10-26T07:56:41.818Z"
            },
            "load": {
              "type": "number",
              "example": 55
            },
            "nodes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "id": {
                    "type": "number",
                    "example": 41
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "MGMT"
                    }
                  },
                  "container_uid": {
                    "type": "string",
                    "example": "f396c7b8-37b8-bcad-da62-b7346f00fa93"
                  },
                  "container_name": {
                    "type": "string",
                    "example": "default"
                  },
                  "executable": {
                    "type": "string",
                    "example": "wekanode"
                  },
                  "ip_addresses": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "172.31.17.71"
                    }
                  },
                  "socket_id": {
                    "type": "number",
                    "example": 0
                  },
                  "core_id": {
                    "type": "number",
                    "example": 0
                  },
                  "dedicated_core": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            },
            "versions": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "3.14.1.36-6c0de5d42626970079f7e0c6f1416ea6"
              }
            },
            "ram_allocated": {
              "type": "number",
              "example": 343597383680
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "uuid": {
                    "type": "string",
                    "example": "11d0c5f9-7b68-4d81-be41-2025c8368913"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "should_be_active": {
                    "type": "boolean",
                    "example": true
                  },
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "model": {
                    "type": "string",
                    "example": "OK"
                  },
                  "vendor": {
                    "type": "string",
                    "example": "OK"
                  },
                  "raw_capacity": {
                    "type": "string",
                    "example": "OK"
                  }
                }
              }
            },
            "containers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "HostId<0>"
                  },
                  "uid": {
                    "type": "string",
                    "example": "f396c7b8-37b8-bcad-da62-b7346f00fa93"
                  },
                  "name": {
                    "type": "string",
                    "example": "default"
                  },
                  "type": {
                    "type": "string",
                    "example": "weka"
                  },
                  "ram_allocated": {
                    "type": "number",
                    "example": 1493172224
                  },
                  "failure_domain_uid": {
                    "type": "string",
                    "example": "<some_uid>"
                  },
                  "failure_domain": {
                    "type": "string",
                    "example": "DOM-004"
                  },
                  "dedicated_memory": {
                    "type": "boolean",
                    "example": false
                  },
                  "bandwidth": {
                    "type": "number",
                    "example": 6412
                  },
                  "ips": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "123.33.42.12"
                    }
                  },
                  "version": {
                    "type": "string",
                    "example": "3.15.1.326"
                  },
                  "version_string": {
                    "type": "string",
                    "example": "3.15.1.326-58a3655fb45d16d2f8802afa112cce96"
                  }
                }
              }
            },
            "network_devices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "example": "Elastic Network Adapter (ENA)"
                  },
                  "vendor": {
                    "type": "string",
                    "example": "Amazon.com, Inc."
                  },
                  "link_layer_type": {
                    "type": "string",
                    "example": "ETH"
                  },
                  "speed": {
                    "type": "number",
                    "example": 1493172224
                  },
                  "driver": {
                    "type": "string",
                    "example": "igb_uio"
                  },
                  "pci_address": {
                    "type": "string",
                    "example": "00:08.0"
                  },
                  "device_name": {
                    "type": "string",
                    "example": "enx00e04c68049c"
                  }
                }
              }
            },
            "processors": {
              "type": "object",
              "properties": {
                "socket_count": {
                  "type": "number",
                  "example": "2"
                },
                "architecture": {
                  "type": "string",
                  "example": "x86_64"
                },
                "model": {
                  "type": "string",
                  "example": "Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz"
                },
                "vendor": {
                  "type": "string",
                  "example": "GenuineIntel"
                }
              }
            },
            "platform": {
              "type": "object",
              "properties": {
                "vendor_code": {
                  "type": "string",
                  "example": "hp"
                },
                "vendor": {
                  "type": "string",
                  "example": "Hewlett Packard"
                },
                "is_physical": {
                  "type": "boolean",
                  "example": true
                },
                "vendor_specific_info": {
                  "type": "object",
                  "properties": {
                    "family": {
                      "type": "string",
                      "example": "server family"
                    },
                    "model": {
                      "type": "string",
                      "example": "server_model"
                    },
                    "instance_id": {
                      "type": "string",
                      "example": "aws_instance_id"
                    },
                    "instance_type": {
                      "type": "string",
                      "example": "aws_instance_type"
                    },
                    "availability_zone": {
                      "type": "string",
                      "example": "aws_availability_zone"
                    }
                  }
                }
              }
            },
            "services": {
              "type": "object",
              "properties": {
                "smb": {
                  "type": "object",
                  "properties": {
                    "administrative_state": {
                      "type": "string",
                      "example": "ENABLED"
                    },
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                },
                "nfs": {
                  "type": "object",
                  "properties": {
                    "administrative_state": {
                      "type": "string",
                      "example": "ENABLED"
                    },
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                },
                "s3": {
                  "type": "object",
                  "properties": {
                    "administrative_state": {
                      "type": "string",
                      "example": "ENABLED"
                    },
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                }
              }
            },
            "operating_system": {
              "type": "string",
              "example": "Ubuntu 20.04"
            }
          }
        },
        "servers": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "BACKEND"
              }
            },
            "name": {
              "type": "string",
              "example": "server_hostname"
            },
            "primary_ip_address": {
              "type": "string",
              "example": "1.2.3.4"
            },
            "primary_port": {
              "type": "number",
              "example": "14000"
            },
            "status": {
              "type": "string",
              "example": "DEGRADED"
            },
            "up_since": {
              "type": "string",
              "example": "2021-10-26T07:56:41.818Z"
            },
            "up_since_time": {
              "type": "object",
              "properties": {
                "usecs": {
                  "type": "number",
                  "example": 1699258299451
                }
              }
            },
            "nodesCounter": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "example": 2
                },
                "monitored": {
                  "type": "number",
                  "example": 2
                }
              }
            },
            "load": {
              "type": "number",
              "example": "55"
            },
            "processes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "MGMT"
                    }
                  },
                  "dedicated_core": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            },
            "versions": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "3.14.1.36-6c0de5d42626970079f7e0c6f1416ea6"
              }
            },
            "ram_allocated": {
              "type": "number",
              "example": "343597383680"
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  }
                }
              }
            }
          }
        },
        "server": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "BACKEND"
              }
            },
            "name": {
              "type": "string",
              "example": "server_hostname"
            },
            "primary_ip_address": {
              "type": "string",
              "example": "1.2.3.4"
            },
            "primary_port": {
              "type": "number",
              "example": 14000
            },
            "status": {
              "type": "string",
              "example": "DEGRADED"
            },
            "up_since_time": {
              "type": "object",
              "properties": {
                "usecs": {
                  "type": "number",
                  "example": -1
                }
              }
            },
            "nodesCounter": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "example": 2
                },
                "monitored": {
                  "type": "number",
                  "example": 2
                }
              }
            },
            "up_since": {
              "type": "string",
              "example": "2021-10-26T07:56:41.818Z"
            },
            "load": {
              "type": "number",
              "example": 55
            },
            "processes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "id": {
                    "type": "number",
                    "example": 41
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "MGMT"
                    }
                  },
                  "container_uid": {
                    "type": "string",
                    "example": "f396c7b8-37b8-bcad-da62-b7346f00fa93"
                  },
                  "container_name": {
                    "type": "string",
                    "example": "default"
                  },
                  "executable": {
                    "type": "string",
                    "example": "wekanode"
                  },
                  "ip_addresses": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "172.31.17.71"
                    }
                  },
                  "socket_id": {
                    "type": "number",
                    "example": 0
                  },
                  "core_id": {
                    "type": "number",
                    "example": 0
                  },
                  "dedicated_core": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            },
            "versions": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "3.14.1.36-6c0de5d42626970079f7e0c6f1416ea6"
              }
            },
            "ram_allocated": {
              "type": "number",
              "example": 343597383680
            },
            "drives": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "c4c4de54-3593-11ec-8768-3f4687e5d883"
                  },
                  "uuid": {
                    "type": "string",
                    "example": "11d0c5f9-7b68-4d81-be41-2025c8368913"
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "should_be_active": {
                    "type": "boolean",
                    "example": true
                  },
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "model": {
                    "type": "string",
                    "example": "OK"
                  },
                  "vendor": {
                    "type": "string",
                    "example": "OK"
                  },
                  "raw_capacity": {
                    "type": "string",
                    "example": "OK"
                  }
                }
              }
            },
            "containers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "HostId<0>"
                  },
                  "uid": {
                    "type": "string",
                    "example": "f396c7b8-37b8-bcad-da62-b7346f00fa93"
                  },
                  "name": {
                    "type": "string",
                    "example": "default"
                  },
                  "type": {
                    "type": "string",
                    "example": "weka"
                  },
                  "ram_allocated": {
                    "type": "number",
                    "example": 1493172224
                  },
                  "failure_domain_uid": {
                    "type": "string",
                    "example": "<some_uid>"
                  },
                  "failure_domain": {
                    "type": "string",
                    "example": "DOM-004"
                  },
                  "dedicated_memory": {
                    "type": "boolean",
                    "example": false
                  },
                  "bandwidth": {
                    "type": "number",
                    "example": 6412
                  },
                  "ips": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "123.33.42.12"
                    }
                  },
                  "version": {
                    "type": "string",
                    "example": "3.15.1.326"
                  },
                  "version_string": {
                    "type": "string",
                    "example": "3.15.1.326-58a3655fb45d16d2f8802afa112cce96"
                  }
                }
              }
            },
            "network_devices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "example": "Elastic Network Adapter (ENA)"
                  },
                  "vendor": {
                    "type": "string",
                    "example": "Amazon.com, Inc."
                  },
                  "link_layer_type": {
                    "type": "string",
                    "example": "ETH"
                  },
                  "speed": {
                    "type": "number",
                    "example": 1493172224
                  },
                  "driver": {
                    "type": "string",
                    "example": "igb_uio"
                  },
                  "pci_address": {
                    "type": "string",
                    "example": "00:08.0"
                  },
                  "device_name": {
                    "type": "string",
                    "example": "enx00e04c68049c"
                  }
                }
              }
            },
            "processors": {
              "type": "object",
              "properties": {
                "socket_count": {
                  "type": "number",
                  "example": "2"
                },
                "architecture": {
                  "type": "string",
                  "example": "x86_64"
                },
                "model": {
                  "type": "string",
                  "example": "Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz"
                },
                "vendor": {
                  "type": "string",
                  "example": "GenuineIntel"
                }
              }
            },
            "platform": {
              "type": "object",
              "properties": {
                "vendor_code": {
                  "type": "string",
                  "example": "hp"
                },
                "vendor": {
                  "type": "string",
                  "example": "Hewlett Packard"
                },
                "is_physical": {
                  "type": "boolean",
                  "example": true
                },
                "vendor_specific_info": {
                  "type": "object",
                  "properties": {
                    "family": {
                      "type": "string",
                      "example": "server family"
                    },
                    "model": {
                      "type": "string",
                      "example": "server_model"
                    },
                    "instance_id": {
                      "type": "string",
                      "example": "aws_instance_id"
                    },
                    "instance_type": {
                      "type": "string",
                      "example": "aws_instance_type"
                    },
                    "availability_zone": {
                      "type": "string",
                      "example": "aws_availability_zone"
                    }
                  }
                }
              }
            },
            "services": {
              "type": "object",
              "properties": {
                "smb": {
                  "type": "object",
                  "properties": {
                    "administrative_state": {
                      "type": "string",
                      "example": "ENABLED"
                    },
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                },
                "nfs": {
                  "type": "object",
                  "properties": {
                    "administrative_state": {
                      "type": "string",
                      "example": "ENABLED"
                    },
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                },
                "s3": {
                  "type": "object",
                  "properties": {
                    "administrative_state": {
                      "type": "string",
                      "example": "ENABLED"
                    },
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                }
              }
            },
            "operating_system": {
              "type": "string",
              "example": "Ubuntu 20.04"
            }
          }
        },
        "mountDefaults": {
          "type": "object",
          "properties": {
            "qos_max_throughput": {
              "type": "number",
              "example": "100240444"
            },
            "qos_preferred_throughput": {
              "type": "number",
              "example": "100240444"
            }
          }
        },
        "traces": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "example": true
            },
            "level": {
              "type": "string",
              "example": "high"
            },
            "clients": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "default"
                }
              }
            },
            "clients_ensure_free": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "bytes"
                },
                "value": {
                  "type": "number",
                  "example": 3000000000
                }
              }
            },
            "servers": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "default"
                }
              }
            },
            "servers_ensure_free": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "bytes"
                },
                "value": {
                  "type": "number",
                  "example": 3000000000
                }
              }
            }
          }
        },
        "telemetryInfo": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "example": true
            },
            "uiEnabled": {
              "type": "boolean",
              "example": true
            },
            "auditTracesEnabled": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "telemetryExportReq": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "somesink"
            },
            "target": {
              "type": "string",
              "example": "/some/target"
            },
            "enabled": {
              "type": "boolean",
              "example": true
            },
            "token": {
              "type": "string",
              "example": "123-abc-123abc"
            },
            "ca_cert_pem": {
              "type": "string",
              "example": "-----BEGIN CERTIFICATE-----"
            },
            "allow_unverified_certificate": {
              "type": "boolean",
              "example": false
            },
            "clear_tls_settings": {
              "type": "boolean",
              "example": false
            },
            "use_cluster_ca_cert": {
              "type": "boolean",
              "example": true
            },
            "s3_bucket_name": {
              "type": "string",
              "example": "somebucket"
            },
            "s3_region": {
              "type": "string",
              "example": "eu-central-1"
            },
            "s3_key": {
              "type": "string",
              "example": "somekey"
            },
            "s3_secret": {
              "type": "string",
              "example": "secretkey"
            },
            "type": {
              "type": "string",
              "example": "File"
            },
            "sources": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Audit"
              }
            }
          }
        },
        "telemetryExport": {
          "type": "object",
          "properties": {
            "uid": {
              "type": "string",
              "example": "1234-abcd-4321-dcba"
            },
            "id": {
              "type": "string",
              "example": "TelemetrySinkId<0>"
            },
            "name": {
              "type": "string",
              "example": "somesink"
            },
            "target": {
              "type": "string",
              "example": "/some/target"
            },
            "type": {
              "type": "string",
              "example": "File"
            },
            "s3_bucket_name": {
              "type": "string",
              "example": "somebucket"
            },
            "s3_region": {
              "type": "string",
              "example": "eu-central-1"
            },
            "s3_key": {
              "type": "string",
              "example": "somekey"
            },
            "s3_secret": {
              "type": "string",
              "example": "secretkey"
            },
            "ca_type": {
              "type": "string",
              "example": "Unverified"
            },
            "sources": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Audit"
              }
            }
          }
        },
        "tracesFreeze": {
          "type": "object",
          "properties": {
            "start_time": {
              "type": "string",
              "example": "2022-01-01T00:00:00.000Z"
            },
            "end_time": {
              "type": "string",
              "example": "2022-01-01T00:00:00.000Z"
            },
            "retention": {
              "type": "number",
              "example": 0
            }
          }
        },
        "lockoutPolicy": {
          "type": "object",
          "properties": {
            "num_failed_logins": {
              "type": "number",
              "example": 5
            },
            "lockout_duration": {
              "type": "number",
              "example": 120
            }
          }
        },
        "tlsCertificate": {
          "type": "object",
          "properties": {
            "config_state": {
              "type": "string",
              "example": "USER_DEFINED"
            },
            "enabled": {
              "type": "boolean",
              "example": true
            },
            "certificate": {
              "type": "string",
              "example": "-----BEGIN CERTIFICATE-----\\n<all_the_content_of_cert.pem_with_\\n>\\n-----END CERTIFICATE-----\""
            }
          }
        },
        "filesystemResolve": {
          "type": "object",
          "properties": {
            "access_point": {
              "type": "string",
              "example": "string"
            },
            "fs_id": {
              "type": "string",
              "example": "FSId<1>"
            },
            "fs_name": {
              "type": "string",
              "example": "default"
            },
            "inode_context": {
              "type": "string",
              "example": "InodeContext<1>"
            },
            "inode_id": {
              "type": "string",
              "example": "InodeId<1>"
            },
            "path": {
              "type": "string",
              "example": "/"
            },
            "snap_name": {
              "type": "string",
              "example": "string"
            },
            "snap_view_id": {
              "type": "string",
              "example": "SnapViewId<1>"
            }
          }
        },
        "dataServiceFeatures": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "quota"
              },
              "enabled": {
                "type": "boolean",
                "example": true
              },
              "description": {
                "type": "string",
                "example": "Distributed Quota"
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Success",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "example": null
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "error message"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "missing_params": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "param1"
                        }
                      },
                      "param": {
                        "type": "string",
                        "example": "param2"
                      },
                      "error": {
                        "type": "string",
                        "example": "param2 has an error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "Unauthorized"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Forbidden",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "string",
                    "example": "Forbidden"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "error message"
                  }
                }
              }
            }
          }
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "paths": {
      "/accessGroups": {
        "get": {
          "tags": [
            "Access Groups"
          ],
          "summary": "Get access groups status",
          "operationId": "getAccessGroupStatus",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "access_groups_enabled": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/accessGroups/enable": {
        "post": {
          "tags": [
            "Access Groups"
          ],
          "summary": "Enable access groups",
          "operationId": "enableAccessGroups",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/accessGroups/disable": {
        "post": {
          "tags": [
            "Access Groups"
          ],
          "summary": "Disable access groups",
          "operationId": "disableAccessGroups",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/activeDirectory": {
        "put": {
          "tags": [
            "Active directory"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "server_uri": {
                      "type": "string",
                      "example": "ad.comapny.com",
                      "description": "LDAP server URI ([ldap://]hostname[:port] or ldaps://hostname[:port])"
                    },
                    "start_tls": {
                      "type": "boolean",
                      "example": false,
                      "description": "Issue StartTLS after connecting (should not be used with ldaps://)"
                    },
                    "ignore_start_tls_failure": {
                      "type": "boolean",
                      "example": false,
                      "description": "Ignore start TLS failure"
                    },
                    "server_timeout_secs": {
                      "type": "number",
                      "example": 30,
                      "description": "LDAP connection timeout in seconds"
                    },
                    "domain": {
                      "type": "string",
                      "example": "ad.comapny.com",
                      "description": "Domain"
                    },
                    "reader_username": {
                      "type": "string",
                      "example": "read_admin",
                      "description": "Reader username"
                    },
                    "reader_password": {
                      "type": "string",
                      "example": "read_pass",
                      "description": "Reader password"
                    },
                    "role_groups": {
                      "type": "object",
                      "example": {
                        "ClusterAdmin": "Enterprise admins",
                        "OrgAdmin": "",
                        "Regular": "WekaGroup",
                        "ReadOnly": "TestGroup"
                      },
                      "description": "user role can be ClusterAdmin, OrgAdmin, ReadOnly or Regular"
                    }
                  }
                }
              }
            }
          },
          "summary": "Update active directory",
          "operationId": "updateLdapActiveDirectory",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/alerts": {
        "get": {
          "tags": [
            "Alerts"
          ],
          "summary": "Get all alerts",
          "operationId": "getAlerts",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/alert"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/alerts/types": {
        "get": {
          "tags": [
            "Alerts"
          ],
          "summary": "Get alerts types",
          "operationId": "getAlertsTypes",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "ClusterIsUpgrading",
                          "DataProtection",
                          "NodeDisconnected",
                          "NodeTieringConnectivity",
                          "DriveDown",
                          "DriveEndurancePercentageUsed",
                          "DriveEnduranceSparesRemaining",
                          "DriveNeedsPhaseout",
                          "JumboConnectivity",
                          "BucketHasNoQuorum",
                          "BucketUnresponsive",
                          "HangingIos",
                          "NotEnoughActiveDrives",
                          "PartiallyConnectedNode",
                          "NodeNetworkUnstable",
                          "NetworkInterfaceLinkDown",
                          "BondInterfaceCompromised",
                          "IPConflictDetected",
                          "ChokingDetected",
                          "PerformanceDegradedLowRAM",
                          "ApproachingClientsUnavailability",
                          "ClockSkew",
                          "AgentNotRunning",
                          "OfedVersions",
                          "DedicatedWatchdog",
                          "BackendNumaBalancingEnabled",
                          "ClientNumaBalancingEnabled",
                          "CloudHealth",
                          "AdminDefaultPassword",
                          "NoClusterLicense",
                          "LicenseError",
                          "HighDrivesCapacity",
                          "NegativeUnprovisionedCapacity",
                          "FilesystemHasTooManyFiles",
                          "MismatchedDriveFailureDomain",
                          "KMSError",
                          "AutoRemoveTimeoutTooLow",
                          "NodeBlacklisted",
                          "UdpModePerformanceWarning",
                          "ResourcesNotApplied",
                          "PartialConnectivityTrackingDisabled",
                          "TLSCertificateExpiresSoon",
                          "TLSCertificateExpired",
                          "ClusterInitializationError",
                          "TracesDisabled",
                          "ManualOverridesActive",
                          "NodeRDMANotActive"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/alerts/description": {
        "get": {
          "tags": [
            "Alerts"
          ],
          "summary": "Get alerts description",
          "operationId": "getAlertDescription",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "ExampleAlert"
                            },
                            "action": {
                              "type": "string",
                              "example": "Disable this alert by running the set_example_alert_off manhole"
                            },
                            "title": {
                              "type": "string",
                              "example": "Example Alert"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/alerts/{alert_type}/mute": {
        "put": {
          "tags": [
            "Alerts"
          ],
          "summary": "Mute alerts by type",
          "operationId": "muteAlertByType",
          "parameters": [
            {
              "in": "path",
              "name": "alert_type",
              "description": "Alert type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "duration": {
                      "type": "number",
                      "default": 604800,
                      "description": "Mute duration in seconds"
                    }
                  },
                  "required": [
                    "duration"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/alerts/{alert_type}/unmute": {
        "put": {
          "tags": [
            "Alerts"
          ],
          "summary": "Unmute alerts by type",
          "operationId": "unmuteAlertByType",
          "parameters": [
            {
              "in": "path",
              "name": "alert_type",
              "description": "Alert type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/wekaHome": {
        "get": {
          "tags": [
            "Weka home"
          ],
          "summary": "Get cloud config",
          "operationId": "getCloud",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "cloud_stats_enabled": {
                            "type": "boolean",
                            "example": false
                          },
                          "status": {
                            "type": "string",
                            "example": "healthy"
                          },
                          "isRegistered": {
                            "type": "boolean",
                            "example": true
                          },
                          "hosts": {
                            "type": "object",
                            "properties": {
                              "HostId<0>": {
                                "type": "object",
                                "properties": {
                                  "load": {
                                    "type": "number",
                                    "example": 0
                                  },
                                  "health": {
                                    "type": "string",
                                    "example": "READY"
                                  }
                                }
                              }
                            }
                          },
                          "url": {
                            "type": "string",
                            "example": "https://company.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/wekaHome/proxy": {
        "get": {
          "tags": [
            "Weka home"
          ],
          "summary": "Get cloud proxy",
          "operationId": "getCloudProxy",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "proxy": {
                            "type": "string",
                            "example": "proxy.some"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Weka home"
          ],
          "summary": "Set cloud proxy",
          "operationId": "setCloudProxy",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proxy": {
                      "type": "string",
                      "description": "HTTP proxy used to connect to cloud services"
                    }
                  },
                  "required": [
                    "proxy"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "proxy": {
                            "type": "string",
                            "example": "proxy.some"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/wekaHome/uploadRate": {
        "get": {
          "tags": [
            "Weka home"
          ],
          "summary": "Get cloud upload rate",
          "operationId": "getCloudUploadRate",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "number",
                        "example": 1048576,
                        "description": "Maximum uploaded bytes per second"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Weka home"
          ],
          "summary": "Update cloud upload rate",
          "operationId": "updateCloudUploadRate",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bytes_per_second": {
                      "type": "number",
                      "description": "Maximum uploaded bytes per second"
                    }
                  },
                  "required": [
                    "bytes_per_second"
                  ]
                }
              }
            }
          }
        }
      },
      "/wekaHome/url": {
        "get": {
          "tags": [
            "Weka home"
          ],
          "summary": "Get cloud url",
          "operationId": "getCloudUrl",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": "https://some_cloud.com"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/wekaHome/enable": {
        "post": {
          "tags": [
            "Weka home"
          ],
          "summary": "Enable cloud",
          "operationId": "enableCloud",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cloud_url": {
                      "type": "string",
                      "description": "The base url of the cloud service"
                    },
                    "enable_cloud_stats": {
                      "type": "boolean",
                      "description": "Enable or disable uploading stats to the cloud"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/wekaHome/disable": {
        "post": {
          "tags": [
            "Weka home"
          ],
          "summary": "Disable cloud",
          "operationId": "disableCloud",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/cluster": {
        "post": {
          "tags": [
            "Cluster"
          ],
          "summary": "Create cluster",
          "operationId": "createCluster",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "guid": {
                            "type": "string"
                          },
                          "success": {
                            "type": "object"
                          },
                          "failures": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hosts_hostnames": {
                      "type": "array",
                      "description": "A list of hostname to be included in the new cluster",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "host-1",
                        "host-2"
                      ]
                    },
                    "hosts_ips": {
                      "type": "array",
                      "description": "Management IP addresses; If empty, the hostnames will be resolved; If hosts are highly-available or mixed-networking, use IP set '<ip>+<ip>+...+<ip>';",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "<host-ip>",
                        "<host-ip2>"
                      ]
                    },
                    "join_secrets": {
                      "type": "array",
                      "description": "List of cluster's join secrets, used to prevent unauthorized hosts from joining the cluster",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "<some-secret>"
                      ]
                    },
                    "admin_password": {
                      "type": "string",
                      "description": "The password for the cluster admin user; will be set to the default password if not provided",
                      "example": "Admin123"
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Cluster"
          ],
          "summary": "Update cluster",
          "operationId": "updateCluster",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cluster_name": {
                      "type": "string",
                      "description": "Cluster name",
                      "example": "new_name"
                    },
                    "data_drives": {
                      "type": "number",
                      "description": "Number of RAID data drives",
                      "example": 5
                    },
                    "parity_drives": {
                      "type": "number",
                      "description": "Number of RAID protection parity drives",
                      "example": 2
                    },
                    "scrubber_bytes_per_sec": {
                      "type": "number",
                      "example": 100000000,
                      "description": "Rate of RAID scrubbing in units per second (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "hotspare_failure_domains": {
                      "type": "number",
                      "example": 2
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Cluster"
          ],
          "summary": "Get cluster status",
          "operationId": "getClusterStatus",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "overlay": {
                            "type": "object",
                            "properties": {
                              "client_nodes_safety_histogram": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                },
                                "example": [
                                  0,
                                  0,
                                  10,
                                  1
                                ]
                              },
                              "branching_factor": {
                                "type": "number",
                                "example": 40
                              },
                              "clients_branching_factor": {
                                "type": "number",
                                "example": 100
                              },
                              "backend_nodes_safety_histogram": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                },
                                "example": [
                                  0,
                                  0,
                                  10,
                                  1
                                ]
                              },
                              "client_nodes_at_risk": {
                                "type": "number",
                                "example": 0
                              },
                              "client_nodes_not_supported": {
                                "type": "number",
                                "example": 0
                              }
                            }
                          },
                          "activity": {
                            "type": "object",
                            "properties": {
                              "obs_upload_bytes_per_second": {
                                "type": "number",
                                "example": 0
                              },
                              "sum_bytes_read": {
                                "type": "number",
                                "example": 0
                              },
                              "num_writes": {
                                "type": "number",
                                "example": 0
                              },
                              "obs_download_bytes_per_second": {
                                "type": "number",
                                "example": 0
                              },
                              "sum_bytes_written": {
                                "type": "number",
                                "example": 0
                              },
                              "num_reads": {
                                "type": "number",
                                "example": 0
                              },
                              "num_ops": {
                                "type": "number",
                                "example": 0
                              }
                            }
                          },
                          "hot_spare": {
                            "type": "number",
                            "example": 1
                          },
                          "io_status": {
                            "type": "string",
                            "example": "STARTED"
                          },
                          "status": {
                            "type": "string",
                            "example": "OK"
                          },
                          "last_init_failure": {
                            "type": "string",
                            "example": ""
                          },
                          "drives": {
                            "type": "object",
                            "properties": {
                              "active": {
                                "type": "number",
                                "example": 7
                              },
                              "total": {
                                "type": "number",
                                "example": 7
                              }
                            }
                          },
                          "name": {
                            "type": "string",
                            "example": "stewie"
                          },
                          "upgrade": {
                            "type": "string",
                            "example": ""
                          },
                          "io_status_changed_time": {
                            "type": "string",
                            "example": "2021-03-10T09:46:02.245149Z"
                          },
                          "short_drive_grace_on_failure_secs": {
                            "type": "number",
                            "example": 10
                          },
                          "io_nodes": {
                            "type": "object",
                            "properties": {
                              "active": {
                                "type": "number",
                                "example": 7
                              },
                              "total": {
                                "type": "number",
                                "example": 7
                              }
                            }
                          },
                          "cloud": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "example": true
                              },
                              "healthy": {
                                "type": "boolean",
                                "example": true
                              },
                              "proxy": {
                                "type": "string",
                                "example": ""
                              }
                            }
                          },
                          "release_hash": {
                            "type": "string",
                            "example": "d79aaa56d95d9beb02b15783dede1ec79d4c273b"
                          },
                          "rebuild": {
                            "type": "object",
                            "properties": {
                              "requiredFDsForRebuild": {
                                "type": "number",
                                "example": 4
                              },
                              "unavailablePercent": {
                                "type": "number",
                                "example": 0
                              },
                              "enoughActiveFDs": {
                                "type": "boolean",
                                "example": true
                              },
                              "totalCopiesMiB": {
                                "type": "number",
                                "example": 0
                              },
                              "unavailableMiB": {
                                "type": "number",
                                "example": 0
                              },
                              "progressPercent": {
                                "type": "number",
                                "example": 0
                              },
                              "stripeDisks": {
                                "type": "number",
                                "example": 7
                              },
                              "numActiveFDs": {
                                "type": "number",
                                "example": 7
                              },
                              "totalCopiesDoneMiB": {
                                "type": "number",
                                "example": 0
                              },
                              "protectionState": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "percent": {
                                      "type": "number",
                                      "example": 100
                                    },
                                    "numFailures": {
                                      "type": "number",
                                      "example": 0
                                    },
                                    "MiB": {
                                      "type": "number",
                                      "example": 403200
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "init_stage": {
                            "type": "string",
                            "example": "INITIALIZED"
                          },
                          "failure_domains_enabled": {
                            "type": "boolean",
                            "example": true
                          },
                          "long_drive_grace_on_failure_secs": {
                            "type": "number",
                            "example": 360
                          },
                          "hosts": {
                            "type": "object",
                            "properties": {
                              "total_count": {
                                "type": "number",
                                "example": 7
                              },
                              "backends": {
                                "type": "object",
                                "properties": {
                                  "active": {
                                    "type": "number",
                                    "example": 7
                                  },
                                  "total": {
                                    "type": "number",
                                    "example": 7
                                  }
                                }
                              },
                              "active_count": {
                                "type": "number",
                                "example": 7
                              },
                              "clients": {
                                "type": "object",
                                "properties": {
                                  "active": {
                                    "type": "number",
                                    "example": 0
                                  },
                                  "total": {
                                    "type": "number",
                                    "example": 0
                                  }
                                }
                              }
                            }
                          },
                          "last_init_failure_code": {
                            "type": "string",
                            "example": ""
                          },
                          "stripe_data_drives": {
                            "type": "number",
                            "example": 5
                          },
                          "release": {
                            "type": "string",
                            "example": "3.11.1.6926-f6e1fbb96d03ef76b64bfd4d8c2c366a"
                          },
                          "buckets_info": {
                            "type": "object",
                            "properties": {
                              "averageFillLevelPPMMinSinceLastEvent": {
                                "type": "number",
                                "example": 0
                              },
                              "thinProvisionState": {
                                "type": "object",
                                "properties": {
                                  "usableWritable": {
                                    "type": "number",
                                    "example": 521109504
                                  },
                                  "totalSSDBudgets": {
                                    "type": "number",
                                    "example": 446644224
                                  },
                                  "shrinkageFactor": {
                                    "type": "object",
                                    "properties": {
                                      "val": {
                                        "type": "number",
                                        "example": 4096
                                      }
                                    }
                                  }
                                }
                              },
                              "averageFillLevelPPM": {
                                "type": "number",
                                "example": 5269
                              },
                              "shrunkAtGeneration": {
                                "type": "string",
                                "example": "ConfigGeneration<INVALID>"
                              },
                              "placementAllocationThresholdPPM": {
                                "type": "number",
                                "example": 450000
                              },
                              "maxPrefetchRPCs": {
                                "type": "number",
                                "example": 256
                              }
                            }
                          },
                          "active_alerts_count": {
                            "type": "number",
                            "example": 0
                          },
                          "time": {
                            "type": "object",
                            "properties": {
                              "cluster_time": {
                                "type": "string",
                                "example": "2021-03-10T09:52:14.5068161Z"
                              },
                              "allowed_clock_skew_secs": {
                                "type": "number",
                                "example": 60
                              },
                              "cluster_local_utc_offset_seconds": {
                                "type": "number",
                                "example": 1800
                              },
                              "cluster_local_utc_offset": {
                                "type": "string",
                                "example": "+03:00"
                              }
                            }
                          },
                          "net": {
                            "type": "object",
                            "properties": {
                              "link_layer": {
                                "type": "string",
                                "example": "ETH"
                              }
                            }
                          },
                          "buckets": {
                            "type": "object",
                            "properties": {
                              "active": {
                                "type": "number",
                                "example": 105
                              },
                              "global_flush_generation": {
                                "type": "number",
                                "example": 1
                              },
                              "global_flush_status": {
                                "type": "string",
                                "example": "NONE"
                              },
                              "total": {
                                "type": "number",
                                "example": 105
                              },
                              "flush_finished": {
                                "type": "number",
                                "example": 105
                              },
                              "shutdown_finished": {
                                "type": "number",
                                "example": 105
                              }
                            }
                          },
                          "scrubber_bytes_per_sec": {
                            "type": "number",
                            "example": 134217728
                          },
                          "init_stage_changed_time": {
                            "type": "string",
                            "example": "2021-03-10T09:45:42.599016Z"
                          },
                          "capacity": {
                            "type": "object",
                            "properties": {
                              "total_bytes": {
                                "type": "number",
                                "example": 1829454741504
                              },
                              "hot_spare_bytes": {
                                "type": "number",
                                "example": 305009786880
                              },
                              "unprovisioned_bytes": {
                                "type": "number",
                                "example": 0
                              }
                            }
                          },
                          "is_cluster": {
                            "type": "boolean",
                            "example": true
                          },
                          "block_upgrade_task": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "example": "INVALID"
                              },
                              "progress": {
                                "type": "number",
                                "example": 0
                              },
                              "taskId": {
                                "type": "string",
                                "example": "BlockTaskId<0>"
                              },
                              "state": {
                                "type": "string",
                                "example": "IDLE"
                              }
                            }
                          },
                          "grim_reaper": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "example": true
                              },
                              "is_cluster_fully_connected": {
                                "type": "boolean",
                                "example": true
                              },
                              "node_with_least_links": {
                                "type": "string",
                                "example": ""
                              }
                            }
                          },
                          "stripe_protection_drives": {
                            "type": "number",
                            "example": 2
                          },
                          "guid": {
                            "type": "string",
                            "example": "9724f5ec-a68c-437d-8411-03c8425c06b8"
                          },
                          "start_io_starting_drives_grace_secs": {
                            "type": "number",
                            "example": 60
                          },
                          "start_io_starting_io_nodes_grace_secs": {
                            "type": "number",
                            "example": 30
                          },
                          "hanging_ios": {
                            "type": "object",
                            "properties": {
                              "event_driver_frontend_threshold_secs": {
                                "type": "number",
                                "example": 1800
                              },
                              "last_emitted_backend_no_longer_detected_event": {
                                "type": "string",
                                "example": ""
                              },
                              "alerts_threshold_secs": {
                                "type": "number",
                                "example": 900
                              },
                              "last_emitted_backend_event": {
                                "type": "string",
                                "example": ""
                              },
                              "event_backend_threshold_secs": {
                                "type": "number",
                                "example": 1800
                              },
                              "last_emitted_driver_frontend_no_longer_detected_event": {
                                "type": "string",
                                "example": ""
                              },
                              "last_emitted_driver_frontend_event": {
                                "type": "string",
                                "example": ""
                              },
                              "event_nfs_frontend_threshold_secs": {
                                "type": "number",
                                "example": 1800
                              },
                              "last_emitted_nfs_frontend_event": {
                                "type": "string",
                                "example": ""
                              },
                              "last_emitted_nfs_frontend_no_longer_detected_event": {
                                "type": "string",
                                "example": ""
                              }
                            }
                          },
                          "last_init_failure_time": {
                            "type": "string",
                            "example": ""
                          },
                          "nodes": {
                            "type": "object",
                            "properties": {
                              "blacklisted": {
                                "type": "number",
                                "example": 0
                              },
                              "total": {
                                "type": "number",
                                "example": 14
                              }
                            }
                          },
                          "licensing": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "example": "Classic"
                              },
                              "usage": {
                                "type": "object",
                                "properties": {
                                  "drive_capacity_gb": {
                                    "type": "number",
                                    "example": 3324
                                  },
                                  "usable_capacity_gb": {
                                    "type": "number",
                                    "example": 1829
                                  },
                                  "obs_capacity_gb": {
                                    "type": "number",
                                    "example": 0
                                  }
                                }
                              },
                              "license": {
                                "type": "string",
                                "example": "license_key"
                              },
                              "limits": {
                                "type": "object",
                                "properties": {
                                  "drive_capacity_gb": {
                                    "type": "number",
                                    "example": 3324
                                  },
                                  "usable_capacity_gb": {
                                    "type": "number",
                                    "example": 18446744073709552000
                                  },
                                  "obs_capacity_gb": {
                                    "type": "number",
                                    "example": 1000000000000000
                                  },
                                  "valid_from": {
                                    "type": "string",
                                    "example": "2021-03-10T09:46:18Z"
                                  },
                                  "expires_at": {
                                    "type": "string",
                                    "example": "2021-04-09T09:46:18Z"
                                  }
                                }
                              },
                              "next_check": {
                                "type": "string",
                                "example": "2021-03-10T10:46:20Z"
                              },
                              "error": {
                                "type": "string",
                                "example": ""
                              },
                              "check_interval_secs": {
                                "type": "number",
                                "example": 3600
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/containers": {
        "get": {
          "tags": [
            "Containers"
          ],
          "summary": "Get all containers",
          "operationId": "getContainers",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/container"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Add container to cluster",
          "operationId": "addContainer",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/container"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "container_name"
                  ],
                  "type": "object",
                  "properties": {
                    "container_name": {
                      "type": "string",
                      "description": "Management network container name",
                      "example": "mgmt container"
                    },
                    "ip": {
                      "type": "string",
                      "example": "173.21.11.41",
                      "description": "Management IP; If empty, the hostname is resolved; If host is highly-available or mixed-networking, use IP set '<ip>+<ip>+...+<ip>'"
                    },
                    "no_wait": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/containers/{uid}": {
        "get": {
          "tags": [
            "Containers"
          ],
          "summary": "Get single container",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Container uid"
            }
          ],
          "operationId": "getSingleContainer",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/container"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "put": {
          "tags": [
            "Containers"
          ],
          "summary": "Configure host - Need to apply container after",
          "operationId": "updateContainer",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Container uid",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "failure_domain_type": {
                      "type": "string",
                      "description": "A failure domain type",
                      "enum": [
                        "AUTO",
                        "USER",
                        "HA"
                      ]
                    },
                    "failure_domain": {
                      "type": "string",
                      "description": "Set the host failure domain"
                    },
                    "cores": {
                      "type": "number",
                      "description": "Dedicate host's cores to weka",
                      "example": 1
                    },
                    "frontend_dedicated_cores": {
                      "type": "number",
                      "description": "Frontend dedicate cores",
                      "example": 1
                    },
                    "drives_dedicated_cores": {
                      "type": "number",
                      "description": "Drives dedicate cores",
                      "example": 0
                    },
                    "cores_ids_type": {
                      "type": "string",
                      "description": "A core id type",
                      "enum": [
                        "AUTO",
                        "USER"
                      ]
                    },
                    "memory": {
                      "type": "number",
                      "description": "Dedicate a set amount of RAM to weka",
                      "example": 100
                    },
                    "dedicated": {
                      "type": "boolean",
                      "description": "Set the host as dedicated to weka. For example it can be rebooted whenever needed, and configured by weka for optimal performance and stability",
                      "example": true
                    },
                    "bandwidth": {
                      "type": "number",
                      "description": "Limit weka's bandwidth for the host",
                      "example": 1000
                    },
                    "auto_remove_timeout": {
                      "type": "number",
                      "description": "Set how long to wait before removing this host if it disconnects from the cluster (for clients only)"
                    },
                    "management_ips": {
                      "type": "array",
                      "description": "Set the host's management node IPs. Setting 2 IPs will turn this hosts networking into highly-available mode",
                      "items": {
                        "type": "string",
                        "example": "173.21.11.41"
                      }
                    },
                    "apply_container": {
                      "type": "boolean",
                      "description": "Apply the container after this change",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Containers"
          ],
          "summary": "Remove container from cluster",
          "operationId": "removeContainer",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Container uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/containers/manageProtoContainers": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Manage protocol containers",
          "operationId": "manageProtoContainers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "container_names",
                    "container_operation"
                  ],
                  "properties": {
                    "container_names": {
                      "type": "array",
                      "description": "Container names",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ganesha"
                        ]
                      },
                      "example": [
                        "ganesha"
                      ]
                    },
                    "container_operation": {
                      "type": "string",
                      "description": "operatation to perform on container/s",
                      "enum": [
                        "RESTART_CONTAINER"
                      ],
                      "example": "RESTART_CONTAINER"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/containers/apply": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Apply containers",
          "operationId": "applyContainers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "container_uids"
                  ],
                  "properties": {
                    "container_uids": {
                      "type": "array",
                      "description": "Container uids to apply",
                      "items": {
                        "type": "string",
                        "example": "uid_string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/containers/{uid}/apply": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Apply container",
          "operationId": "applyContainer",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Container uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/containers/lastFailureReason/{uid}": {
        "delete": {
          "tags": [
            "Containers"
          ],
          "summary": "Clear container last failure",
          "operationId": "clearContainerFailure",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Container uid",
              "schema": {
                "type": "string"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/containers/{uid}/resources": {
        "get": {
          "tags": [
            "Containers"
          ],
          "summary": "Get container resources",
          "operationId": "getContainersResources",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/containerResource"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Containers uid",
              "schema": {
                "type": "string"
              },
              "required": true
            },
            {
              "in": "query",
              "name": "type",
              "schema": {
                "type": "string"
              },
              "description": "resource type can be Staging or Stable (Staging if empty)"
            }
          ]
        }
      },
      "/containers/activate": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Activate containers",
          "operationId": "activateContainers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "container_uids"
                  ],
                  "properties": {
                    "container_uids": {
                      "type": "array",
                      "description": "Container uids to activate",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/containers/{uid}/activate": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Activate container",
          "operationId": "activateContainer",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Containers uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/containers/deactivate": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Deactivate containers",
          "operationId": "deactivateContainers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "container_uids"
                  ],
                  "type": "object",
                  "properties": {
                    "container_uids": {
                      "type": "array",
                      "description": "Container uids to deactivate",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/containers/{uid}/deactivate": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Deactivate container",
          "operationId": "deactivateContainer",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Container uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/containers/netdevs": {
        "get": {
          "tags": [
            "Containers"
          ],
          "summary": "Get all containers network",
          "operationId": "getAllContainersNetwork",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/netdevContainer"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/containers/{uid}/netdevs": {
        "get": {
          "tags": [
            "Containers"
          ],
          "summary": "Get container network",
          "operationId": "getContainerNetwork",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/netdevContainer"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Container uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "Create container network - Need to apply container after",
          "operationId": "createContainerNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Container uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "device": {
                      "type": "string",
                      "description": "Network device pci-slot/mac-address/interface-name(s)",
                      "example": "eth1"
                    },
                    "ips_type": {
                      "type": "string",
                      "description": "POOL - IPs from the default data networking IP pool would be used, USER - configured by the user",
                      "enum": [
                        "POOL",
                        "USER"
                      ]
                    },
                    "ips": {
                      "type": "array",
                      "description": "IPs to be allocated to cores using the device. If not given - IPs may be set automatically according the interface's IPs, or taken from the default networking IPs pool (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                      "items": {
                        "type": "string",
                        "example": "172.31.4.107"
                      }
                    },
                    "gateway": {
                      "type": "string",
                      "example": "172.31.0.1",
                      "description": "Default gateway IP. In AWS this value is auto-detected, otherwise the default data networking gateway will be used"
                    },
                    "netmask": {
                      "type": "number",
                      "example": 20,
                      "description": "Netmask in bits number. In AWS this value is auto-detected, otherwise the default data networking netmask will be used"
                    },
                    "name": {
                      "type": "string",
                      "description": "If empty, a name will be auto generated",
                      "example": "netdev01"
                    },
                    "apply_container": {
                      "type": "boolean",
                      "description": "Apply the container after this change",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/containers/{uid}/netdevs/{netdev_uid}": {
        "delete": {
          "tags": [
            "Containers"
          ],
          "summary": "Remove container network - Need to apply container after",
          "operationId": "removeContainerNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Container uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "netdev_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "network device uid"
            },
            {
              "in": "query",
              "name": "apply_container",
              "schema": {
                "type": "boolean"
              },
              "description": "Apply the container after this change",
              "example": false
            }
          ]
        }
      },
      "/containers/infos": {
        "post": {
          "tags": [
            "Containers"
          ],
          "summary": "get containers infos from IPs",
          "operationId": "getContainersInfo",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "net": {
                            "type": "object",
                            "properties": {
                              "interfaces": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "mtu": {
                                      "type": "number",
                                      "example": 65536
                                    },
                                    "pciSlot": {
                                      "type": "string",
                                      "example": "0000:ff:ff.ff"
                                    },
                                    "mac": {
                                      "type": "string",
                                      "example": "00:00:00:00:00:00"
                                    },
                                    "pciSlot_slaves": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ip4": {
                                      "type": "string",
                                      "example": "127.0.0.1"
                                    },
                                    "linkLayer": {
                                      "type": "string",
                                      "example": "ETH"
                                    },
                                    "name": {
                                      "type": "string",
                                      "example": "lo"
                                    },
                                    "ip4Netmask": {
                                      "type": "number",
                                      "example": 8
                                    },
                                    "name_slaves": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "bondType": {
                                      "type": "string",
                                      "example": "NONE"
                                    },
                                    "ip6": {
                                      "type": "string",
                                      "example": null
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "disks": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "devName": {
                                  "type": "string",
                                  "example": "xvdw"
                                },
                                "diskSizeBytes": {
                                  "type": "number",
                                  "example": 20401094656
                                },
                                "isMounted": {
                                  "type": "boolean"
                                },
                                "uuid": {
                                  "type": "string",
                                  "example": "00000000-0000-0000-0000-000000000000"
                                },
                                "devNumber": {
                                  "type": "string",
                                  "example": "202:5632"
                                },
                                "isWekaPartition": {
                                  "type": "boolean"
                                },
                                "label": {
                                  "type": "string",
                                  "example": null
                                },
                                "pciAddr": {
                                  "type": "string",
                                  "example": null
                                },
                                "parentName": {
                                  "type": "string",
                                  "example": null
                                },
                                "devPath": {
                                  "type": "string",
                                  "example": "/dev/xvdw"
                                },
                                "sizeBytes": {
                                  "type": "number",
                                  "example": 20401094656
                                },
                                "isRotational": {
                                  "type": "boolean"
                                },
                                "type": {
                                  "type": "string",
                                  "example": "DISK"
                                },
                                "model": {
                                  "type": "string",
                                  "example": null
                                }
                              }
                            }
                          },
                          "resolvedIp": {
                            "type": "string",
                            "example": "172.31.23.127"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "containers_ips": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "info_types": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "VERSION",
                          "OSINFO",
                          "MEMORY",
                          "CORES",
                          "DISKS",
                          "ETHS",
                          "NET",
                          "IPS",
                          "AWS",
                          "OFED"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/dataService/features": {
        "get": {
          "tags": [
            "DataService"
          ],
          "summary": "Get dataService features list",
          "operationId": "getFeatures",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/dataServiceFeatures"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/defaultNet": {
        "get": {
          "tags": [
            "Default network"
          ],
          "summary": "Get default network",
          "operationId": "getDefaultNetwork",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "range_available": {
                            "type": "number",
                            "example": 255
                          },
                          "range": {
                            "type": "string",
                            "description": "IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                            "example": "1.1.1.1-1.1.1.254"
                          },
                          "gateway": {
                            "type": "string",
                            "description": "Default gateway IP",
                            "example": "255.255.255.255"
                          },
                          "netmask_bits": {
                            "type": "number",
                            "description": "Subnet mask bits (0..32)",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Default network"
          ],
          "summary": "Set default network",
          "operationId": "setDefaultNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/defaultNet"
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Default network"
          ],
          "summary": "Update default network",
          "operationId": "updateDefaultNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/defaultNet"
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Default network"
          ],
          "summary": "Reset default network",
          "operationId": "resetDefaultNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/drives": {
        "get": {
          "tags": [
            "Drive"
          ],
          "summary": "Get drives list",
          "operationId": "getDrives",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/drive"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "show_removed",
              "schema": {
                "type": "boolean"
              }
            }
          ]
        },
        "post": {
          "tags": [
            "Drive"
          ],
          "summary": "Provision drives",
          "operationId": "provisionDrives",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/drive"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "host_uid": {
                      "type": "string",
                      "description": "The host the drive attached to",
                      "example": "uid_string"
                    },
                    "device_path": {
                      "type": "string",
                      "example": "/dev/nvme0n1",
                      "description": "Device path of the drives to add"
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Force formatting the drive, avoiding all safety checks!",
                      "example": true
                    },
                    "allow_format_non_wekafs_drives": {
                      "type": "boolean",
                      "description": "Allow reuse of drives formatted by another versions",
                      "example": true
                    }
                  },
                  "required": [
                    "host_id",
                    "device_path"
                  ]
                }
              }
            }
          }
        }
      },
      "/drives/{uid}": {
        "get": {
          "tags": [
            "Drive"
          ],
          "summary": "Get single drive",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Drive uid"
            }
          ],
          "operationId": "getSingleDrive",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/drive"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Drive"
          ],
          "summary": "Remove drive",
          "operationId": "deleteDrive",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Drive uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/drives/activate": {
        "post": {
          "tags": [
            "Drive"
          ],
          "summary": "Activate drives",
          "operationId": "activateDrives",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "drive_uids": {
                      "type": "array",
                      "description": "A list of drive or UUIDs to activate. If no UID is supplied, all inactive drives will be activated",
                      "items": {
                        "type": "string",
                        "example": "uid_string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/drives/deactivate": {
        "post": {
          "tags": [
            "Drive"
          ],
          "summary": "Deactivate drives",
          "operationId": "deactivatesDrives",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "drive_uids": {
                      "type": "array",
                      "description": "A list of drive UIDs to deactivate",
                      "items": {
                        "type": "string",
                        "example": "uid_string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/events": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get events",
          "operationId": "getEvents",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/event"
                        }
                      },
                      "next_token": {
                        "type": "string",
                        "example": "91b5d073-2e3f-febe-b731-ad43d021ae45"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "num_results",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "query",
              "name": "start_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "end_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "severity",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "type_list",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "in": "query",
              "name": "category_list",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "in": "query",
              "name": "sort_order",
              "schema": {
                "type": "string",
                "enum": [
                  "asc",
                  "dsc"
                ]
              }
            },
            {
              "in": "query",
              "name": "show_internal",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "by_digested_time",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "next_token",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/events/describe": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get events description",
          "operationId": "getEventsDescription",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/eventDescription"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "type",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": "list of categories"
            },
            {
              "in": "query",
              "name": "category",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": "list of categories"
            },
            {
              "in": "query",
              "name": "show_internal",
              "schema": {
                "type": "boolean"
              }
            }
          ]
        }
      },
      "/events/aggregate": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get aggregate events",
          "operationId": "getAggregateEvents",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "example": [
                          {
                            "event-type": 3
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "start_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "end_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "int",
              "schema": {
                "type": "number"
              },
              "description": "interval of the aggregation"
            },
            {
              "in": "query",
              "name": "show_internal",
              "schema": {
                "type": "boolean"
              }
            }
          ]
        }
      },
      "/events/local": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get events from the targeted host for the API call",
          "operationId": "getLocalEvents",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "string",
                              "example": "2021-03-21T08:23:11.4965413Z"
                            },
                            "hash": {
                              "type": "number",
                              "example": 0
                            },
                            "entity": {
                              "type": "string",
                              "example": "Cluster"
                            },
                            "severity": {
                              "type": "string",
                              "example": "INFO"
                            },
                            "permission": {
                              "type": "string",
                              "example": "User"
                            },
                            "category": {
                              "type": "string",
                              "example": "Node"
                            },
                            "description": {
                              "type": "string",
                              "example": "User login failed"
                            },
                            "eventFields": {
                              "type": "object",
                              "properties": {
                                "swRelease": {
                                  "type": "string",
                                  "example": "3.11.1.8425-0d19171073bfbb7a5cca4cc3a8a4bfdf"
                                },
                                "nodeId": {
                                  "type": "number",
                                  "example": 0
                                },
                                "pid": {
                                  "type": "number",
                                  "example": 170
                                },
                                "swVersion": {
                                  "type": "string",
                                  "example": "3.11.1.8425"
                                }
                              }
                            },
                            "type": {
                              "type": "string",
                              "example": "NodeStarted"
                            },
                            "nid": {
                              "type": "string",
                              "example": "NodeId<0>"
                            }
                          }
                        }
                      },
                      "next_token": {
                        "type": "string",
                        "example": "2021-03-21T08:24:01.561Z"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "start_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "end_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "stem_mode",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "show_internal",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "next_token",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/events/custom": {
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "Trigger custom event",
          "operationId": "triggerCustomEvent",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A custom event message"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        }
      },
      "/failureDomains": {
        "get": {
          "tags": [
            "Failure domains"
          ],
          "summary": "Get failure domains",
          "operationId": "getFailureDomains",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/failureDomain"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "show_removed",
              "schema": {
                "type": "boolean"
              }
            }
          ]
        }
      },
      "/failureDomains/{uid}": {
        "get": {
          "tags": [
            "Failure domains"
          ],
          "summary": "Get single failure domain",
          "operationId": "getSingleFailureDomain",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/failureDomain"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Domain uid"
            }
          ]
        }
      },
      "/fileSystems": {
        "get": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Get all filesystems",
          "parameters": [
            {
              "in": "query",
              "name": "force_fresh",
              "schema": {
                "type": "boolean"
              },
              "description": "Refresh the capacities to make sure they are most updated"
            }
          ],
          "operationId": "getFileSystems",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/fileSystem"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Create filesystem",
          "operationId": "createFileSystem",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystem"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "group_name",
                    "total_capacity"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Filesystem name",
                      "example": "fs1"
                    },
                    "group_name": {
                      "type": "string",
                      "example": "default",
                      "description": "Group name"
                    },
                    "total_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "Total capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "obs_name": {
                      "type": "string",
                      "example": "OBS_1",
                      "description": "Object store name. Mandatory for tiered filesystems"
                    },
                    "ssd_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "thin_provision_min_ssd": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "Thin provisioned minimum SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "thin_provision_max_ssd": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "Thin provisioned maximum SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "encrypted": {
                      "type": "boolean",
                      "example": true,
                      "description": "Creates an encrypted filesystem"
                    },
                    "auth_required": {
                      "type": "boolean",
                      "example": true,
                      "description": "Require the mounting user to be authenticated for mounting this filesystem. This flag is only effective in the root organization, users in non-root organizations must be authenticated to perform a mount operation"
                    },
                    "allow_no_kms": {
                      "type": "boolean",
                      "example": true,
                      "description": "Allow (insecurely) creating an encrypted filesystem without a KMS configured"
                    },
                    "data_reduction": {
                      "type": "boolean",
                      "example": true,
                      "description": "Enable data reduction"
                    },
                    "audit": {
                      "type": "boolean",
                      "example": true,
                      "description": "Enable audit logging"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/fileSystems/{uid}": {
        "get": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Get filesystem",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "query",
              "name": "force_fresh",
              "schema": {
                "type": "boolean"
              },
              "description": "Refresh the capacities to make sure they are most updated"
            }
          ],
          "operationId": "getFileSystem",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystem"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "put": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Update filesystem",
          "operationId": "updateFileSystem",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Filesystem uid"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystem"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_name": {
                      "type": "string",
                      "description": "New name",
                      "example": "newFs"
                    },
                    "total_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "Total capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "ssd_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "thin_provision_min_ssd": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "Thin provisioned minimum SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "thin_provision_max_ssd": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1073741824,
                      "description": "Thin provisioned maximum SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "auth_required": {
                      "type": "boolean",
                      "example": true,
                      "description": "Require the mounting user to be authenticated for mounting this filesystem. This flag is only effective in the root organization, users in non-root organizations must be authenticated to perform a mount operation"
                    },
                    "audit": {
                      "type": "boolean",
                      "example": true,
                      "description": "Update audit status"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Delete filesystem",
          "operationId": "deleteFileSystem",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Filesystem uid"
            },
            {
              "in": "query",
              "name": "purge_from_obs",
              "schema": {
                "type": "boolean"
              },
              "description": "Delete filesystem's objects from Object Storage, making all uploaded snapshots unusable"
            }
          ]
        }
      },
      "/fileSystems/{uid}/objectStores": {
        "post": {
          "deprecated": true,
          "tags": [
            "Filesystem"
          ],
          "summary": "Attach object store bucket to filesystem",
          "operationId": "attachObsToFs",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Filesystem uid"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "obs_name"
                  ],
                  "type": "object",
                  "properties": {
                    "obs_name": {
                      "type": "string",
                      "description": "Name of the Object Store Bucket to attach",
                      "example": "obs1"
                    },
                    "obs_mode": {
                      "type": "string",
                      "description": "The operation mode for the OBS",
                      "enum": [
                        "READ_ONLY",
                        "WRITABLE"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/fileSystems/{uid}/objectStoreBuckets": {
        "post": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Attach object store bucket to filesystem",
          "operationId": "attachObsBucketToFs",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Filesystem uid"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "obs_name"
                  ],
                  "type": "object",
                  "properties": {
                    "obs_name": {
                      "type": "string",
                      "description": "Name of the Object Store Bucket to attach",
                      "example": "obs1"
                    },
                    "obs_mode": {
                      "type": "string",
                      "description": "The operation mode for the OBS",
                      "enum": [
                        "READ_ONLY",
                        "WRITABLE"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/fileSystems/{uid}/objectStores/{obs_uid}": {
        "delete": {
          "deprecated": true,
          "tags": [
            "Filesystem"
          ],
          "summary": "Detach object store bucket from filesystem",
          "operationId": "detachObsFromFS",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": "CWTaskId<278>",
                        "description": "Detach task id"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "path",
              "name": "obs_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object store system uid"
            }
          ]
        }
      },
      "/fileSystems/{uid}/quota": {
        "get": {
          "tags": [
            "Quota"
          ],
          "summary": "Get a list of quotas in the filesystem",
          "operationId": "listQuotas",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "quota_id": {
                              "type": "string",
                              "example": "0x3558c7ffd0770000:0"
                            },
                            "inode_id": {
                              "type": "number",
                              "example": 10092623495168
                            },
                            "full_path": {
                              "type": "string",
                              "example": "default:/testdir/dir8"
                            },
                            "total_bytes": {
                              "type": "integer",
                              "format": "int64",
                              "example": 8192
                            },
                            "time_over_soft_limit": {
                              "type": "number",
                              "example": 100
                            },
                            "owner": {
                              "type": "string",
                              "example": "user"
                            },
                            "data_blocks": {
                              "type": "number",
                              "example": 0
                            },
                            "grace_seconds": {
                              "type": "number",
                              "example": null
                            },
                            "hard_limit_bytes": {
                              "type": "integer",
                              "format": "int64",
                              "example": 1000001536
                            },
                            "snapName": {
                              "type": "string",
                              "example": ""
                            },
                            "snap_view_id": {
                              "type": "number",
                              "example": 0
                            },
                            "path": {
                              "type": "string",
                              "example": "/testdir/dir8"
                            },
                            "fsName": {
                              "type": "string",
                              "example": "default"
                            },
                            "metadata_blocks": {
                              "type": "number",
                              "example": 2
                            },
                            "soft_limit_bytes": {
                              "type": "integer",
                              "format": "int64",
                              "example": null
                            },
                            "status": {
                              "type": "string",
                              "example": "ACTIVE"
                            }
                          }
                        }
                      },
                      "next_token": {
                        "type": "number",
                        "example": 3214121
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "query",
              "name": "next_token",
              "schema": {
                "type": "string"
              },
              "description": "Token to get the next page"
            }
          ]
        }
      },
      "/fileSystems/{uid}/quota/default": {
        "get": {
          "tags": [
            "Quota"
          ],
          "summary": "Get a list of default quotas",
          "operationId": "listDefaultQuotas",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "48117142192129"
                            },
                            "fsName": {
                              "type": "string",
                              "example": "default"
                            },
                            "graceSeconds": {
                              "type": "number",
                              "example": 8192
                            },
                            "hard_limit_bytes": {
                              "type": "integer",
                              "format": "int64",
                              "example": 18446744073
                            },
                            "owner": {
                              "type": "string",
                              "example": "admin"
                            },
                            "path": {
                              "type": "string",
                              "example": "/dir1"
                            },
                            "snapName": {
                              "type": "string",
                              "example": "string"
                            },
                            "soft_limit_bytes": {
                              "type": "integer",
                              "format": "int64",
                              "example": 18446744073
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            }
          ]
        }
      },
      "/fileSystems/{uid}/quota/{inode_id}": {
        "get": {
          "tags": [
            "Quota"
          ],
          "summary": "Get the parameters of a specific directory quota",
          "operationId": "getQuota",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "inode_id": {
                            "type": "number",
                            "example": 10092623495168
                          },
                          "total_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 8192
                          },
                          "owner": {
                            "type": "string",
                            "example": "user"
                          },
                          "data_blocks": {
                            "type": "number",
                            "example": 0
                          },
                          "time_over_soft_limit": {
                            "type": "number",
                            "example": 100
                          },
                          "grace_seconds": {
                            "type": "number",
                            "example": null
                          },
                          "hard_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          },
                          "snap_view_id": {
                            "type": "number",
                            "example": 0
                          },
                          "metadata_blocks": {
                            "type": "number",
                            "example": 2
                          },
                          "soft_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": null
                          },
                          "status": {
                            "type": "string",
                            "example": "ACTIVE"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "path",
              "name": "inode_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "directory's inode id"
            }
          ]
        },
        "put": {
          "tags": [
            "Quota"
          ],
          "summary": "Set a quota for a directory. If Data Service is not enabled, then to set a quota for a non-empty directory, use the CLI",
          "operationId": "putQuota",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "inode_id": {
                            "type": "number",
                            "example": 10092623495168
                          },
                          "total_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 8192
                          },
                          "owner": {
                            "type": "string",
                            "example": "user"
                          },
                          "data_blocks": {
                            "type": "number",
                            "example": 0
                          },
                          "grace_seconds": {
                            "type": "number",
                            "example": null
                          },
                          "hard_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          },
                          "time_over_soft_limit": {
                            "type": "number",
                            "example": 100
                          },
                          "snap_view_id": {
                            "type": "number",
                            "example": 0
                          },
                          "metadata_blocks": {
                            "type": "number",
                            "example": 2
                          },
                          "soft_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 0
                          },
                          "status": {
                            "type": "string",
                            "example": "ACTIVE"
                          },
                          "cw_task_id": {
                            "type": "number",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "path",
              "name": "inode_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "directory's inode id"
            },
            {
              "in": "query",
              "name": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "hard_limit_bytes",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "description": "0 for unlimited"
            },
            {
              "in": "query",
              "name": "soft_limit_bytes",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "description": "0 for unlimited"
            },
            {
              "in": "query",
              "name": "grace_seconds",
              "required": true,
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "query",
              "name": "owner",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "patch": {
          "tags": [
            "Quota"
          ],
          "summary": "Patch the parameters of a directory quota",
          "operationId": "patchQuota",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "inode_id": {
                            "type": "number",
                            "example": 10092623495168
                          },
                          "total_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 8192
                          },
                          "owner": {
                            "type": "string",
                            "example": "user"
                          },
                          "data_blocks": {
                            "type": "number",
                            "example": 0
                          },
                          "grace_seconds": {
                            "type": "number",
                            "example": null
                          },
                          "hard_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          },
                          "snap_view_id": {
                            "type": "number",
                            "example": 0
                          },
                          "metadata_blocks": {
                            "type": "number",
                            "example": 2
                          },
                          "soft_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": null
                          },
                          "status": {
                            "type": "string",
                            "example": "ACTIVE"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "path",
              "name": "inode_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "directory's inode id"
            },
            {
              "in": "query",
              "name": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "hard_limit_bytes",
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "description": "0 for unlimited"
            },
            {
              "in": "query",
              "name": "soft_limit_bytes",
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "description": "0 for unlimited"
            },
            {
              "in": "query",
              "name": "grace_seconds",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "query",
              "name": "owner",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "delete": {
          "tags": [
            "Quota"
          ],
          "summary": "Remove a quota from a directory. If Data Service is not enabled, then to unset a quota from a non-empty directory, use the CLI",
          "operationId": "deleteQuota",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "inode_id": {
                            "type": "number",
                            "example": 10092623495168
                          },
                          "total_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 8192
                          },
                          "owner": {
                            "type": "string",
                            "example": "user"
                          },
                          "data_blocks": {
                            "type": "number",
                            "example": 0
                          },
                          "grace_seconds": {
                            "type": "number",
                            "example": null
                          },
                          "hard_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          },
                          "snap_view_id": {
                            "type": "number",
                            "example": 0
                          },
                          "metadata_blocks": {
                            "type": "number",
                            "example": 2
                          },
                          "soft_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": null
                          },
                          "status": {
                            "type": "string",
                            "example": "ACTIVE"
                          },
                          "cw_task_id": {
                            "type": "number",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "path",
              "name": "inode_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "directory's inode id"
            },
            {
              "in": "query",
              "name": "path",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/fileSystems/{inode_context}/resolve": {
        "get": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Get the parameters of a specific filesystem by inodeContext",
          "parameters": [
            {
              "in": "path",
              "name": "inode_context",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem inode"
            }
          ],
          "operationId": "filesystemResolveInode",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/filesystemResolve"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/fileSystems/quota/{inode_context}": {
        "put": {
          "tags": [
            "Quota"
          ],
          "summary": "Set or update a default quota on a directory",
          "operationId": "putDefaultQuota",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "inode_id": {
                            "type": "number",
                            "example": 10092623495168
                          },
                          "total_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 8192
                          },
                          "owner": {
                            "type": "string",
                            "example": "user"
                          },
                          "data_blocks": {
                            "type": "number",
                            "example": 0
                          },
                          "grace_seconds": {
                            "type": "number",
                            "example": null
                          },
                          "hard_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          },
                          "snap_view_id": {
                            "type": "number",
                            "example": 0
                          },
                          "metadata_blocks": {
                            "type": "number",
                            "example": 2
                          },
                          "soft_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 0
                          },
                          "status": {
                            "type": "string",
                            "example": "ACTIVE"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "inode_context",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "directory's inode id"
            },
            {
              "in": "query",
              "name": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "hard_limit_bytes",
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "description": "0 for unlimited"
            },
            {
              "in": "query",
              "name": "soft_limit_bytes",
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "description": "0 for unlimited"
            },
            {
              "in": "query",
              "name": "grace_seconds",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "query",
              "name": "owner",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/fileSystems/quota/{inode_id}/default": {
        "delete": {
          "tags": [
            "Quota"
          ],
          "summary": "Remove default quota from a directory",
          "operationId": "deleteDefaultQuota",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "fsName": {
                            "type": "string",
                            "example": "user"
                          },
                          "path": {
                            "type": "string",
                            "example": "default"
                          },
                          "graceSeconds": {
                            "type": "number",
                            "example": null
                          },
                          "hard_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          },
                          "owner": {
                            "type": "number",
                            "example": 0
                          },
                          "snapName": {
                            "type": "number",
                            "example": 0
                          },
                          "soft_limit_bytes": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1000001536
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "inode_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "directory's inode id"
            },
            {
              "in": "query",
              "name": "path",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/fileSystems/{uid}/objectStoreBuckets/{obs_uid}": {
        "delete": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Detach object store bucket from filesystem",
          "operationId": "detachObsBucketFromFS",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": "CWTaskId<278>",
                        "description": "Detach task id"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem uid"
            },
            {
              "in": "path",
              "name": "obs_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object store system uid"
            }
          ]
        }
      },
      "/fileSystems/download": {
        "post": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Download filesystem from object store",
          "operationId": "downloadFS",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystem"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "name",
                    "group_name",
                    "total_capacity",
                    "object_storage",
                    "locator",
                    "ssd_capacity"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "New filesystem name",
                      "example": "new_fs"
                    },
                    "group_name": {
                      "type": "string",
                      "description": "Group name",
                      "example": "default"
                    },
                    "total_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "example": 10000000000,
                      "description": "Total capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "object_storage": {
                      "type": "string",
                      "description": "Object Store name",
                      "example": "obs1"
                    },
                    "locator": {
                      "type": "string",
                      "description": "Locator",
                      "example": "bba696fb/d/s/4/spec/fc35-4d51-96b6-028488d349dc"
                    },
                    "ssd_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "example": 10000000000,
                      "description": "SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "auth_required": {
                      "type": "boolean",
                      "example": true,
                      "description": "Require the mounting user to be authenticated for mounting this filesystem. This flag is only effective in the root organization, users in non-root organizations must be authenticated to perform a mount operation"
                    },
                    "additional_object_storage": {
                      "type": "string",
                      "example": "obs2",
                      "description": "Additional object Store name"
                    },
                    "snapshot_name": {
                      "type": "string",
                      "example": "snapName"
                    },
                    "access_point": {
                      "type": "string",
                      "example": "111d3"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/fileSystems/thinProvisionReserve": {
        "get": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Filesystems thin provisioning reserve status for Organization",
          "operationId": "getFileSystemsThinProvisionReserveStatus",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ThinProvisionReserve"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/fileSystems/thinProvisionReserve/{org_uid}": {
        "put": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Set filesystems thin provisioning reserve for Organization",
          "operationId": "setFileSystemsThinProvisionReserve",
          "parameters": [
            {
              "in": "path",
              "name": "org_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Organization uid for which to set reserve"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "ssd_capacity"
                  ],
                  "properties": {
                    "ssd_capacity": {
                      "type": "integer",
                      "format": "int64",
                      "description": "SSD Capacity to reserve",
                      "example": 1073741824
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Previously set value (zero means not value was set)"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Filesystem"
          ],
          "summary": "Unset filesystems thin provisioning reserve for Organization",
          "operationId": "deleteFileSystemsThinProvisionReserve",
          "parameters": [
            {
              "in": "path",
              "name": "org_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Organization uid for which to set reserve"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Previously set value (zero means not value was set)"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/fileSystems/{uid}/resolvePath": {
        "get": {
          "tags": [
            "Quota"
          ],
          "summary": "Resolve path to Inode",
          "operationId": "resolvePath",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "inode_id": {
                            "type": "string",
                            "example": 1468752432114565000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "filesystem uid"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path within the filesystem"
          }
        ]
      },
      "/fileSystemGroups": {
        "get": {
          "tags": [
            "Filesystem group"
          ],
          "summary": "Get all filesystem groups",
          "operationId": "getFileSystemGroups",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/fileSystemGroup"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Filesystem group"
          ],
          "summary": "Create filesystem group",
          "operationId": "createFileSystemGroup",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystemGroup"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Filesystem group name",
                      "example": "fs-group1"
                    },
                    "target_ssd_retention": {
                      "type": "number",
                      "description": "SSD retention period",
                      "example": 86400
                    },
                    "start_demote": {
                      "type": "number",
                      "description": "The retention period according to the amount of data that will be created",
                      "example": 1800
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/fileSystemGroups/{uid}": {
        "get": {
          "tags": [
            "Filesystem group"
          ],
          "summary": "Get filesystem group",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filesystem group uid"
            }
          ],
          "operationId": "getFileSystemGroup",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystemGroup"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "put": {
          "tags": [
            "Filesystem group"
          ],
          "summary": "Update filesystem group",
          "operationId": "updateFileSystemGroup",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Filesystem group uid"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/fileSystemGroup"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_name": {
                      "type": "string",
                      "description": "Filesystem group name",
                      "example": "fs-group1"
                    },
                    "target_ssd_retention": {
                      "type": "number",
                      "description": "SSD retention period",
                      "example": 86400
                    },
                    "start_demote": {
                      "type": "number",
                      "description": "The retention period according to the amount of data that will be created",
                      "example": 1800
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Filesystem group"
          ],
          "summary": "Delete filesystem group",
          "operationId": "deleteFileSystemGroup",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Filesystem group uid"
            }
          ]
        }
      },
      "/healthcheck": {
        "get": {
          "tags": [
            "Health"
          ],
          "summary": "Check if API is alive",
          "operationId": "getApiHealth",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "example": "ok"
                  }
                }
              }
            }
          }
        }
      },
      "/ui/healthcheck": {
        "get": {
          "tags": [
            "Health"
          ],
          "summary": "Check if UI is alive",
          "operationId": "getUIHealth",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "example": "ok"
                  }
                }
              }
            },
            "503": {
              "description": "Error"
            }
          }
        }
      },
      "/hosts": {
        "get": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Get all hosts - deprecated, use GET /containers",
          "operationId": "getHosts",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/host"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Add host to cluster  - deprecated, use POST /containers",
          "operationId": "addHost",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/host"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "hostname"
                  ],
                  "type": "object",
                  "properties": {
                    "hostname": {
                      "type": "string",
                      "description": "Management network hostname",
                      "example": "hostname-6"
                    },
                    "ip": {
                      "type": "string",
                      "example": "173.21.11.41",
                      "description": "Management IP; If empty, the hostname is resolved; If host is highly-available or mixed-networking, use IP set '<ip>+<ip>+...+<ip>'"
                    },
                    "no_wait": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/hosts/{uid}": {
        "get": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Get single host - deprecated, use GET /containers/{uid}",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Host uid"
            }
          ],
          "operationId": "getSingleHost",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/host"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "put": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Configure host - Need to apply host after - deprecated use PUT /containers/{uid}",
          "operationId": "updateHost",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Host uid",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "failure_domain_type": {
                      "type": "string",
                      "description": "A failure domain type",
                      "enum": [
                        "AUTO",
                        "USER",
                        "HA"
                      ]
                    },
                    "failure_domain": {
                      "type": "string",
                      "description": "Set the host failure domain"
                    },
                    "cores": {
                      "type": "number",
                      "description": "Dedicate host's cores to weka",
                      "example": 1
                    },
                    "frontend_dedicated_cores": {
                      "type": "number",
                      "description": "Frontend dedicate cores",
                      "example": 1
                    },
                    "drives_dedicated_cores": {
                      "type": "number",
                      "description": "Drives dedicate cores",
                      "example": 0
                    },
                    "cores_ids_type": {
                      "type": "string",
                      "description": "A core id type",
                      "enum": [
                        "AUTO",
                        "USER"
                      ]
                    },
                    "memory": {
                      "type": "number",
                      "description": "Dedicate a set amount of RAM to weka",
                      "example": 100
                    },
                    "dedicated": {
                      "type": "boolean",
                      "description": "Set the host as dedicated to weka. For example it can be rebooted whenever needed, and configured by weka for optimal performance and stability",
                      "example": true
                    },
                    "bandwidth": {
                      "type": "number",
                      "description": "Limit weka's bandwidth for the host",
                      "example": 1000
                    },
                    "auto_remove_timeout": {
                      "type": "number",
                      "description": "Set how long to wait before removing this host if it disconnects from the cluster (for clients only)"
                    },
                    "management_ips": {
                      "type": "array",
                      "description": "Set the host's management node IPs. Setting 2 IPs will turn this hosts networking into highly-available mode",
                      "items": {
                        "type": "string",
                        "example": "173.21.11.41"
                      }
                    },
                    "apply_host": {
                      "type": "boolean",
                      "description": "Apply the host after this change",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Remove host from cluster - deprecated use DELETE /containers/{uid}",
          "operationId": "removeHost",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Host uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/hosts/apply": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Apply hosts - deprecated use POST /containers/apply",
          "operationId": "applyHosts",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "host_uids"
                  ],
                  "properties": {
                    "host_uids": {
                      "type": "array",
                      "description": "Host uids to apply",
                      "items": {
                        "type": "string",
                        "example": "uid_string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/hosts/{uid}/apply": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Apply host - deprecated, use /containers/{uid}/apply",
          "operationId": "applyHost",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Host uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/hosts/lastFailureReason/{uid}": {
        "delete": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Clear host last failure - deprecated, use DELETE /containers/lastFailureReason/{uid}",
          "operationId": "clearHostFailure",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Host uid",
              "schema": {
                "type": "string"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/hosts/{uid}/resources": {
        "get": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Get host resources - deprecated, use GET /containers/{uid}/resources",
          "operationId": "getHostResources",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/hostResource"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Host uid",
              "schema": {
                "type": "string"
              },
              "required": true
            },
            {
              "in": "query",
              "name": "type",
              "schema": {
                "type": "string"
              },
              "description": "resource type can be Staging or Stable (Staging if empty)"
            }
          ]
        }
      },
      "/hosts/activate": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Activate hosts - deprecated, use POST /containers/activate",
          "operationId": "activateHosts",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "host_uids"
                  ],
                  "properties": {
                    "host_uids": {
                      "type": "array",
                      "description": "Host uids to activate",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/hosts/{uid}/activate": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Activate host - deprecated, use POST /containers/{uid}/activate",
          "operationId": "activateHost",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Host uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/hosts/deactivate": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Deactivate hosts - deprecated, use POST /containers/deactivate",
          "operationId": "deactivateHosts",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "host_uids"
                  ],
                  "type": "object",
                  "properties": {
                    "host_uids": {
                      "type": "array",
                      "description": "Host uids to deactivate",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/hosts/{uid}/deactivate": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Deactivate host - deprecated, use POST /containers/{uid}/deactivate",
          "operationId": "deactivateHost",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Host uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/hosts/netdevs": {
        "get": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Get all hosts network - deprecated, use GET /containers/netdevs",
          "operationId": "getAllHostsNetwork",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/netdev"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/hosts/{uid}/netdevs": {
        "get": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Get host network - deprecated, use GET /containers/{uid}/netdevs",
          "operationId": "getHostNetwork",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/netdev"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Host uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Create host network - Need to apply host after - deprecated, use POST /containers/{uid}/netdevs",
          "operationId": "createHostNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Host uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "device": {
                      "type": "string",
                      "description": "Network device pci-slot/mac-address/interface-name(s)",
                      "example": "eth1"
                    },
                    "ips_type": {
                      "type": "string",
                      "description": "POOL - IPs from the default data networking IP pool would be used, USER - configured by the user",
                      "enum": [
                        "POOL",
                        "USER"
                      ]
                    },
                    "ips": {
                      "type": "array",
                      "description": "IPs to be allocated to cores using the device. If not given - IPs may be set automatically according the interface's IPs, or taken from the default networking IPs pool (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                      "items": {
                        "type": "string",
                        "example": "172.31.4.107"
                      }
                    },
                    "gateway": {
                      "type": "string",
                      "example": "172.31.0.1",
                      "description": "Default gateway IP. In AWS this value is auto-detected, otherwise the default data networking gateway will be used"
                    },
                    "netmask": {
                      "type": "number",
                      "example": 20,
                      "description": "Netmask in bits number. In AWS this value is auto-detected, otherwise the default data networking netmask will be used"
                    },
                    "name": {
                      "type": "string",
                      "description": "If empty, a name will be auto generated",
                      "example": "netdev01"
                    },
                    "apply_host": {
                      "type": "boolean",
                      "description": "Apply the host after this change",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/hosts/{uid}/netdevs/{netdev_uid}": {
        "delete": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "Remove host network - Need to apply host after - deprecated, use DELETE /containers/{uid}/netdevs/{netdev_uid}",
          "operationId": "removeHostNetwork",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Host uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "netdev_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "network device uid"
            },
            {
              "in": "query",
              "name": "apply_host",
              "schema": {
                "type": "boolean"
              },
              "description": "Apply the host after this change",
              "example": false
            }
          ]
        }
      },
      "/hosts/infos": {
        "post": {
          "deprecated": true,
          "tags": [
            "Hosts"
          ],
          "summary": "get hosts infos from IPs - deprecated, use POST /containers/infos",
          "operationId": "getHostsInfo",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "net": {
                            "type": "object",
                            "properties": {
                              "interfaces": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "mtu": {
                                      "type": "number",
                                      "example": 65536
                                    },
                                    "pciSlot": {
                                      "type": "string",
                                      "example": "0000:ff:ff.ff"
                                    },
                                    "mac": {
                                      "type": "string",
                                      "example": "00:00:00:00:00:00"
                                    },
                                    "pciSlot_slaves": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ip4": {
                                      "type": "string",
                                      "example": "127.0.0.1"
                                    },
                                    "linkLayer": {
                                      "type": "string",
                                      "example": "ETH"
                                    },
                                    "name": {
                                      "type": "string",
                                      "example": "lo"
                                    },
                                    "ip4Netmask": {
                                      "type": "number",
                                      "example": 8
                                    },
                                    "name_slaves": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "bondType": {
                                      "type": "string",
                                      "example": "NONE"
                                    },
                                    "ip6": {
                                      "type": "string",
                                      "example": null
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "disks": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "devName": {
                                  "type": "string",
                                  "example": "xvdw"
                                },
                                "diskSizeBytes": {
                                  "type": "number",
                                  "example": 20401094656
                                },
                                "isMounted": {
                                  "type": "boolean"
                                },
                                "uuid": {
                                  "type": "string",
                                  "example": "00000000-0000-0000-0000-000000000000"
                                },
                                "devNumber": {
                                  "type": "string",
                                  "example": "202:5632"
                                },
                                "isWekaPartition": {
                                  "type": "boolean"
                                },
                                "label": {
                                  "type": "string",
                                  "example": null
                                },
                                "pciAddr": {
                                  "type": "string",
                                  "example": null
                                },
                                "parentName": {
                                  "type": "string",
                                  "example": null
                                },
                                "devPath": {
                                  "type": "string",
                                  "example": "/dev/xvdw"
                                },
                                "sizeBytes": {
                                  "type": "number",
                                  "example": 20401094656
                                },
                                "isRotational": {
                                  "type": "boolean"
                                },
                                "type": {
                                  "type": "string",
                                  "example": "DISK"
                                },
                                "model": {
                                  "type": "string",
                                  "example": null
                                }
                              }
                            }
                          },
                          "resolvedIp": {
                            "type": "string",
                            "example": "172.31.23.127"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hostnames_ips": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "info_types": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "VERSION",
                          "OSINFO",
                          "MEMORY",
                          "CORES",
                          "DISKS",
                          "ETHS",
                          "NET",
                          "IPS",
                          "AWS",
                          "OFED"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/interfaceGroups": {
        "get": {
          "tags": [
            "Interface group"
          ],
          "summary": "Get interface groups",
          "operationId": "getInterfaceGroups",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/interfaceGroup"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Interface group"
          ],
          "summary": "Create interface group",
          "operationId": "createInterfaceGroup",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/interfaceGroup"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "type"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Interface group name",
                      "example": "default"
                    },
                    "type": {
                      "type": "string",
                      "description": "Group type. cli subnet type can be NFS",
                      "example": "nfs"
                    },
                    "subnet": {
                      "type": "string",
                      "description": "Subnet mask in the 255.255.0.0 format",
                      "example": "255.0.0.0"
                    },
                    "gateway": {
                      "type": "string",
                      "description": "Gateway ip",
                      "example": "172.31.0.0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/interfaceGroups/{uid}": {
        "get": {
          "tags": [
            "Interface group"
          ],
          "summary": "Get interface group",
          "operationId": "getInterfaceGroup",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/interfaceGroup"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "interface group uid"
            }
          ]
        },
        "delete": {
          "tags": [
            "Interface group"
          ],
          "summary": "delete interface group",
          "operationId": "deleteInterfaceGroup",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "interface group uid"
            }
          ]
        },
        "put": {
          "tags": [
            "Interface group"
          ],
          "summary": "Update interface group",
          "operationId": "updateInterfaceGroup",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "interface group uid"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/interfaceGroup"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subnet": {
                      "type": "string",
                      "description": "Subnet mask in the 255.255.0.0 format",
                      "example": "255.0.0.0"
                    },
                    "gateway": {
                      "type": "string",
                      "description": "Gateway ip",
                      "example": "172.31.0.0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/interfaceGroups/{uid}/ips": {
        "post": {
          "tags": [
            "Interface group"
          ],
          "summary": "Add ip range to interface group",
          "operationId": "crateInterfaceGroupIp",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Interface group uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "ips"
                  ],
                  "properties": {
                    "ips": {
                      "type": "string",
                      "description": "IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                      "example": "10.222.8.19"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/interfaceGroups/{uid}/ports/{host_uid}": {
        "post": {
          "deprecated": true,
          "tags": [
            "Interface group"
          ],
          "summary": "Add port to interface group - deprecated, use POST /interfaceGroups/{uid}/ports/{container_uid}",
          "operationId": "addPortToInterfaceGroupDeprecated",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Interface group uid"
            },
            {
              "in": "path",
              "name": "host_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Host uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "port": {
                      "type": "string",
                      "description": "Port's device. (e.g. eth1)",
                      "example": "eth0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/interfaceGroups/{uid}/ports/{container_uid}": {
        "post": {
          "tags": [
            "Interface group"
          ],
          "summary": "Add port to interface group",
          "operationId": "addPortToInterfaceGroup",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Interface group uid"
            },
            {
              "in": "path",
              "name": "container_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Container uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "port": {
                      "type": "string",
                      "description": "Port's device. (e.g. eth1)",
                      "example": "eth0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/interfaceGroups/{uid}/ports/{host_uid}/{port}": {
        "delete": {
          "deprecated": true,
          "tags": [
            "Interface group"
          ],
          "summary": "Delete port from interface group - deprecated, use DELETE /interfaceGroups/{uid}/ports/{container_uid}/{port}",
          "operationId": "deletePortFromInterfaceGroupDeprecated",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Interface group uid"
            },
            {
              "in": "path",
              "name": "host_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Host uid"
            },
            {
              "in": "path",
              "name": "port",
              "required": true,
              "schema": {
                "type": "string",
                "example": "eth0"
              },
              "description": "Host:Port to delete from Interface Group"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/interfaceGroups/{uid}/ports/{container_uid}/{port}": {
        "delete": {
          "tags": [
            "Interface group"
          ],
          "summary": "Delete port from interface group",
          "operationId": "deletePortFromInterfaceGroup",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Interface group uid"
            },
            {
              "in": "path",
              "name": "container_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Container uid"
            },
            {
              "in": "path",
              "name": "port",
              "required": true,
              "schema": {
                "type": "string",
                "example": "eth0"
              },
              "description": "Container:Port to delete from Interface Group"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/interfaceGroups/{uid}/ips/{ips}": {
        "delete": {
          "tags": [
            "Interface group"
          ],
          "summary": "Delete ip range from interface group",
          "operationId": "deleteIpRangeFromInterfaceGroup",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "interface group uid"
            },
            {
              "in": "path",
              "name": "ips",
              "required": true,
              "schema": {
                "type": "string",
                "example": "172.31.5.5"
              },
              "description": "IP or IP range to delete"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/interfaceGroups/listAssignment": {
        "get": {
          "tags": [
            "Interface group"
          ],
          "summary": "Get All the floating IPs and their assignment",
          "operationId": "getInterfaceGroupsListAssignment",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "uid": {
                              "type": "string",
                              "example": "5356a13f-3f0e-8d63-04a8-ba5e5df601b0"
                            },
                            "group": {
                              "type": "string",
                              "example": "DefaultInterfaceGroup"
                            },
                            "ip": {
                              "type": "string",
                              "example": "10.222.0.1"
                            },
                            "host_id": {
                              "type": "string",
                              "example": "HostId<0>"
                            },
                            "port": {
                              "type": "string",
                              "example": "eth0"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/interfaceGroups/port": {
        "post": {
          "tags": [
            "Interface group"
          ],
          "summary": "add port for interface group",
          "operationId": "interfaceGroupAddPort",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "uid",
                    "host_uid",
                    "port"
                  ],
                  "properties": {
                    "uid": {
                      "type": "string",
                      "description": "Interface Group UUID"
                    },
                    "host_uid": {
                      "type": "string",
                      "description": "Host UUID"
                    },
                    "port": {
                      "type": "string",
                      "example": "eth0"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/kms": {
        "get": {
          "tags": [
            "KMS"
          ],
          "summary": "Get kms configuration",
          "operationId": "getKms",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "params": {
                            "type": "object",
                            "properties": {
                              "master_key_name": {
                                "type": "string",
                                "example": "cluster_key"
                              },
                              "base_url": {
                                "type": "string",
                                "example": "https://company.com:4000"
                              }
                            }
                          },
                          "kms_type": {
                            "type": "string",
                            "example": "HashiCorpVault"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "KMS"
          ],
          "summary": "Set kms vault configuration (base_url,master_key_name,token) or set kms kmip configuration (server_endpoint, key_uid, client_cert_pem, client_key_pem, ca_cert_pem)\n",
          "operationId": "setKms",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base_url": {
                      "type": "string",
                      "example": "https://compney.com:4000"
                    },
                    "master_key_name": {
                      "type": "string",
                      "example": "cluster_key"
                    },
                    "token": {
                      "type": "string",
                      "example": "s.token_string"
                    },
                    "server_endpoint": {
                      "type": "string"
                    },
                    "key_uid": {
                      "type": "string"
                    },
                    "client_cert_pem": {
                      "type": "string"
                    },
                    "client_key_pem": {
                      "type": "string"
                    },
                    "ca_cert_pem": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "KMS"
          ],
          "summary": "Delete kms configuration",
          "operationId": "deleteKms",
          "parameters": [
            {
              "in": "query",
              "name": "force_delete",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/kms/type": {
        "get": {
          "tags": [
            "KMS"
          ],
          "summary": "Get kms type",
          "operationId": "getKmsType",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": "HashiCorpVault"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/kms/rewrap": {
        "post": {
          "tags": [
            "KMS"
          ],
          "summary": "Rewrap KMS key",
          "operationId": "rewrapKmsKey",
          "responses": {
            "200": {
              "description": ""
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_key_uid": {
                      "type": "string",
                      "description": "(KMIP-only) Unique identifier for the new key to be used to wrap filesystem keys"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/ldap": {
        "get": {
          "tags": [
            "LDAP"
          ],
          "summary": "Get LDAP configuration",
          "operationId": "getLdap",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "example": true
                          },
                          "group_object_class": {
                            "type": "string",
                            "example": "group"
                          },
                          "ignore_start_tls_failure": {
                            "type": "boolean",
                            "example": false
                          },
                          "group_membership_attribute": {
                            "type": "string",
                            "example": "member"
                          },
                          "server_timeout_secs": {
                            "type": "number",
                            "example": 10
                          },
                          "user_id_attribute": {
                            "type": "string",
                            "example": "sAMAccountName"
                          },
                          "start_tls": {
                            "type": "boolean",
                            "example": false
                          },
                          "protocol_version": {
                            "type": "number",
                            "example": 3
                          },
                          "reader_username": {
                            "type": "string",
                            "example": "username@ad.com"
                          },
                          "group_id_attribute": {
                            "type": "string",
                            "example": "cn"
                          },
                          "base_dn": {
                            "type": "string",
                            "example": "DC=ad,DC=company,DC=io"
                          },
                          "user_object_class": {
                            "type": "string",
                            "example": "user"
                          },
                          "role_groups": {
                            "type": "object",
                            "properties": {
                              "OrgAdmin": {
                                "type": "string",
                                "example": "Enterprise Admins"
                              },
                              "ClusterAdmin": {
                                "type": "string",
                                "example": "Enterprise Admins"
                              },
                              "ReadOnly": {
                                "type": "string",
                                "example": ""
                              },
                              "Regular": {
                                "type": "string",
                                "example": ""
                              },
                              "S3": {
                                "type": "string",
                                "example": ""
                              }
                            }
                          },
                          "server_type": {
                            "type": "string",
                            "example": "LDAP"
                          },
                          "user_revocation_attribute": {
                            "type": "string",
                            "example": ""
                          },
                          "domain": {
                            "type": "string",
                            "example": ""
                          },
                          "server_uri": {
                            "type": "string",
                            "example": "company.io"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "LDAP"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "server_uri": {
                      "type": "string",
                      "example": "ad.company.io",
                      "description": "LDAP server URI ([ldap://]hostname[:port] or ldaps://hostname[:port])"
                    },
                    "start_tls": {
                      "type": "boolean",
                      "example": true,
                      "description": "Issue StartTLS after connecting (should not be used with ldaps://)"
                    },
                    "ignore_start_tls_failure": {
                      "type": "boolean",
                      "example": true,
                      "description": "Ignore start TLS failure"
                    },
                    "server_timeout_secs": {
                      "type": "number",
                      "example": 10,
                      "description": "LDAP connection timeout in seconds"
                    },
                    "protocol_version": {
                      "type": "number",
                      "example": 3,
                      "description": "LDAP protocol version"
                    },
                    "base_dn": {
                      "type": "string",
                      "example": "DC=ad,DC=company,DC=io",
                      "description": "Base DN"
                    },
                    "user_object_class": {
                      "type": "string",
                      "example": "user",
                      "description": "User object class"
                    },
                    "user_id_attribute": {
                      "type": "string",
                      "example": "sAMAccountName",
                      "description": "User ID attribute"
                    },
                    "user_revocation_attribute": {
                      "type": "string",
                      "example": "",
                      "description": "User revocation attribute - If provided, updating this attribute in the LDAP server automatically revokes all user tokens"
                    },
                    "group_object_class": {
                      "type": "string",
                      "example": "group",
                      "description": "Group object class"
                    },
                    "group_membership_attribute": {
                      "type": "string",
                      "example": "member",
                      "description": "Group membership attribute"
                    },
                    "group_id_attribute": {
                      "type": "string",
                      "example": "cn",
                      "description": "Group ID attribute"
                    },
                    "reader_username": {
                      "type": "string",
                      "example": "user@ad.io",
                      "description": "Reader username"
                    },
                    "reader_password": {
                      "type": "string",
                      "example": "pass.io",
                      "description": "Reader password"
                    },
                    "role_groups": {
                      "type": "object",
                      "properties": {
                        "ClusterAdmin": {
                          "type": "string",
                          "example": "Enterprise admins"
                        },
                        "OrgAdmin": {
                          "type": "string",
                          "example": ""
                        },
                        "Regular": {
                          "type": "string",
                          "example": "WekaGroup"
                        },
                        "ReadOnly": {
                          "type": "string",
                          "example": "TestGroup"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "summary": "Update LDAP configuration",
          "operationId": "updateLdap",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "LDAP"
          ],
          "summary": "Reset LDAP configuration",
          "operationId": "deleteLdap",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/license": {
        "get": {
          "tags": [
            "License"
          ],
          "summary": "Get license",
          "operationId": "getLicense",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "mode": {
                            "type": "string",
                            "example": "Classic"
                          },
                          "usage": {
                            "type": "object",
                            "properties": {
                              "drive_capacity_gb": {
                                "type": "number",
                                "example": 2374
                              },
                              "usable_capacity_gb": {
                                "type": "number",
                                "example": 1024
                              },
                              "obs_capacity_gb": {
                                "type": "number",
                                "example": 0
                              }
                            }
                          },
                          "license": {
                            "type": "string",
                            "example": "license_string"
                          },
                          "limits": {
                            "type": "object",
                            "properties": {
                              "drive_capacity_gb": {
                                "type": "number",
                                "example": 2374
                              },
                              "usable_capacity_gb": {
                                "type": "number",
                                "example": 18446744073709552000
                              },
                              "obs_capacity_gb": {
                                "type": "number",
                                "example": 1000000000000000
                              },
                              "valid_from": {
                                "type": "string",
                                "example": "2021-03-16T07:52:39Z"
                              },
                              "expires_at": {
                                "type": "string",
                                "example": "2021-04-15T07:52:39Z"
                              }
                            }
                          },
                          "next_check": {
                            "type": "string",
                            "example": "2021-03-16T11:52:40Z"
                          },
                          "error": {
                            "type": "string",
                            "example": ""
                          },
                          "check_interval_secs": {
                            "type": "number",
                            "example": 3600
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "License"
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "license": {
                      "type": "string",
                      "description": "The new license to set to the system - classic",
                      "example": "license_string"
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "Plan id - PAYG",
                      "example": "plan_string"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "Secret key - PAYG",
                      "example": "key_string"
                    },
                    "url": {
                      "type": "string",
                      "description": "Url to license server - PAYG",
                      "example": "https://get.weka.io"
                    }
                  }
                }
              }
            }
          },
          "summary": "Set license",
          "operationId": "setLicense",
          "description": "Classic license (license) or PAYG license (plan_id,secret_key,[url])",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "License"
          ],
          "summary": "Reset license",
          "operationId": "resetLicense",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/lockoutPolicy": {
        "get": {
          "tags": [
            "Lockout policy"
          ],
          "summary": "Get lockout policy",
          "operationId": "getLockoutPolicy",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/lockoutPolicy"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Lockout policy"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockoutPolicy"
                }
              }
            }
          },
          "summary": "Update lockout policy",
          "operationId": "setLockoutPolicy",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/lockoutPolicy"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "Lockout policy"
          ],
          "summary": "Reset lockout policy",
          "operationId": "resetLockoutPolicy",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/login": {
        "post": {
          "summary": "login to system",
          "operationId": "login",
          "tags": [
            "Login"
          ],
          "description": "",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/tokens"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username",
                    "password"
                  ],
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "User's username",
                      "example": "admin"
                    },
                    "password": {
                      "type": "string",
                      "description": "User's password",
                      "example": "Password123"
                    },
                    "org": {
                      "type": "string",
                      "description": "Organization name, default 'Root'",
                      "example": "root"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/login/refresh": {
        "post": {
          "summary": "get authentication tokens using refresh token",
          "operationId": "refreshToken",
          "tags": [
            "Login"
          ],
          "description": "",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/tokens"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "refresh_token"
                  ],
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "description": "Refresh token",
                      "example": "refresh_token_string"
                    },
                    "access_token_expiry": {
                      "type": "number",
                      "description": "Access token expiration time",
                      "example": 300
                    },
                    "refresh_token_expiry": {
                      "type": "number",
                      "description": "Refresh token expiration time",
                      "example": 300
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/machines": {
        "get": {
          "deprecated": true,
          "tags": [
            "Machines"
          ],
          "summary": "Get all machines - deprecated, use GET /servers",
          "operationId": "getMachines",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/machines"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "role",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "/machines/{uid}": {
        "get": {
          "deprecated": true,
          "tags": [
            "Machines"
          ],
          "summary": "Get single machine - deprecated, use GET /servers/{uid}",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Machine uid"
            }
          ],
          "operationId": "getSingleMachine",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/machine"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/mountDefaults": {
        "get": {
          "tags": [
            "Mounts Defaults"
          ],
          "summary": "Get cluster global mount default options",
          "operationId": "getMountDefaults",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/mountDefaults"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Mounts Defaults"
          ],
          "summary": "Set cluster global mount default options",
          "operationId": "setMountDefaults",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "qos_max_throughput_mbps": {
                      "type": "number",
                      "example": 300000,
                      "description": "default qos max throughput in mbps"
                    },
                    "qos_preferred_throughput_mbps": {
                      "type": "number",
                      "example": 200000,
                      "description": "default qos preferred throughput in mbps"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Mounts Defaults"
          ],
          "summary": "Reset cluster global mount default options",
          "operationId": "resetMountDefaults",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "qos_max_throughput_mbps",
              "schema": {
                "type": "boolean",
                "example": false,
                "description": "Reset qos max throughput to default"
              }
            },
            {
              "in": "query",
              "name": "qos_preferred_throughput_mbps",
              "schema": {
                "type": "boolean",
                "example": false,
                "description": "Reset qos preferred throughput to default"
              }
            }
          ]
        }
      },
      "/nfs/permissions": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get NFS permissions",
          "operationId": "getNfsPermissions",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/nfsPermission"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "fs_uid",
              "description": "Filesystem uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "tags": [
            "NFS"
          ],
          "summary": "Add NFS permission",
          "operationId": "addNfsPermission",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/nfsPermission"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "filesystem",
                    "group"
                  ],
                  "properties": {
                    "filesystem": {
                      "type": "string",
                      "description": "Filesystem name",
                      "example": "fs_2"
                    },
                    "group": {
                      "type": "string",
                      "description": "Client group name",
                      "example": "DefaultClientGroup"
                    },
                    "path": {
                      "type": "string",
                      "description": "path [default -  /]",
                      "example": "/"
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Permission type",
                      "enum": [
                        "RO",
                        "RW"
                      ]
                    },
                    "squash_mode": {
                      "type": "string",
                      "description": "Squashing",
                      "enum": [
                        "none",
                        "root",
                        "all"
                      ]
                    },
                    "anon_uid": {
                      "type": "number",
                      "description": "Anonymous UID to be used instead of root when root squashing is enabled",
                      "example": 10
                    },
                    "anon_gid": {
                      "type": "number",
                      "example": 10,
                      "description": "Anonymous GID to be used instead of root when root squashing is enabled"
                    },
                    "obs_direct": {
                      "type": "boolean",
                      "description": "Obs direct",
                      "example": true
                    },
                    "supported_versions": {
                      "type": "array",
                      "description": "supported NFS versions",
                      "items": {
                        "type": "string",
                        "enum": [
                          "V3",
                          "V4"
                        ]
                      },
                      "example": [
                        "V3"
                      ]
                    },
                    "priority": {
                      "description": "The priority of the client permissions",
                      "type": "number",
                      "example": 10
                    },
                    "enable_auth_types": {
                      "type": "array",
                      "description": "enable NFS authentication types",
                      "items": {
                        "type": "string",
                        "enum": [
                          "NONE",
                          "SYS",
                          "KRB5",
                          "KRB5i",
                          "KRB5p"
                        ]
                      },
                      "example": [
                        "KRB5"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/permissions/{uid}": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get NFS permission",
          "operationId": "getNfsPermission",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/nfsPermission"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Permission uid"
            }
          ]
        },
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Update NFS permission",
          "operationId": "updateNfsPermission",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Permission uid"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "path [default -  /]",
                      "example": "/"
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Permission type",
                      "enum": [
                        "RO",
                        "RW"
                      ]
                    },
                    "squash_mode": {
                      "type": "string",
                      "description": "Squashing",
                      "enum": [
                        "none",
                        "root",
                        "all"
                      ]
                    },
                    "anon_uid": {
                      "type": "number",
                      "description": "Anonymous UID to be used instead of root when root squashing is enabled",
                      "example": 10
                    },
                    "anon_gid": {
                      "type": "number",
                      "example": 10,
                      "description": "Anonymous GID to be used instead of root when root squashing is enabled"
                    },
                    "obs_direct": {
                      "type": "boolean",
                      "description": "Obs direct",
                      "example": true
                    },
                    "supported_versions": {
                      "type": "array",
                      "description": "supported NFS versions",
                      "items": {
                        "type": "string",
                        "enum": [
                          "V3",
                          "V4"
                        ]
                      },
                      "example": [
                        "V3"
                      ]
                    },
                    "priority": {
                      "description": "The priority of the client permissions",
                      "type": "number",
                      "example": 10
                    },
                    "enable_auth_types": {
                      "type": "array",
                      "description": "enable NFS authentication types",
                      "items": {
                        "type": "string",
                        "enum": [
                          "NONE",
                          "SYS",
                          "KRB5",
                          "KRB5i",
                          "KRB5p"
                        ]
                      },
                      "example": [
                        "KRB5"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "NFS"
          ],
          "summary": "Remove NFS permission",
          "operationId": "deleteNfsPermission",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Permission uid"
            },
            {
              "in": "query",
              "name": "path",
              "schema": {
                "type": "string"
              },
              "description": "Default \"/\""
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/nfs/clientGroups": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get all nfs client groups",
          "operationId": "getClientGroups",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/clientGroup"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "NFS"
          ],
          "summary": "Create nfs client group",
          "operationId": "createClientGroup",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Group name",
                      "example": "group_name"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "uid": {
                            "type": "string",
                            "example": "340"
                          },
                          "rules": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            },
                            "example": []
                          },
                          "id": {
                            "type": "string",
                            "example": "NfsClientGroupId<1>"
                          },
                          "name": {
                            "type": "string",
                            "example": "group_name"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nfs/clientGroups/{uid}": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get nfs client group",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "group uid"
            }
          ],
          "operationId": "getClientGroup",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/clientGroup"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "NFS"
          ],
          "summary": "Delete nfs client group",
          "operationId": "deleteClientGroup",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "schema": {
                "type": "string"
              },
              "description": "group uid",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/nfs/clientGroups/{uid}/rules": {
        "post": {
          "tags": [
            "NFS"
          ],
          "summary": "create rule for nfs client group",
          "operationId": "addClientGroupRule",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "schema": {
                "type": "string"
              },
              "description": "group uid",
              "required": true
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dns": {
                      "type": "string",
                      "description": "DNS rule with *?[] wildcards rule",
                      "example": "new-dns"
                    },
                    "ip": {
                      "type": "string",
                      "description": "IP with netmask rule, in the 1.1.1.1/255.255.0.0 format",
                      "example": "123.10.10.0"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/nfs/clientGroups/{uid}/rules/{rule_uid}": {
        "delete": {
          "tags": [
            "NFS"
          ],
          "summary": "Delete rule for nfs client group",
          "operationId": "deleteClientGroupRule",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "schema": {
                "type": "string"
              },
              "description": "group uid",
              "required": true
            },
            {
              "in": "path",
              "name": "rule_uid",
              "schema": {
                "type": "string"
              },
              "required": true
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/nfs/globalConfig": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Update NFS global configuration",
          "operationId": "updateNfsGlobalConfig",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mountd_port": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535,
                      "description": "mountd listening port",
                      "example": 20048
                    },
                    "config_fs": {
                      "type": "string",
                      "description": "internal config FS",
                      "example": ".config_fs"
                    },
                    "lockmgr_port": {
                      "type": "number",
                      "description": "the alternate port for the nfs lock manager",
                      "example": 46999
                    },
                    "statmon_port": {
                      "type": "number",
                      "description": "the alternate port for the nfs status monitor",
                      "example": 47000
                    },
                    "notify_port": {
                      "type": "number",
                      "description": "the alternate port for the status notification",
                      "example": 47001
                    },
                    "default_supported_versions": {
                      "type": "array",
                      "description": "default export supported NFS versions",
                      "items": {
                        "type": "string",
                        "enum": [
                          "V3",
                          "V4"
                        ]
                      },
                      "example": [
                        "V3"
                      ]
                    },
                    "enable_auth_types": {
                      "type": "array",
                      "description": "enable NFS authentication types",
                      "items": {
                        "type": "string",
                        "enum": [
                          "NONE",
                          "SYS",
                          "KRB5",
                          "KRB5i",
                          "KRB5p"
                        ]
                      },
                      "example": [
                        "KRB5"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get NFS global configuration",
          "operationId": "getNfsGlobalConfig",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "mountd_port": {
                            "type": "integer",
                            "description": "mountd listening port"
                          },
                          "config_fs": {
                            "type": "string",
                            "description": "internal config FS",
                            "example": ".config_fs"
                          },
                          "direct_io": {
                            "type": "boolean",
                            "description": "disable/enable direct-io for reads and writes",
                            "example": true
                          },
                          "locks": {
                            "type": "boolean",
                            "description": "disable/enable nfs Locking support",
                            "example": true
                          },
                          "grace_period": {
                            "type": "number",
                            "description": "max allowed time in seconds for nfs clients to reclaim locks",
                            "example": 45
                          },
                          "lease_lifetime": {
                            "type": "number",
                            "description": "time in seconds for nfs clients to renew locks lease when using NFSv4",
                            "example": 30
                          },
                          "lock_recovery_period": {
                            "type": "number",
                            "description": "max allowed time for nfs servers to reclaim cluster wide locks after the crash",
                            "example": 60
                          },
                          "lockmgr_port": {
                            "type": "number",
                            "description": "the alternate port for the nfs lock manager",
                            "example": 46999
                          },
                          "statmon_port": {
                            "type": "number",
                            "description": "the alternate port for the nfs status monitor",
                            "example": 47000
                          },
                          "notify_port": {
                            "type": "number",
                            "description": "the alternate port for the status notification",
                            "example": 47001
                          },
                          "default_supported_versions": {
                            "type": "array",
                            "description": "default export supported NFS versions",
                            "items": {
                              "type": "string",
                              "enum": [
                                "V3",
                                "V4"
                              ]
                            },
                            "example": [
                              "V3"
                            ]
                          },
                          "enabled_auth_types": {
                            "type": "array",
                            "description": "enabled NFS authentication types",
                            "items": {
                              "type": "string",
                              "enum": [
                                "NONE",
                                "SYS",
                                "KRB5",
                                "KRB5i",
                                "KRB5p"
                              ]
                            },
                            "example": [
                              "NONE",
                              "SYS",
                              "KRB5"
                            ]
                          },
                          "default_auth_types": {
                            "type": "array",
                            "description": "default NFS authentication types",
                            "items": {
                              "type": "string",
                              "enum": [
                                "NONE",
                                "SYS",
                                "KRB5",
                                "KRB5i",
                                "KRB5p"
                              ]
                            },
                            "example": [
                              "KRB5"
                            ]
                          },
                          "supported_auth_types": {
                            "type": "array",
                            "description": "supported NFS authentication types",
                            "items": {
                              "type": "string",
                              "enum": [
                                "NONE",
                                "SYS",
                                "KRB5",
                                "KRB5i",
                                "KRB5p"
                              ]
                            },
                            "example": [
                              "NONE",
                              "SYS",
                              "KRB5",
                              "KRB5p",
                              "KRB5i"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nfs/debug": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get NFS debug level",
          "operationId": "getNFSDebugLevel",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "host_id": {
                              "type": "string",
                              "example": "HostId<1>"
                            },
                            "uid": {
                              "type": "string",
                              "example": "<host_uid>"
                            },
                            "debug_level": {
                              "type": "string",
                              "example": "EVENT"
                            },
                            "component": {
                              "type": "string",
                              "example": "COMPONENT_FSAL"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "NFS"
          ],
          "summary": "Set NFS debug level",
          "operationId": "setNFSDebugLevel",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "level",
                    "host_uids"
                  ],
                  "properties": {
                    "level": {
                      "type": "string",
                      "example": "EVENT",
                      "enum": [
                        "EVENT",
                        "INFO",
                        "DEBUG",
                        "MID_DEBUG",
                        "FULL_DEBUG"
                      ]
                    },
                    "host_uids": {
                      "type": "array",
                      "description": "Host uids to change log level",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nfs/kerberosService": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Setup NFS Kerberos Service",
          "operationId": "setupNfsKerberosService",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "realm_name": {
                      "type": "string",
                      "description": "Kerberos REALM",
                      "example": "TEST.WEKALAB.IO"
                    },
                    "kdc_primary_server": {
                      "type": "string",
                      "description": "KDC Primary Server",
                      "example": "kdc-server-1.test.wekalab.io"
                    },
                    "kdc_secondary_server": {
                      "type": "string",
                      "description": "KDC Secondary Server",
                      "example": "kdc-server-2.test.wekalab.io"
                    },
                    "kdc_admin_server": {
                      "type": "string",
                      "description": "KDC Admin Server",
                      "example": "kdc-admin-server.test.wekalab.io"
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Re-configure Kerberos service",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get NFS Kerberos Service Configuration",
          "operationId": "getNfsKerberosService",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "kdc_primary_server": {
                            "type": "string",
                            "description": "KDC Primary Server"
                          },
                          "kdc_secondary_server": {
                            "type": "string",
                            "description": "KDC Secondary Server"
                          },
                          "kdc_admin_server": {
                            "type": "string",
                            "description": "KDC Admin Server"
                          },
                          "realm_name": {
                            "type": "string",
                            "description": "Kerberos REALM"
                          },
                          "service_generation_id": {
                            "type": "integer",
                            "description": "Service Generation ID"
                          },
                          "service_status": {
                            "type": "string",
                            "description": "Kerberos Service Status"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nfs/kerberosMitRegistration": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Register NFS service with MIT Kerberos",
          "operationId": "setNfsMitKerberosRegistration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nfs_fqdn_service_name": {
                      "type": "string",
                      "description": "NFS Service Name in FQDN format",
                      "example": "nfs-kerberos.test.wekalab.io"
                    },
                    "keytab_base64": {
                      "type": "string",
                      "description": "Keytab file contents in base64"
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Re-configure Setup OpenLDAP service",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/kerberosActiveDirectoryRegistration": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Register NFS Service with ActiveDirectory (AD) Kerberos",
          "operationId": "setNfsAdKerberosRegistration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nfs_fqdn_service_name": {
                      "type": "string",
                      "description": "NFS Service Name in FQDN format",
                      "example": "nfs-kerberos.test.wekalab.io"
                    },
                    "realm_admin_name": {
                      "type": "string",
                      "description": "Realm Administrator Name",
                      "example": "realmadmin"
                    },
                    "realm_admin_password": {
                      "type": "string",
                      "description": "The realm administrator password",
                      "example": "realmpassword"
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Re-configure Setup OpenLDAP service",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/kerberosRegistration": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get NFS Kerberos Registration Configuration",
          "operationId": "getNfsKerberosRegistration",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "nfs_service_name": {
                            "type": "string",
                            "description": "NFS Kerberos Service Name in FQDN format"
                          },
                          "kdc_type": {
                            "type": "string",
                            "description": "NFS Kerberos Service type"
                          },
                          "registration_generation_id": {
                            "type": "integer",
                            "description": "Kerberos Registration Generation ID"
                          },
                          "registration_status": {
                            "type": "string",
                            "description": "Kerberos Registration status"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nfs/kerberosReset": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Reset Kerberos Configuration for NFS",
          "operationId": "resetNfsKerberosConfiguration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "force": {
                      "type": "boolean",
                      "description": "Reset Kerberos configuration",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/openLdapService": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Set OpenLDAP Configuration for NFS",
          "operationId": "setNfsOpenLdapConfiguration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ldap_server": {
                      "type": "string",
                      "description": "OpenLDAP Server Name",
                      "example": "ldap-ad.test.wekalab.io"
                    },
                    "ldap_domain": {
                      "type": "string",
                      "description": "OpenLDAP Server Domain",
                      "example": "test.wekalab.io"
                    },
                    "ldap_reader_user_name": {
                      "type": "string",
                      "description": "OpenLDAP Reader User Name",
                      "example": "CN=reader-admin,DC=test,DC=wekalab,DC=io"
                    },
                    "ldap_reader_user_password": {
                      "type": "string",
                      "description": "OpenLDAP Reader User Password",
                      "example": "ldapassword"
                    },
                    "ldap_base_dn": {
                      "type": "string",
                      "description": "OpenLDAP Base DN",
                      "example": "DC=test,DC=wekalab,DC=io"
                    },
                    "ldap_port": {
                      "type": "integer",
                      "description": "OpenLDAP Server Port",
                      "example": "389"
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Re-configure OpenLDAP service",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/activeDirectoryLdapService": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Set AD (Active Directory) Configuration for NFS",
          "operationId": "setNfsAdLdapConfiguration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "force": {
                      "type": "boolean",
                      "description": "Re-configure AD LDAP service",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/ldapService": {
        "get": {
          "tags": [
            "NFS"
          ],
          "summary": "Get LDAP Configuration for NFS",
          "operationId": "getNfsLdapService",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ldap_server_type": {
                        "type": "string",
                        "description": "LDAP Server type"
                      },
                      "ldap_server": {
                        "type": "string",
                        "description": "LDAP Server Name"
                      },
                      "ldap_domain": {
                        "type": "string",
                        "description": "LDAP Server Domain"
                      },
                      "ldap_base_dn": {
                        "type": "string",
                        "description": "LDAP Base DN"
                      },
                      "ldap_reader_user_name": {
                        "type": "string",
                        "description": "LDAP Reader User Name"
                      },
                      "ldap_reader_user_password": {
                        "type": "string",
                        "description": "LDAP Reader User Password"
                      },
                      "ldap_port": {
                        "type": "integer",
                        "description": "LDAP Server Port"
                      },
                      "ldap_generation_id": {
                        "type": "integer",
                        "description": "LDAP Geneartion Id"
                      },
                      "ldap_status": {
                        "type": "string",
                        "description": "LDAP Service Status"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nfs/ldapReset": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Reset LDAP Configuration for NFS",
          "operationId": "resetNfsLdapConfiguration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "force": {
                      "type": "boolean",
                      "description": "Reset LDAP configuration",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/ldapImport": {
        "put": {
          "tags": [
            "NFS"
          ],
          "summary": "Import LDAP Configuration for NFS",
          "operationId": "importNfsLdapConfiguration",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ldap_server_type": {
                      "type": "string",
                      "description": "LDAP Server Type",
                      "example": "OpenLDAP"
                    },
                    "ldap_server": {
                      "type": "string",
                      "description": "LDAP Server Name",
                      "example": "ldap-server.test.wekalab.io"
                    },
                    "ldap_domain": {
                      "type": "string",
                      "description": "LDAP Server Domain",
                      "example": "test.wekalab.io"
                    },
                    "sssd_conf_base64": {
                      "type": "string",
                      "description": "sssd.conf file contents in base64"
                    },
                    "idmapd_conf_base64": {
                      "type": "string",
                      "description": "idmapd.conf file contents in base64"
                    },
                    "verify": {
                      "type": "boolean",
                      "description": "Verify connectivity with LDAP Server",
                      "example": false
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Re-configure LDAP service",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nfs/ldapExport": {
        "post": {
          "tags": [
            "NFS"
          ],
          "summary": "Export LDAP Configuration for NFS",
          "operationId": "exportNfsLdapConfiguration",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "sssd_conf_base64": {
                            "type": "string",
                            "description": "sssd.conf file contents in base64"
                          },
                          "idmapd_conf_base64": {
                            "type": "string",
                            "description": "idmapd.conf file contents in base64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ldap_server": {
                      "type": "string",
                      "description": "LDAP Server Name",
                      "example": "ldap-server.test.wekalab.io"
                    },
                    "ldap_domain": {
                      "type": "string",
                      "description": "LDAP Server Domain",
                      "example": "test.wekalab.io"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/nodes": {
        "get": {
          "deprecated": true,
          "tags": [
            "Nodes"
          ],
          "summary": "Get all nodes - deprecated, use GET /processes",
          "operationId": "getNodes",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/node"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/nodes/{uid}": {
        "get": {
          "deprecated": true,
          "tags": [
            "Nodes"
          ],
          "summary": "Get node - deprecated, use GET /processes/{uid}",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Node uid"
            }
          ],
          "operationId": "getNode",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/node"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/objectStores/{uid}": {
        "put": {
          "tags": [
            "Object store"
          ],
          "summary": "Update object store",
          "operationId": "updateObs",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object storage uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_name": {
                      "type": "string",
                      "description": "Name of the Object Store",
                      "example": "ON_PREM1"
                    },
                    "protocol": {
                      "type": "string",
                      "description": "One of - HTTP (default), HTTPS, HTTPS_UNVERIFIED",
                      "enum": [
                        "HTTP",
                        "HTTPS",
                        "HTTPS_UNVERIFIED"
                      ]
                    },
                    "hostname": {
                      "type": "string",
                      "description": "Hostname (or IP) of the entrypoint to the object store",
                      "example": "s3.eu-west-1.amazonaws.com"
                    },
                    "port": {
                      "type": "number",
                      "description": "Port of the entrypoint to S3 (single Accesser or Load-Balancer)",
                      "example": 80
                    },
                    "auth_method": {
                      "type": "string",
                      "description": "Authentication method S3AuthMethod can be None, AWSSignature2 or AWSSignature4",
                      "enum": [
                        "None",
                        "AWSSignature2",
                        "AWSSignature4"
                      ]
                    },
                    "region": {
                      "type": "string",
                      "description": "Name of the region we are assigned to work with (usually empty)",
                      "example": "eu-west-1"
                    },
                    "access_key_id": {
                      "type": "string",
                      "description": "Access Key ID for AWS Signature authentications",
                      "example": "some_key"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "Secret Key for AWS Signature authentications",
                      "example": "some_secret_key"
                    },
                    "bandwidth": {
                      "type": "number",
                      "description": "Bandwidth limitation per core (Mbps)",
                      "example": 1000
                    },
                    "max_concurrent_downloads": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of downloads we concurrently perform on this object store in a single IO node (format - 1..64)"
                    },
                    "max_concurrent_uploads": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of uploads we concurrently perform on this object store in a single IO node (format - 1..64)"
                    },
                    "max_concurrent_removals": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of removals we concurrently perform on this object store in a single IO node (format -  1..64)"
                    },
                    "max_extents_in_data_blob": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of extents data to upload to an object store data blob"
                    },
                    "max_blocks_in_data_blob": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum size to upload to an object store data blob (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "sts_operation_type": {
                      "type": "string",
                      "description": "AWS STS operation type to use for authentication, optional. Supported - ASSUME_ROLE",
                      "enum": [
                        "ASSUME_ROLE"
                      ]
                    },
                    "sts_role_arn": {
                      "type": "string",
                      "description": "The Amazon Resource Name (ARN) of the role to assume",
                      "example": "arn:aws:iam::123456789012:role/MyRole"
                    },
                    "sts_role_session_name": {
                      "type": "string",
                      "description": "An identifier for the assumed role session,  Length Constraints - Minimum length of 2. Maximum length of 64, allowed characters - upper-case and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters - =,.@-  check Pattern - [\\w+=,.@-]*",
                      "example": "weka-session"
                    },
                    "sts_session_duration": {
                      "type": "number",
                      "description": "Enter the duration of the temporary security credentials in seconds, the value must be between 900 to 43200 , the default set to 3600",
                      "example": 3600
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/objectStoreBuckets": {
        "get": {
          "tags": [
            "Object store bucket"
          ],
          "summary": "Get all object store buckets",
          "operationId": "getAllObsBuckets",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/objectStoreBucket"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Object store bucket"
          ],
          "summary": "Create object store bucket",
          "operationId": "createObsBucket",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/objectStoreBucket"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the Object Store Bucket",
                      "example": "OBS_1"
                    },
                    "obs_site": {
                      "type": "string",
                      "description": "Site of the Object Store Bucket (local/remote)",
                      "example": "local"
                    },
                    "obs_type": {
                      "type": "string",
                      "description": "One of - AWS (default), HCP, AZURE, OTHER",
                      "enum": [
                        "AWS",
                        "HCP",
                        "AZURE",
                        "OTHER"
                      ]
                    },
                    "obs_name": {
                      "type": "string",
                      "description": "Name of the Object Store",
                      "example": "default"
                    },
                    "protocol": {
                      "type": "string",
                      "description": "One of - HTTP (default), HTTPS, HTTPS_UNVERIFIED",
                      "enum": [
                        "HTTP",
                        "HTTPS",
                        "HTTPS_UNVERIFIED"
                      ]
                    },
                    "hostname": {
                      "type": "string",
                      "description": "Hostname (or IP) of the entrypoint to the object store",
                      "example": "s3.eu-west-1.amazonaws.com"
                    },
                    "port": {
                      "type": "number",
                      "description": "Port of the entrypoint to S3 (single Accesser or Load-Balancer)",
                      "example": 80
                    },
                    "bucket": {
                      "type": "string",
                      "description": "Name of the bucket we are assigned to work with",
                      "example": "eu-west-1-aws.company.def-oo-test/obs_1"
                    },
                    "auth_method": {
                      "type": "string",
                      "description": "Authentication method S3AuthMethod can be None, AWSSignature2 or AWSSignature4",
                      "enum": [
                        "None",
                        "AWSSignature2",
                        "AWSSignature4"
                      ]
                    },
                    "region": {
                      "type": "string",
                      "description": "Name of the region we are assigned to work with (usually empty)",
                      "example": "eu-west-1"
                    },
                    "access_key_id": {
                      "type": "string",
                      "description": "Access Key ID for AWS Signature authentications",
                      "example": "some_key"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "Secret Key for AWS Signature authentications",
                      "example": "some_secret_key"
                    },
                    "dry_run": {
                      "type": "boolean",
                      "description": "Only test the command, don't affect the system",
                      "example": false
                    },
                    "skip_verification": {
                      "type": "boolean",
                      "description": "Don't verify the connection to the given store",
                      "example": false
                    },
                    "bandwidth": {
                      "type": "number",
                      "description": "Bandwidth limitation per core (Mbps)",
                      "example": 1000
                    },
                    "verbose_errors": {
                      "type": "boolean",
                      "description": "Dump HTTP info on error"
                    },
                    "errors_timeout": {
                      "type": "string",
                      "description": "If the OBS link is down for longer than this, all IOs that need data return with an error (format - duration between 1 minute and 15 minutes)",
                      "example": "1 minute"
                    },
                    "prefetch_mib": {
                      "type": "number",
                      "description": "How many MiB of data to prefetch when reading a whole MiB on object store (format - 0..600)",
                      "example": 10
                    },
                    "max_concurrent_downloads": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of downloads we concurrently perform on this object store in a single IO node (format - 1..64)"
                    },
                    "max_concurrent_uploads": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of uploads we concurrently perform on this object store in a single IO node (format - 1..64)"
                    },
                    "max_concurrent_removals": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of removals we concurrently perform on this object store in a single IO node (format -  1..64)"
                    },
                    "max_extents_in_data_blob": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of extents data to upload to an object store data blob"
                    },
                    "max_blocks_in_data_blob": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum size to upload to an object store data blob (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "sts_operation_type": {
                      "type": "string",
                      "description": "AWS STS operation type to use for authentication, optional. Supported - ASSUME_ROLE",
                      "enum": [
                        "ASSUME_ROLE"
                      ]
                    },
                    "sts_role_arn": {
                      "type": "string",
                      "description": "The Amazon Resource Name (ARN) of the role to assume",
                      "example": "arn:aws:iam::123456789012:role/MyRole"
                    },
                    "sts_role_session_name": {
                      "type": "string",
                      "description": "An identifier for the assumed role session,  Length Constraints - Minimum length of 2. Maximum length of 64, allowed characters - upper-case and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters - =,.@-  check Pattern - [\\w+=,.@-]*",
                      "example": "weka-session"
                    },
                    "sts_session_duration": {
                      "type": "number",
                      "description": "Enter the duration of the temporary security credentials in seconds, the value must be between 900 to 43200 , the default set to 3600",
                      "example": 3600
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/objectStoreBuckets/{uid}": {
        "get": {
          "tags": [
            "Object store bucket"
          ],
          "summary": "Get object store bucket",
          "operationId": "getObsBuckets",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object storage uid"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/objectStoreBucket"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Object store bucket"
          ],
          "summary": "Delete object store bucket",
          "operationId": "deleteObsBucket",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object storage uid"
            }
          ]
        },
        "put": {
          "tags": [
            "Object store bucket"
          ],
          "summary": "Update object store bucket",
          "operationId": "updateObsBucket",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/objectStoreBucket"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object storage uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_name": {
                      "type": "string",
                      "description": "Name of the Object Store Bucket",
                      "example": "OBS_1"
                    },
                    "new_obs_name": {
                      "type": "string",
                      "description": "Name of the Object Store",
                      "example": "ON_PREM1"
                    },
                    "protocol": {
                      "type": "string",
                      "description": "One of - HTTP (default), HTTPS, HTTPS_UNVERIFIED",
                      "enum": [
                        "HTTP",
                        "HTTPS",
                        "HTTPS_UNVERIFIED"
                      ]
                    },
                    "hostname": {
                      "type": "string",
                      "description": "Hostname (or IP) of the entrypoint to the object store",
                      "example": "s3.eu-west-1.amazonaws.com"
                    },
                    "port": {
                      "type": "number",
                      "description": "Port of the entrypoint to S3 (single Accesser or Load-Balancer)",
                      "example": 80
                    },
                    "bucket": {
                      "type": "string",
                      "description": "Name of the bucket we are assigned to work with",
                      "example": "eu-west-1-aws.company.def-oo-test/obs_1"
                    },
                    "auth_method": {
                      "type": "string",
                      "description": "Authentication method S3AuthMethod can be None, AWSSignature2 or AWSSignature4",
                      "enum": [
                        "None",
                        "AWSSignature2",
                        "AWSSignature4"
                      ]
                    },
                    "region": {
                      "type": "string",
                      "description": "Name of the region we are assigned to work with (usually empty)",
                      "example": "eu-west-1"
                    },
                    "access_key_id": {
                      "type": "string",
                      "description": "Access Key ID for AWS Signature authentications",
                      "example": "some_key"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "Secret Key for AWS Signature authentications",
                      "example": "some_secret_key"
                    },
                    "dry_run": {
                      "type": "boolean",
                      "description": "Only test the command, don't affect the system",
                      "example": false
                    },
                    "skip_verification": {
                      "type": "boolean",
                      "description": "Don't verify the connection to the given store",
                      "example": false
                    },
                    "bandwidth": {
                      "type": "number",
                      "description": "Bandwidth limitation per core (Mbps)",
                      "example": 1000
                    },
                    "verbose_errors": {
                      "type": "boolean",
                      "description": "Dump HTTP info on error"
                    },
                    "errors_timeout": {
                      "type": "string",
                      "description": "If the OBS link is down for longer than this, all IOs that need data return with an error (format - duration between 1 minute and 15 minutes)",
                      "example": "1 minute"
                    },
                    "prefetch_mib": {
                      "type": "number",
                      "description": "How many MiB of data to prefetch when reading a whole MiB on object store (format - 0..600)",
                      "example": 10
                    },
                    "max_concurrent_downloads": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of downloads we concurrently perform on this object store in a single IO node (format - 1..64)"
                    },
                    "max_concurrent_uploads": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of uploads we concurrently perform on this object store in a single IO node (format - 1..64)"
                    },
                    "max_concurrent_removals": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of removals we concurrently perform on this object store in a single IO node (format -  1..64)"
                    },
                    "max_extents_in_data_blob": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum number of extents data to upload to an object store data blob"
                    },
                    "max_blocks_in_data_blob": {
                      "type": "number",
                      "example": 10,
                      "description": "Maximum size to upload to an object store data blob (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "sts_operation_type": {
                      "type": "string",
                      "description": "AWS STS operation type to use for authentication, optional. Supported - ASSUME_ROLE",
                      "enum": [
                        "ASSUME_ROLE"
                      ]
                    },
                    "sts_role_arn": {
                      "type": "string",
                      "description": "The Amazon Resource Name (ARN) of the role to assume",
                      "example": "arn:aws:iam::123456789012:role/MyRole"
                    },
                    "sts_role_session_name": {
                      "type": "string",
                      "description": "An identifier for the assumed role session,  Length Constraints - Minimum length of 2. Maximum length of 64, allowed characters - upper-case and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters - =,.@-  check Pattern - [\\w+=,.@-]*",
                      "example": "weka-session"
                    },
                    "sts_session_duration": {
                      "type": "number",
                      "description": "Enter the duration of the temporary security credentials in seconds, the value must be between 900 to 43200 , the default set to 3600",
                      "example": 3600
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/objectStoreBuckets/{uid}/operations": {
        "get": {
          "tags": [
            "Object store bucket"
          ],
          "summary": "Get object store bucket operations",
          "operationId": "getObsOperations",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "NodeId<121>": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "chanType": {
                                  "type": "string",
                                  "example": "Upload"
                                },
                                "info": {
                                  "type": "object",
                                  "properties": {
                                    "concurrencyAtEnd": {
                                      "type": "number",
                                      "example": 0
                                    },
                                    "executionTimeUSecs": {
                                      "type": "number",
                                      "example": 265839
                                    },
                                    "key": {
                                      "type": "string",
                                      "example": "B_84/23caf2eb-246e-4743-b6f1-ebcc70672b07/s/I_0/17/0"
                                    },
                                    "concurrencyAtStart": {
                                      "type": "number",
                                      "example": 3
                                    },
                                    "size": {
                                      "type": "number",
                                      "example": 56
                                    },
                                    "lastCurlError": {
                                      "type": "string",
                                      "example": "ok"
                                    },
                                    "lastLatencyUSecs": {
                                      "type": "number",
                                      "example": 265821
                                    },
                                    "fsId": {
                                      "type": "string",
                                      "example": "FSId<0>"
                                    },
                                    "lastHTTPRespCode": {
                                      "type": "string",
                                      "example": "INVALID"
                                    },
                                    "curlErrorStr": {
                                      "type": "string",
                                      "example": ""
                                    },
                                    "startTime": {
                                      "type": "object",
                                      "properties": {
                                        "usecs": {
                                          "type": "number",
                                          "example": 1615473402366933
                                        }
                                      }
                                    },
                                    "extentSpec": {
                                      "type": "object",
                                      "properties": {
                                        "snapLayerId": {
                                          "type": "string",
                                          "example": "SnapLayerId<INVALID>"
                                        },
                                        "extentKey": {
                                          "type": "object",
                                          "properties": {
                                            "extentIndex": {
                                              "type": "string",
                                              "example": "ExtentIndex<INVALID>"
                                            },
                                            "inodeId": {
                                              "type": "string",
                                              "example": "InodeId<INVALID>"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "counts": {
                                      "type": "object",
                                      "properties": {
                                        "SUCCESS": {
                                          "type": "number",
                                          "example": 1
                                        }
                                      }
                                    }
                                  }
                                },
                                "opPhase": {
                                  "type": "string",
                                  "example": "Recent"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "object storage uid"
            }
          ]
        }
      },
      "/organizations/multipleOrgsExist": {
        "get": {
          "tags": [
            "Organization"
          ],
          "summary": "Get if multiple Organizations Exist",
          "operationId": "getMultipleOrgExist",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organizations": {
        "get": {
          "tags": [
            "Organization"
          ],
          "summary": "Get all organizations",
          "operationId": "getOrganizations",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/organization"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Organization"
          ],
          "summary": "Create organization",
          "operationId": "createOrganization",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/organization"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "username",
                    "password"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Organization name",
                      "example": "ORG-1"
                    },
                    "username": {
                      "type": "string",
                      "description": "Username of organization admin",
                      "example": "org1-user"
                    },
                    "password": {
                      "type": "string",
                      "description": "Password of organization admin",
                      "example": "Org1User"
                    },
                    "ssd_quota": {
                      "type": "number",
                      "description": "SSD quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)",
                      "example": 10000000000
                    },
                    "total_quota": {
                      "type": "number",
                      "example": 20000000000,
                      "description": "Total quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organizations/{uid}": {
        "get": {
          "tags": [
            "Organization"
          ],
          "summary": "Get organization",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "organization uid"
            }
          ],
          "operationId": "getOrganization",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/organization"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Organization"
          ],
          "summary": "Delete organization",
          "operationId": "deleteOrganization",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "organization uid"
            }
          ]
        },
        "put": {
          "tags": [
            "Organization"
          ],
          "summary": "update organization",
          "operationId": "updateOrganization",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/organization"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "organization uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_name": {
                      "type": "string",
                      "example": "ORG-2",
                      "description": "Organization new name"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organizations/{uid}/limits": {
        "put": {
          "tags": [
            "Organization"
          ],
          "summary": "Set organization capacity limits",
          "operationId": "setOrganizationLimit",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/organization"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "organization uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ssd_quota": {
                      "type": "number",
                      "example": 10000000000,
                      "description": "SSD quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    },
                    "total_quota": {
                      "type": "number",
                      "example": 20000000000,
                      "description": "Total quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/processes": {
        "get": {
          "tags": [
            "Processes"
          ],
          "summary": "Get all processes",
          "operationId": "getProcesses",
          "parameters": [
            {
              "in": "query",
              "name": "filter_type",
              "schema": {
                "type": "string",
                "enum": [
                  "All",
                  "ByContainerOrProcess",
                  "Backends",
                  "Clients",
                  "Roles",
                  "Leadership",
                  "Leader"
                ]
              },
              "description": "Optional filter parameter based on user needs."
            },
            {
              "in": "query",
              "name": "container_ids",
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "description": "Optional filter parameter based on container IDs. Used if \"ByContainerOrProcess\" filter is selected."
            },
            {
              "in": "query",
              "name": "process_ids",
              "schema": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "description": "Optional filter parameter based on process IDs. Used if \"ByContainerOrProcess\" filter is selected."
            },
            {
              "in": "query",
              "name": "roles",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": "Optional filter parameter based on node roles. Used if \"Roles\" filter is selected. Options - Management, Drives, Compute, Frontend"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/process"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/processes/{uid}": {
        "get": {
          "tags": [
            "Processes"
          ],
          "summary": "Get processes",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Processes uid"
            }
          ],
          "operationId": "getProcess",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/process"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/quota": {
        "get": {
          "deprecated": true,
          "tags": [
            "Quota"
          ],
          "summary": "Get filesystem quota",
          "operationId": "getQuotaDeprecated",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "0x0000092ddf3d0000:0": {
                            "type": "object",
                            "properties": {
                              "inodeId": {
                                "type": "number",
                                "example": 10092623495168
                              },
                              "total_bytes": {
                                "type": "number",
                                "example": 8192
                              },
                              "owner": {
                                "type": "string",
                                "example": "user"
                              },
                              "data_blocks": {
                                "type": "number",
                                "example": 0
                              },
                              "grace_seconds": {
                                "type": "number",
                                "example": 4294967295
                              },
                              "hard_limit_bytes": {
                                "type": "number",
                                "example": 1000001536
                              },
                              "snap_view_id": {
                                "type": "number",
                                "example": 0
                              },
                              "metadata_blocks": {
                                "type": "number",
                                "example": 2
                              },
                              "soft_limit_bytes": {
                                "type": "number",
                                "example": 18446744073709548000
                              },
                              "status": {
                                "type": "string",
                                "example": "ACTIVE"
                              }
                            }
                          }
                        }
                      },
                      "next_token": {
                        "type": "number",
                        "example": 3214121
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "type",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Quota type",
              "example": "directory"
            },
            {
              "in": "query",
              "name": "uid",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Filesystem uid",
              "example": "uid_string"
            },
            {
              "in": "query",
              "name": "next_token",
              "schema": {
                "type": "string"
              },
              "description": "Token to get the next page"
            }
          ]
        }
      },
      "/s3": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 cluster info",
          "operationId": "getS3Cluster",
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Create S3 cluster",
          "operationId": "createS3Cluster",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "default_fs_name",
                    "config_fs_name",
                    "key",
                    "secret"
                  ],
                  "properties": {
                    "default_fs_name": {
                      "type": "string",
                      "description": "Default filesystem name",
                      "example": "default"
                    },
                    "config_fs_name": {
                      "type": "string",
                      "description": "Config file system name",
                      "example": "default"
                    },
                    "host_uids": {
                      "type": "array",
                      "description": "UIDs of hosts running S3",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "uid_string"
                      ]
                    },
                    "all_hosts": {
                      "type": "boolean",
                      "example": false
                    },
                    "port": {
                      "type": "number",
                      "description": "port",
                      "example": 9000
                    },
                    "mount_options": {
                      "type": "string",
                      "description": "mount options",
                      "example": "rw"
                    },
                    "key": {
                      "type": "string",
                      "description": "S3 cluster access key",
                      "example": "NH4iX9HXjM"
                    },
                    "secret": {
                      "type": "string",
                      "description": "S3 cluster secret key",
                      "example": "izMx3kd7lXGHbifiNHARKB6j9Udx5KO6"
                    },
                    "anonymous_posix_uid": {
                      "type": "number",
                      "description": "POSIX UID for anonymous users",
                      "example": 65534
                    },
                    "anonymous_posix_gid": {
                      "type": "number",
                      "description": "POSIX GID for anonymous users",
                      "example": 65534
                    },
                    "etcd_cluster_size": {
                      "type": "number",
                      "description": "Size of etcd cluster",
                      "example": 7
                    },
                    "domain": {
                      "type": "string",
                      "description": "Virtual host-style comma seperated domains",
                      "example": "sub1.mydomain.com,sub2.mydomain.com"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "S3"
          ],
          "summary": "Update S3 cluster",
          "operationId": "updateS3Cluster",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "host_uids": {
                      "type": "array",
                      "description": "UIDs of hosts running S3",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "uid_string"
                      ]
                    },
                    "port": {
                      "type": "number",
                      "description": "port",
                      "example": 9000
                    },
                    "mount_options": {
                      "type": "string",
                      "description": "mount options",
                      "example": "rw"
                    },
                    "anonymous_posix_uid": {
                      "type": "number",
                      "description": "POSIX UID for anonymous users",
                      "example": 65534
                    },
                    "anonymous_posix_gid": {
                      "type": "number",
                      "description": "POSIX GID for anonymous users",
                      "example": 65534
                    },
                    "etcd_cluster_size": {
                      "type": "number",
                      "description": "Size of etcd cluster",
                      "example": 7
                    },
                    "domain": {
                      "type": "string",
                      "description": "Virtual host-style comma seperated domains. Empty to disable",
                      "example": "sub1.mydomain.com,sub2.mydomain.com"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "S3"
          ],
          "summary": "Delete S3 cluster",
          "operationId": "deleteS3Cluster",
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "purge_config",
              "schema": {
                "type": "boolean"
              },
              "required": false,
              "description": "Purge the existing configuration by default"
            }
          ]
        }
      },
      "/s3/buckets": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 buckets list",
          "operationId": "getS3Buckets",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "session_id": {
                        "type": "string"
                      },
                      "buckets": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/s3Bucket"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Create an S3 bucket",
          "operationId": "createS3Bucket",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "bucket_name"
                  ],
                  "properties": {
                    "bucket_name": {
                      "type": "string",
                      "description": "bucket name"
                    },
                    "policy": {
                      "type": "string",
                      "description": "bucket policy"
                    },
                    "policy_file_content": {
                      "type": "string",
                      "description": "S3 policy file contents",
                      "example": {
                        "Statement": [
                          {
                            "Principal": {
                              "AWS": "*"
                            },
                            "Resource": [
                              "arn:aws:s3:::*"
                            ],
                            "Sid": "",
                            "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                            ],
                            "Effect": "Allow"
                          }
                        ],
                        "Version": "2012-10-17"
                      }
                    },
                    "hard_quota": {
                      "type": "string",
                      "description": "Hard limit for the bucket",
                      "example": "1MB"
                    },
                    "existing_path": {
                      "type": "string",
                      "description": "bucket's existing path"
                    },
                    "fs_uid": {
                      "type": "string",
                      "description": "bucket's filesystem's uid"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/userPolicies": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 user policies list",
          "operationId": "getuserPolicies",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "users": {
                        "type": "object",
                        "properties": {
                          "user1": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/buckets/{bucket}": {
        "delete": {
          "tags": [
            "S3"
          ],
          "summary": "Destroy an S3 bucket",
          "operationId": "destroyS3Bucket",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "unlink",
              "description": "unlinks the bucket, but leave the data directory in place",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/policies": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 IAM policies list",
          "operationId": "getS3Policies",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Create an S3 IAM policy",
          "operationId": "createS3Policy",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "policy_name",
                    "policy_file_content"
                  ],
                  "properties": {
                    "policy_name": {
                      "type": "string",
                      "description": "policy name"
                    },
                    "policy_file_content": {
                      "type": "object",
                      "description": "S3 policy file contents",
                      "example": {
                        "Statement": [
                          {
                            "Resource": [
                              "arn:aws:s3:::*"
                            ],
                            "Sid": "",
                            "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                            ],
                            "Effect": "Allow"
                          }
                        ],
                        "Version": "2012-10-17"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/policies/{policy}": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get the details of an S3 IAM policy",
          "operationId": "getS3Policy",
          "parameters": [
            {
              "in": "path",
              "name": "policy",
              "required": true,
              "description": "policy name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "S3"
          ],
          "summary": "Delete an S3 IAM policy",
          "operationId": "deleteS3Policy",
          "parameters": [
            {
              "in": "path",
              "name": "policy",
              "required": true,
              "description": "policy name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/policies/attach": {
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Attach an S3 IAM policy to a user",
          "operationId": "attachS3Policy",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "policy",
                    "user"
                  ],
                  "properties": {
                    "policy_name": {
                      "type": "string",
                      "description": "policy name"
                    },
                    "user_name": {
                      "type": "string",
                      "description": "user name"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/policies/detach": {
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Detach a user's policy",
          "operationId": "detachS3Policy",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "user_name"
                  ],
                  "properties": {
                    "user_name": {
                      "type": "string",
                      "description": "user name"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/serviceAccounts": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 service accounts list",
          "operationId": "getS3ServiceAccounts",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "service_accounts": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "access_key": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Create an S3 service account",
          "operationId": "createS3ServiceAccount",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policy_file_content": {
                      "type": "string",
                      "description": "S3 policy file contents to further restrict the new service account",
                      "example": {
                        "Statement": [
                          {
                            "Resource": [
                              "arn:aws:s3:::*"
                            ],
                            "Sid": "",
                            "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                            ],
                            "Effect": "Allow"
                          }
                        ],
                        "Version": "2012-10-17"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Credentials of the new service account",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "access_key": {
                        "type": "string"
                      },
                      "secret_key": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/serviceAccounts/{access_key}": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get the details of an S3 service account",
          "operationId": "getServiceAccount",
          "parameters": [
            {
              "in": "path",
              "name": "access_key",
              "required": true,
              "description": "Access key of the service account",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "parent_user": {
                        "type": "string"
                      },
                      "implied_policy": {
                        "type": "boolean",
                        "description": "Implied meaning the policy is inherited from the parent user"
                      },
                      "policy": {
                        "type": "string",
                        "description": "In case of an implied policy, shows the policy of the parent user. Otherwise, shows the custom inline policy of the service account."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "S3"
          ],
          "summary": "Delete an S3 service account",
          "operationId": "deleteS3ServiceAccount",
          "parameters": [
            {
              "in": "path",
              "name": "access_key",
              "required": true,
              "description": "Access key of the service account",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/sts": {
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Create an s3 sts token with an assumend role",
          "operationId": "s3StsCreate",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_key": {
                      "type": "string",
                      "description": "Access key",
                      "example": "user"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "Secret key (must be at least 8 characters long)",
                      "example": "Password123"
                    },
                    "duration": {
                      "type": "number",
                      "description": "Token expiration duration in seconds (must be at least 900)",
                      "example": 1500
                    },
                    "policy_file_content": {
                      "type": "string",
                      "description": "S3 policy file contents for the new token",
                      "example": {
                        "Statement": [
                          {
                            "Resource": [
                              "arn:aws:s3:::*"
                            ],
                            "Sid": "",
                            "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                            ],
                            "Effect": "Allow"
                          }
                        ],
                        "Version": "2012-10-17"
                      }
                    }
                  },
                  "required": [
                    "access_key",
                    "secret_key",
                    "duration"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Credentials of the new sts token",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "access_key": {
                        "type": "string"
                      },
                      "secret_key": {
                        "type": "string"
                      },
                      "session_token": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/buckets/{bucket}/lifecycle/rules": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "expiry_days"
                  ],
                  "properties": {
                    "expiry_days": {
                      "type": "string",
                      "description": "expiry days",
                      "example": "90"
                    },
                    "prefix": {
                      "type": "string",
                      "description": "bucket prefix",
                      "example": "videos"
                    },
                    "tags": {
                      "type": "string",
                      "description": "object tags dictionary",
                      "example": "name=video1&compression=mpeg"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "S3"
          ],
          "summary": "Create a new bucket lifecycle rule",
          "operationId": "s3CreateLifecycleRule",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "rule id"
                      },
                      "target": {
                        "type": "string",
                        "description": "target bucket"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "tags": [
            "S3"
          ],
          "summary": "Delete all lifecycle rules of a specific bucket",
          "operationId": "s3DeleteAllLifecycleRules",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "target": {
                        "type": "string",
                        "description": "target bucket"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "tags": [
            "S3"
          ],
          "summary": "List all lifecycle rules of a specific bucket",
          "operationId": "s3ListAllLifecycleRules",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "session_id": {
                        "type": "string"
                      },
                      "buckets": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/buckets/{bucket}/lifecycle/rules/{rule}": {
        "delete": {
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "rule",
              "required": true,
              "description": "rule ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "tags": [
            "S3"
          ],
          "summary": "Delete a bucket lifecycle rule",
          "operationId": "s3DeleteLifecycleRule",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "target": {
                        "type": "string",
                        "description": "target bucket"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/buckets/{bucket}/policy": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get the S3 bucket policy",
          "operationId": "getS3BucketPolicy",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Bucket policy",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "policy": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "S3"
          ],
          "summary": "Set S3 bucket policy",
          "operationId": "setS3BucketPolicy",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "bucket_policy"
                  ],
                  "properties": {
                    "bucket_policy": {
                      "type": "string",
                      "description": "policy type, one of: [None, Download, Upload, Public]",
                      "example": "Download"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/buckets/{bucket}/policyJson": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get the S3 bucket policy json",
          "operationId": "getS3BucketPolicyJson",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Json of the bucket policy",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "policy": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "S3"
          ],
          "summary": "Set S3 bucket policy json",
          "operationId": "setS3BucketPolicyJson",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "policy_file_content"
                  ],
                  "properties": {
                    "policy_file_content": {
                      "type": "string",
                      "description": "S3 policy file contents",
                      "example": {
                        "Statement": [
                          {
                            "Resource": [
                              "arn:aws:s3:::*"
                            ],
                            "Sid": "",
                            "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                            ],
                            "Effect": "Allow"
                          }
                        ],
                        "Version": "2012-10-17"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/buckets/{bucket}/quota": {
        "put": {
          "tags": [
            "S3"
          ],
          "summary": "Set S3 bucket quota",
          "operationId": "setS3BucketQuota",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "hard_quota"
                  ],
                  "properties": {
                    "hard_quota": {
                      "type": "string",
                      "description": "Hard limit for the bucket",
                      "example": "1MB"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "S3"
          ],
          "summary": "Unset S3 bucket quota",
          "operationId": "unsetS3BucketQuota",
          "parameters": [
            {
              "in": "path",
              "name": "bucket",
              "required": true,
              "description": "bucket name",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/containersAreReady": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 Hosts status",
          "operationId": "gets3ContainersAreReady",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "<uid>": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/hosts": {
        "post": {
          "deprecated": true,
          "tags": [
            "S3"
          ],
          "summary": "Add hosts to S3 cluster - deprecated, use POST /s3/containers",
          "operationId": "addS3Hosts",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "host_uids"
                  ],
                  "properties": {
                    "host_uids": {
                      "type": "array",
                      "description": "UIDs of hosts to add to S3 cluster",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "uid_string"
                      ]
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "deprecated": true,
          "tags": [
            "S3"
          ],
          "summary": "Remove hosts from S3 cluster - deprecated use /s3/containers",
          "operationId": "deleteS3Hosts",
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "host_uids",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "required": true,
              "description": "UIDs of hosts to remove from S3 cluster"
            }
          ]
        }
      },
      "/s3/containers": {
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Add container to S3 cluster",
          "operationId": "addS3Containers",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "container_uids"
                  ],
                  "properties": {
                    "container_uids": {
                      "type": "array",
                      "description": "UIDs of container to add to S3 cluster",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "uid_string"
                      ]
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "S3"
          ],
          "summary": "Remove containers from S3 cluster",
          "operationId": "deleteS3Containers",
          "responses": {
            "200": {
              "description": "",
              "$ref": "#/components/responses/400"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "container_uids",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "required": true,
              "description": "UIDs of containers to remove from S3 cluster"
            }
          ]
        }
      },
      "/s3/debug": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 debug level",
          "operationId": "gets3DebugLevel",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "hostId": {
                              "type": "string",
                              "example": "HostId<1>"
                            },
                            "uid": {
                              "type": "string",
                              "example": "<host_uid>"
                            },
                            "stdout": {
                              "type": "string",
                              "example": "2 (WARNING)"
                            },
                            "stderr": {
                              "type": "string",
                              "example": "some error"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Set S3 debug level",
          "operationId": "sets3DebugLevel",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "level",
                    "host_uids"
                  ],
                  "properties": {
                    "level": {
                      "type": "number",
                      "example": 1
                    },
                    "host_uids": {
                      "type": "array",
                      "description": "Host uids to change log level",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/auditWebhook/enable": {
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Enable S3 audit webhook",
          "operationId": "enableS3AuditWebhook",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "endpoint",
                    "auth_token"
                  ],
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "example": "https://hec.example.com:8088/services/collector/raw"
                    },
                    "auth_token": {
                      "type": "string",
                      "example": "Splunk AAAAAAAA-D822-CCCC-BBBB-819F80AAAAAA"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/auditWebhook/disable": {
        "post": {
          "tags": [
            "S3"
          ],
          "summary": "Disable S3 audit webhook",
          "operationId": "disableS3AuditWebhook",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/s3/auditWebhook": {
        "get": {
          "tags": [
            "S3"
          ],
          "summary": "Get S3 audit webhook",
          "operationId": "getS3AuditWebhook",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "endpoint": {
                            "type": "string",
                            "example": "https://hec.example.com:8088/services/collector/raw"
                          },
                          "authToken": {
                            "type": "string",
                            "example": "Splunk AAAAAAAA-D822-CCCC-BBBB-819F80AAAAAA"
                          },
                          "enabled": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/smb": {
        "get": {
          "tags": [
            "SMB"
          ],
          "summary": "Get smb cluster info",
          "operationId": "getSamba",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "joinedDomainMappingToId": {
                            "type": "number",
                            "example": 4290000000
                          },
                          "sambaHosts": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "HostId<0>"
                            }
                          },
                          "idmapBackend": {
                            "type": "string",
                            "example": "rfc2307"
                          },
                          "sambaIps": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "some_ip"
                            }
                          },
                          "defaultDomainMappingToId": {
                            "type": "number",
                            "example": 4291000000
                          },
                          "domainName": {
                            "type": "string",
                            "example": "ad.company.com"
                          },
                          "name": {
                            "type": "string",
                            "example": "CompanySMB"
                          },
                          "encryption": {
                            "type": "string",
                            "example": "enabled"
                          },
                          "domainJoined": {
                            "type": "boolean",
                            "example": true
                          },
                          "joinedDomainMappingFromId": {
                            "type": "number",
                            "example": 0
                          },
                          "domainAdminUsername": {
                            "type": "string",
                            "example": "wekadmin"
                          },
                          "defaultDomainMappingFromId": {
                            "type": "number",
                            "example": 4290000001
                          },
                          "domainNetbiosName": {
                            "type": "string",
                            "example": "ad"
                          },
                          "symlink": {
                            "type": "boolean",
                            "description": "Enable or disable symbolic link (symlink) support for the SMB-W cluster."
                          },
                          "smbw": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "SMB"
          ],
          "summary": "Set smb cluster info",
          "operationId": "setSamba",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "domain"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Domain name",
                      "example": "companySMB"
                    },
                    "samba_hosts": {
                      "type": "array",
                      "description": "The hosts that will serve via the SMB protocol (pass weka's host uid)",
                      "items": {
                        "type": "string",
                        "example": "uid_string"
                      }
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain to join the SMB cluster to",
                      "example": "ad.company.com"
                    },
                    "samba_ips": {
                      "type": "array",
                      "description": "IPs used as floating IPs for samba to server SMB in a HA manner. Then should not be assigned to any host on the network (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                      "items": {
                        "type": "string",
                        "example": "172.68.34.23"
                      }
                    },
                    "domain_netbios_name": {
                      "type": "string",
                      "description": "The domain netbios name; If not given, the default will be the first part of the given domain name",
                      "example": "ad"
                    },
                    "idmap_backend": {
                      "type": "string",
                      "example": "rfc2307",
                      "description": "The samba domain backend type (rid, rfc2307, etc.). Note that rfc2307 requires uid/gid configuration on the Active Directory and is persistent, while rid does not require any Active Directory configuration but in case of range changes"
                    },
                    "default_domain_mapping_from_id": {
                      "type": "number",
                      "example": 4290000001,
                      "description": "The samba default domain first id"
                    },
                    "default_domain_mapping_to_id": {
                      "type": "number",
                      "example": 4291000000,
                      "description": "The samba default domain last id"
                    },
                    "joined_domain_mapping_from_id": {
                      "type": "number",
                      "example": 0,
                      "description": "The joined domain first id"
                    },
                    "joined_domain_mapping_to_id": {
                      "type": "number",
                      "example": 4290000000,
                      "description": "The joined domain last id"
                    },
                    "encryption": {
                      "type": "string",
                      "description": "Samba cluster encryption",
                      "enum": [
                        "enabled",
                        "disabled",
                        "desired",
                        "required"
                      ]
                    },
                    "symlink": {
                      "type": "boolean",
                      "description": "Enable or disable symbolic link (symlink) support for the SMB-W cluster."
                    },
                    "smbw": {
                      "type": "boolean",
                      "description": "smbw"
                    },
                    "config_fs_name": {
                      "type": "string",
                      "description": "Filesystem name for SMB-W configuration",
                      "example": "default"
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SMB"
          ],
          "summary": "Update smb cluster info",
          "operationId": "updateSamba",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "encryption": {
                      "type": "string",
                      "description": "Samba cluster encryption",
                      "enum": [
                        "enabled",
                        "disabled",
                        "desired",
                        "required"
                      ]
                    },
                    "samba_ips": {
                      "type": "array",
                      "description": "IPs used as floating IPs for samba to server SMB in a HA manner. Then should not be assigned to any host on the network (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                      "items": {
                        "type": "string",
                        "example": "172.68.34.23"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "SMB"
          ],
          "summary": "Clear smb cluster info",
          "operationId": "clearSamba",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/smb/domains": {
        "get": {
          "tags": [
            "SMB"
          ],
          "summary": "Get smb trusted domains",
          "operationId": "setSambaDomains",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/smbDomain"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "SMB"
          ],
          "summary": "Add trusted domain to smb",
          "operationId": "addSambaDomain",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/smbDomain"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "domain_name",
                    "mapping_from_id",
                    "mapping_to_id"
                  ],
                  "properties": {
                    "domain_name": {
                      "type": "string",
                      "description": "The name of the domain being added",
                      "example": "ad.company.com"
                    },
                    "mapping_from_id": {
                      "type": "number",
                      "description": "The first id",
                      "example": 4291000001
                    },
                    "mapping_to_id": {
                      "type": "number",
                      "example": 4294967294,
                      "description": "The last id"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/smb/mount": {
        "get": {
          "tags": [
            "SMB"
          ],
          "summary": "Get smb mount options",
          "operationId": "SmbShareOptions",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "example": [
                          "coherent",
                          "readcache",
                          "writecache"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/smb/shares": {
        "get": {
          "tags": [
            "SMB"
          ],
          "summary": "Get smb shares",
          "operationId": "setSambaShares",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/smbShare"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "SMB"
          ],
          "summary": "add share to smb",
          "operationId": "addShareToSamba",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/smbShare"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "share_name",
                    "fs_name"
                  ],
                  "properties": {
                    "share_name": {
                      "type": "string",
                      "description": "The name of the share being added",
                      "example": "share-1"
                    },
                    "fs_name": {
                      "type": "string",
                      "example": "default",
                      "description": "Filesystem name to share"
                    },
                    "description": {
                      "type": "string",
                      "example": "some description",
                      "description": "A description for samba to show regarding the share"
                    },
                    "sub_path": {
                      "type": "string",
                      "description": "The path inside the filesystem to share",
                      "example": "/"
                    },
                    "mount_options": {
                      "type": "string",
                      "example": "writecache",
                      "description": "Option to pass to the mount command when mounting weka. NOTE - This parameter is DANGEROUS, use with caution. Incorrect usage may lead to DATA LOSS"
                    },
                    "file_create_mask": {
                      "type": "string",
                      "example": 484,
                      "description": "POSIX mode mask files will be created with. E.g. \"0744\""
                    },
                    "directory_create_mask": {
                      "type": "string",
                      "example": 493,
                      "description": "POSIX mode mask directories will be created with. E.g. \"0755\""
                    },
                    "acl": {
                      "type": "boolean",
                      "description": "Enable Windows ACLs on the share. Will also be translated (as possible) to POSIX ACL"
                    },
                    "hidden": {
                      "type": "boolean",
                      "description": "The share is not visible when viewing the list system shares"
                    },
                    "allow_guest_access": {
                      "type": "boolean",
                      "description": "When guest access is allowed, authentication is not required for accessing the share"
                    },
                    "obs_direct": {
                      "type": "boolean",
                      "description": "Mount samba in obs-direct mode"
                    },
                    "encryption": {
                      "type": "string",
                      "description": "Samba share encryption",
                      "enum": [
                        "cluster_default",
                        "desired",
                        "required"
                      ]
                    },
                    "case_sensitivity": {
                      "type": "boolean",
                      "description": "Enable or disable case sensitivity for the specified SMB share. When enabled, the share distinguishes between files with the same name but different capitalization. This option applies exclusively to SMB-W cluster."
                    },
                    "read_only": {
                      "type": "boolean",
                      "description": "Mount samba as read-only"
                    },
                    "user_list_type": {
                      "type": "string",
                      "example": "read_write"
                    },
                    "users": {
                      "type": "array",
                      "description": "The list type to which users are added to",
                      "items": {
                        "type": "string"
                      }
                    },
                    "additional_share_options": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "string"
                      }
                    },
                    "named_streams": {
                      "description": "Enables the use of Alternate Data Streams (ADS) on a specified SMB share.",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/smb/activeDirectory": {
        "post": {
          "tags": [
            "SMB"
          ],
          "summary": "Join smb active directory",
          "operationId": "setSambaActiveDirectory",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username",
                    "password"
                  ],
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "The name of the administrator user to join the domain using it"
                    },
                    "password": {
                      "type": "string",
                      "description": "The administrator user password"
                    },
                    "debug_mode": {
                      "type": "boolean",
                      "description": "Run the command in debug mode"
                    },
                    "server": {
                      "type": "string",
                      "description": "The domain controller server"
                    },
                    "create_computerOU": {
                      "type": "string",
                      "description": "Precreate the computer account in a specific OU"
                    },
                    "extra_options": {
                      "type": "string"
                    },
                    "task_id": {
                      "type": "string"
                    },
                    "asynchronous": {
                      "type": "boolean"
                    },
                    "poll": {
                      "type": "boolean"
                    },
                    "timeout": {
                      "type": "string",
                      "description": "Join command timeout in seconds (format - 3s, 2h, 4m, 1d, 1d5h, 1w, infinite/unlimited)"
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SMB"
          ],
          "summary": "Leave smb active directory",
          "operationId": "deleteSambaActiveDirectory",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": "Deleted account for 'WEKASMB' in realm 'AD.COMPANY>COM'\\n"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "smbUsername",
                      "description": "The name of the administrator user to join the domain using it"
                    },
                    "password": {
                      "type": "string",
                      "description": "The administrator user password",
                      "example": "smbPassword"
                    },
                    "debug_mode": {
                      "type": "boolean",
                      "description": "Run the command in debug mode"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/smb/debug": {
        "post": {
          "tags": [
            "SMB"
          ],
          "summary": "Set smb debug level",
          "operationId": "setSambaDebug",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "debug_level"
                  ],
                  "properties": {
                    "debug_level": {
                      "type": "number",
                      "description": "The debug level (format - 0..10)",
                      "example": 1
                    },
                    "samba_hosts": {
                      "type": "array",
                      "description": "Hosts to set debug level (pass host uid). All hosts as default",
                      "items": {
                        "type": "string",
                        "example": "uid_string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/smb/shares/{uid}": {
        "put": {
          "tags": [
            "SMB"
          ],
          "summary": "Update smb share",
          "operationId": "updateSambaShare",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/smbShare"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "share uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "encryption"
                  ],
                  "properties": {
                    "encryption": {
                      "type": "string",
                      "description": "Samba share encryption",
                      "enum": [
                        "cluster_default",
                        "desired",
                        "required"
                      ]
                    },
                    "hidden": {
                      "type": "boolean",
                      "description": "The share is not visible when viewing the list system shares"
                    },
                    "allow_guest_access": {
                      "type": "boolean",
                      "description": "When guest access is allowed, authentication is not required for accessing the share"
                    },
                    "read_only": {
                      "type": "boolean",
                      "description": "Mount samba as read-only"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "SMB"
          ],
          "summary": "Delete smb share",
          "operationId": "deleteSambaShare",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Share uid"
            }
          ]
        }
      },
      "/smb/domains/{uid}": {
        "delete": {
          "tags": [
            "SMB"
          ],
          "summary": "Delete smb domain",
          "operationId": "deleteSambaDomain",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Domain uid",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/smb/users/{share_uid}/{user_type}": {
        "post": {
          "tags": [
            "SMB"
          ],
          "summary": "Add user to smb",
          "operationId": "addUserToSamba",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "share_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Share uid"
            },
            {
              "in": "path",
              "name": "user_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "read_only, read_write, valid, invalid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Users to add",
                      "items": {
                        "type": "string",
                        "example": "Enterprise Admins"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/smb/users/reset/{share_uid}/{user_type}": {
        "delete": {
          "tags": [
            "SMB"
          ],
          "summary": "Reset smb users",
          "operationId": "resetSambaUsers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "share_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Share uid"
            },
            {
              "in": "path",
              "name": "user_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "read_only, read_write, valid, invalid"
            }
          ]
        }
      },
      "/smb/users/{share_uid}/{user_type}/{user}": {
        "delete": {
          "tags": [
            "SMB"
          ],
          "summary": "Delete smb user",
          "operationId": "deleteSambaUser",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "share_uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Share uid"
            },
            {
              "in": "path",
              "name": "user_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "read_only, read_write, valid, invalid"
            },
            {
              "in": "path",
              "name": "user",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/smb/containersAreReady": {
        "get": {
          "tags": [
            "SMB"
          ],
          "summary": "Get Samba Hosts status",
          "operationId": "getSambaContainersAreReady",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "<uid>": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/smb/servers": {
        "put": {
          "tags": [
            "SMB"
          ],
          "summary": "Add SMB cluster servers",
          "operationId": "addSambaServers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "addedHosts": {
                      "type": "array",
                      "description": "New SMB cluster servers",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "uid-1",
                        "uid-2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "SMB"
          ],
          "summary": "Delete SMB cluster servers",
          "operationId": "deleteSambaServers",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "removedHosts",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "array of servers uids"
              }
            }
          ]
        }
      },
      "/security/defaultTokensExpiry": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Get tokens default expiry time",
          "operationId": "getTokensExpiry",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "access_token_expiry": {
                            "type": "number",
                            "example": 100000
                          },
                          "refresh_token_expiry": {
                            "type": "number",
                            "example": 31536000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/security/banner": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Get the login banner",
          "operationId": "getLoginBanner",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "A Login Banner"
                          },
                          "enabled": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Set the login banner",
          "operationId": "setLoginBanner",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "login_banner"
                  ],
                  "properties": {
                    "login_banner": {
                      "type": "string",
                      "description": "Login banner to set"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/security/banner/enable": {
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Enable login banner",
          "operationId": "enableLoginBanner",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/security/banner/disable": {
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Disable login banner",
          "operationId": "disableLoginBanner",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/security/tokensExpiry": {
        "get": {
          "deprecated": true,
          "tags": [
            "Security"
          ],
          "summary": "Get tokens default expiry time",
          "operationId": "getTokensExpiryDeprecated",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "access_token_expiry": {
                            "type": "number",
                            "example": 100000
                          },
                          "refresh_token_expiry": {
                            "type": "number",
                            "example": 31536000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/security/caCert": {
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Set a CA-Cert for the cluster (Vault)",
          "operationId": "setCaCert",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "certificate"
                  ],
                  "properties": {
                    "certificate": {
                      "type": "string",
                      "example": "-----BEGIN CERTIFICATE-----\\n<all_the_content_of_cert.pem_with_\\n>\\n-----END CERTIFICATE-----\\n"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Security"
          ],
          "summary": "Unset a CA-Cert for the cluster (Vault)",
          "operationId": "unsetCaCert",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Show the CA-Cert for the cluster (Vault)",
          "operationId": "showCaCert",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "example": true
                          },
                          "country": {
                            "type": "string",
                            "example": "IL"
                          },
                          "state": {
                            "type": "string",
                            "example": "TA"
                          },
                          "locality": {
                            "type": "string",
                            "example": "Tel-Aviv"
                          },
                          "organization": {
                            "type": "string",
                            "example": "company"
                          },
                          "organization_unit": {
                            "type": "string",
                            "example": "qa"
                          },
                          "common_name": {
                            "type": "string",
                            "example": "t1831-*.company.io"
                          },
                          "email": {
                            "type": "string",
                            "example": "mail@company.io"
                          },
                          "expired_date": {
                            "type": "string",
                            "example": "2021-03-20T08:17:34Z"
                          },
                          "content": {
                            "type": "string",
                            "example": "-----BEGIN CERTIFICATE-----\\n<all_the_content_of_cert.pem_with_\\n>\\n-----END CERTIFICATE-----\""
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/servers": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Get all servers",
          "operationId": "getServers",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/servers"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "role",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "/servers/{uid}": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Get single server",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Server uid"
            }
          ],
          "operationId": "getSingleServer",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/server"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/snapshots": {
        "get": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Get snapshots",
          "operationId": "getSnapshots",
          "parameters": [
            {
              "in": "query",
              "name": "filesystem",
              "description": "filter by filesystem",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/snapshot"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Create snapshot",
          "operationId": "createSnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "fs_uid",
                    "name"
                  ],
                  "properties": {
                    "fs_uid": {
                      "type": "string",
                      "description": "Filesystem uid for creating the snapshot",
                      "example": "uid_string"
                    },
                    "name": {
                      "type": "string",
                      "description": "Target Snapshot name",
                      "example": "snap111"
                    },
                    "access_point": {
                      "type": "string",
                      "description": "Access point",
                      "example": 11111
                    },
                    "source_snap_uid": {
                      "type": "string",
                      "description": "Source snapshot uid for copy a snapshot",
                      "example": "uid_string"
                    },
                    "is_writable": {
                      "type": "boolean",
                      "description": "Writable"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/snapshots/{uid}": {
        "get": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Get snapshot",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Snapshot uid"
            }
          ],
          "operationId": "getSnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "put": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Update snapshot",
          "operationId": "updateSnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/snapshotEdit"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "snapshot uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "new_name": {
                      "type": "string",
                      "example": "snap111"
                    },
                    "access_point": {
                      "type": "string",
                      "example": 11111
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Delete snapshot",
          "operationId": "deleteSnapshot",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Snapshot uid"
            }
          ]
        }
      },
      "/snapshots/{uid}/copy": {
        "post": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Copy snapshot from the same filesystem",
          "operationId": "copySnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Snapshot uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "destination_name": {
                      "type": "string",
                      "description": "Destination snapshot name"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/snapshots/{uid}/upload": {
        "post": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Upload snapshot to object store",
          "operationId": "uploadSnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "extra": {
                            "type": "object"
                          },
                          "locator": {
                            "type": "string",
                            "example": "59c2ddf9/d/s/16/spec/b365-4e7a-b924-b2f0956b7f9c"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "snapshot uid"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "obs_site": {
                      "type": "string",
                      "enum": [
                        "REMOTE",
                        "LOCAL"
                      ],
                      "description": "Site to upload the snapshot"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/snapshots/download": {
        "post": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Download snapshot from object store",
          "operationId": "downloadSnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "fs_uid",
                    "locator"
                  ],
                  "properties": {
                    "fs_uid": {
                      "type": "string",
                      "description": "Filesystem uid for downloading the snapshot",
                      "example": "uid_string"
                    },
                    "locator": {
                      "type": "string",
                      "description": "Locator",
                      "example": "bba696fb/d/s/4/spec/fc35-4d51-96b6-028488d349dc"
                    },
                    "name": {
                      "type": "string",
                      "description": "New snapshot name",
                      "example": "snap111"
                    },
                    "access_point": {
                      "type": "string",
                      "description": "Access point",
                      "example": 11111
                    },
                    "allow_non_chronological": {
                      "type": "boolean",
                      "description": "Allow downloading snapshots in non-chronological order"
                    },
                    "allow_divergence": {
                      "type": "boolean",
                      "description": "Allow downloading snapshots which are not descendants of the last downloaded snapshot"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/snapshots/{fs_uid}/{uid}/restore": {
        "post": {
          "tags": [
            "Snapshots"
          ],
          "summary": "Restore filesystem from snapshot",
          "operationId": "restoreFileSystemFromSnapshot",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "fs_uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "snapshot uid"
            }
          ]
        }
      },
      "/stats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Get stats",
          "operationId": "getStats",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "all": {
                            "type": "object",
                            "properties": {
                              "rpc": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "start_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "end_time",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "interval",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "category",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": "array of categories"
            },
            {
              "in": "query",
              "name": "stat",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "in": "query",
              "name": "resolution_secs",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "query",
              "name": "accumulated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "per_node",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "node_uids",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "in": "query",
              "name": "param",
              "schema": {
                "type": "object",
                "properties": {
                  "<param_key>": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "style": "deepObject",
              "explode": true
            },
            {
              "in": "query",
              "name": "no_zeroes",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "show_internal",
              "schema": {
                "type": "boolean"
              }
            }
          ]
        }
      },
      "/stats/description": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Get stats description",
          "operationId": "getStatsDescription",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "RESPONSE_COUNT_LENGTH_REQUIRED": {
                            "type": "object",
                            "properties": {
                              "is_histogram": {
                                "type": "boolean",
                                "example": false
                              },
                              "parameters": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "hTTPCode"
                                }
                              },
                              "permission": {
                                "type": "string",
                                "example": "USER"
                              },
                              "for_node_type": {
                                "type": "string",
                                "example": "IO"
                              },
                              "label": {
                                "type": "string",
                                "example": "Response Count LENGTH_REQUIRED(total)"
                              },
                              "description": {
                                "type": "string",
                                "example": "Number of HTTP LENGTH_REQUIRED responses per second"
                              },
                              "type": {
                                "type": "string",
                                "example": "Rate"
                              },
                              "unit": {
                                "type": "string",
                                "example": "Responses/Sec"
                              },
                              "can_accumulate": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/stats/realtime": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Get real time stats",
          "operationId": "getRealTimeStats",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "NodeId<121>"
                            },
                            "hostname": {
                              "type": "string",
                              "example": "backend-0"
                            },
                            "cpu_utilization_percentage": {
                              "type": "number",
                              "example": 10.597062895894386
                            },
                            "reads_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "read_latency_usecs": {
                              "type": "number",
                              "example": 0
                            },
                            "writes_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "rdmaTX_bytes_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "L6RX_bytes_per_second": {
                              "type": "number",
                              "example": 230401.41501184125
                            },
                            "obs_upload_bytes_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "read_bytes_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "ops_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "write_latency_usecs": {
                              "type": "number",
                              "example": 0
                            },
                            "L6TX_bytes_per_second": {
                              "type": "number",
                              "example": 281357.40098772035
                            },
                            "obs_download_bytes_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "rdmaRX_bytes_per_second": {
                              "type": "number",
                              "example": 0
                            },
                            "write_bytes_per_second": {
                              "type": "number",
                              "example": 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/stats/retention": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Get stats retention and estimated disk usage",
          "operationId": "getStatsDiskUsage",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "server_estimated_bytes": {
                            "type": "number",
                            "example": 136205240
                          },
                          "retention_secs": {
                            "type": "number",
                            "example": 86400
                          },
                          "client_estimated_bytes": {
                            "type": "number",
                            "example": 0
                          },
                          "client_estimation_result_type": {
                            "type": "string",
                            "example": "NO_CLIENTS"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "query",
              "name": "retention_duration",
              "description": "Duration (format - 1 minute 2 seconds, options - weeks, days, hours, minutes, seconds)",
              "schema": {
                "type": "string",
                "example": "1 day"
              }
            }
          ]
        },
        "post": {
          "tags": [
            "Stats"
          ],
          "summary": "Set stats retention",
          "operationId": "getStatsRetention",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "server_estimated_bytes": {
                            "type": "number",
                            "example": 136205240
                          },
                          "retention_secs": {
                            "type": "number",
                            "example": 86400
                          },
                          "client_estimated_bytes": {
                            "type": "number",
                            "example": 0
                          },
                          "client_estimation_result_type": {
                            "type": "string",
                            "example": "NO_CLIENTS"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "retention_duration": {
                      "type": "string",
                      "description": "Duration (format - 1 minute 2 seconds, options - weeks, days, hours, minutes, seconds)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/io/start": {
        "post": {
          "tags": [
            "System IO"
          ],
          "summary": "Start system IO",
          "operationId": "startIO",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "resend_secs": {
                            "type": "number",
                            "example": 3
                          },
                          "result": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "example": "STARTING_NODES"
                              }
                            }
                          },
                          "completed": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/io/stop": {
        "post": {
          "tags": [
            "System IO"
          ],
          "summary": "Stop system IO",
          "operationId": "stopIO",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "resend_secs": {
                            "type": "number",
                            "example": 3
                          },
                          "result": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "example": "STOPPING_SERVICES"
                              }
                            }
                          },
                          "completed": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "brutal_no_flush": {
                      "type": "boolean",
                      "description": "Force stopping IO services immediately without graceful flushing of ongoing operations. Using this flag may cause data-loss if used without explicit guidance from WekaIO customer support"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Get all cluster tasks",
          "operationId": "getTasks",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "CWTaskId<0>"
                            },
                            "state": {
                              "type": "string",
                              "example": "RUNNING"
                            },
                            "params": {
                              "type": "object",
                              "properties": {
                                "obsId": {
                                  "type": "string",
                                  "example": "ObjectStorageId<0>"
                                },
                                "fsId": {
                                  "type": "string",
                                  "example": "FSId<0>"
                                },
                                "purpose": {
                                  "type": "string",
                                  "example": "UNTIER"
                                }
                              }
                            },
                            "uid": {
                              "type": "string",
                              "example": "uid_string"
                            },
                            "progress": {
                              "type": "number",
                              "example": 99.04327392578125
                            },
                            "type": {
                              "type": "string",
                              "example": "OBS_DETACH"
                            },
                            "description": {
                              "type": "string",
                              "example": "Detaching Object Storage `obs1` from filesystem `default`"
                            },
                            "is_explicitly_paused": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/tasks/{uid}/resume": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Resume task",
          "operationId": "resumeTask",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "description": "Task uid",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/tasks/{uid}/pause": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Pause task",
          "operationId": "pauseTasks",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Task uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/tasks/{uid}/abort": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Abort task",
          "operationId": "abortTasks",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "Task uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/tasks/limits": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Get cluster tasks limit",
          "operationId": "getTasksLimit",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "cpuPercentLimit": {
                            "type": "number",
                            "example": 5
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Tasks"
          ],
          "summary": "Set cluster tasks limit",
          "operationId": "setTasksLimit",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cpu_limit": {
                      "type": "number",
                      "example": 50,
                      "description": "Percent of the CPU resources to dedicate to background tasks"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/telemetry": {
        "get": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Get telemetry status",
          "operationId": "getTelemetryStatus",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/telemetryInfo"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Update telemetry status",
          "operationId": "updateTelemetryStatus",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Telemetry gateway status",
                      "example": true
                    },
                    "auditTracesEnabled": {
                      "type": "boolean",
                      "description": "Telemetry audit traces status",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/telemetry/exports": {
        "get": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Get telemetry exports",
          "operationId": "getTelemetryExports",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/telemetryExport"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Create telemetry exports",
          "operationId": "createTelemetryExport",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telemetryExportReq"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/telemetryExport"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/telemetry/exports/{uid}": {
        "get": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Get a telemetry export",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "telemetry export uid"
            }
          ],
          "operationId": "getTelemetryExport",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/telemetryExport"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "post": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Update telemetry exports",
          "operationId": "updateTelemetryExport",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "telemetry export uid"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telemetryExportReq"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/telemetryExport"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Delete telemetry exports",
          "operationId": "removeTelemetryExport",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "telemetry export uid"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/telemetryExport"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/telemetry/exports/{uid}/sources": {
        "put": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Add source to a telemetry export",
          "operationId": "attachTelemetrySourceToExport",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "telemetry export uid"
            }
          ],
          "requestBody": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Telemetry source",
                    "example": "Audit"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Telemetry source",
                          "example": "Audit"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        },
        "delete": {
          "tags": [
            "Telemetry"
          ],
          "summary": "Remove source from a telemetry export",
          "operationId": "detachTelemetrySourceFromExport",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "telemetry export uid"
            }
          ],
          "requestBody": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Telemetry source",
                    "example": "Audit"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Telemetry source",
                          "example": "Audit"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      },
      "/tls": {
        "get": {
          "tags": [
            "TLS"
          ],
          "summary": "Get TLS status",
          "operationId": "getTls",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "example": true
                          },
                          "organization": {
                            "type": "string",
                            "example": "company"
                          },
                          "country": {
                            "type": "string",
                            "example": "IL"
                          },
                          "state": {
                            "type": "string",
                            "example": "TA"
                          },
                          "expiredDate": {
                            "type": "string",
                            "example": "2021-03-20T08:17:34Z"
                          },
                          "email": {
                            "type": "string",
                            "example": "mail@company.io"
                          },
                          "commonName": {
                            "type": "string",
                            "example": "t1831-*.company.io"
                          },
                          "locality": {
                            "type": "string",
                            "example": "Tel-Aviv"
                          },
                          "organizationUnit": {
                            "type": "string",
                            "example": "qa"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "post": {
          "tags": [
            "TLS"
          ],
          "summary": "Enable TLS",
          "operationId": "enableTls",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "tls_cert_pem",
                    "tls_key_pem"
                  ],
                  "properties": {
                    "tls_cert_pem": {
                      "type": "string",
                      "example": "-----BEGIN CERTIFICATE-----\\n<all_the_content_of_cert.pem_with_\\n>\\n-----END CERTIFICATE-----\""
                    },
                    "tls_key_pem": {
                      "type": "string",
                      "example": "-----BEGIN CERTIFICATE-----\\n<all_the_content_of_key.pem_with_\\n>\\n-----END CERTIFICATE-----\""
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "TLS"
          ],
          "summary": "Disable tls",
          "operationId": "disableTls",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/tls/certificate": {
        "get": {
          "tags": [
            "TLS"
          ],
          "summary": "Get TLS certificate",
          "operationId": "getTlsCertificate",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/tlsCertificate"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/traces": {
        "get": {
          "tags": [
            "Traces"
          ],
          "summary": "Get traces status",
          "operationId": "getTracesStatus",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/traces"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Traces"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "server_ensure_free": {
                      "type": "number",
                      "example": 300000
                    },
                    "client_ensure_free": {
                      "type": "number",
                      "example": 300000
                    },
                    "server_max": {
                      "type": "number",
                      "example": 600000
                    },
                    "client_max": {
                      "type": "number",
                      "example": 600000
                    }
                  }
                }
              }
            }
          },
          "summary": "Update traces configure",
          "operationId": "updateTracesConfigure",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/traces"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "Traces"
          ],
          "summary": "Restore traces defaults",
          "operationId": "restoreTracesDefaults",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/traces"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/traces/freeze": {
        "get": {
          "tags": [
            "Traces"
          ],
          "summary": "Get traces freeze",
          "operationId": "getTracesFreeze",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/tracesFreeze"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "put": {
          "tags": [
            "Traces"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "start_time"
                  ],
                  "properties": {
                    "start_time": {
                      "type": "string",
                      "example": "2022-01-01T00:00:00.000Z"
                    },
                    "end_time": {
                      "type": "string",
                      "example": "2022-01-01T00:00:00.000Z"
                    },
                    "freeze_retention": {
                      "type": "number",
                      "example": 0
                    },
                    "override_existing_period": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "summary": "Update traces freeze",
          "operationId": "updateTracesFreeze",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/tracesFreeze"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        },
        "delete": {
          "tags": [
            "Traces"
          ],
          "summary": "Reset traces freeze",
          "operationId": "resetTracesFreeze",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/tracesFreeze"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/traces/level": {
        "put": {
          "tags": [
            "Traces"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "level"
                  ],
                  "properties": {
                    "level": {
                      "type": "string",
                      "example": "HIGH",
                      "enum": [
                        "HIGH",
                        "LOW"
                      ]
                    }
                  }
                }
              }
            }
          },
          "summary": "Update traces level",
          "operationId": "updateTracesLevel",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string",
                        "example": "HIGH"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/users": {
        "get": {
          "summary": "Get all users",
          "operationId": "getUsers",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "tags": [
            "User"
          ],
          "description": ""
        },
        "post": {
          "summary": "Create user",
          "operationId": "createUser",
          "tags": [
            "User"
          ],
          "description": "",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username of the new user to create",
                      "example": "user1"
                    },
                    "password": {
                      "type": "string",
                      "description": "Password for the new user - must contain at least 8 characters, and have at least one uppercase letter, one lowercase letter, and one number or special character. Typing special characters as arguments to this command might require escaping",
                      "example": "StrongPass111"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the new user",
                      "enum": [
                        "ClusterAdmin",
                        "OrgAdmin",
                        "ReadOnly",
                        "Regular",
                        "S3"
                      ]
                    },
                    "posix_uid": {
                      "type": "number",
                      "description": "(S3 only) POSIX UID for this user's S3 files",
                      "example": 10
                    },
                    "posix_gid": {
                      "type": "number",
                      "description": "(S3 only) POSIX GID for this user's S3 files",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/user"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          }
        }
      },
      "/users/{uid}": {
        "put": {
          "summary": "Update user",
          "operationId": "updateUser",
          "tags": [
            "User"
          ],
          "description": "",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/user"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "User uid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "The role of the new user",
                      "enum": [
                        "ClusterAdmin",
                        "OrgAdmin",
                        "ReadOnly",
                        "Regular",
                        "S3"
                      ]
                    },
                    "posix_uid": {
                      "type": "number",
                      "description": "(S3 only) POSIX UID for this user's S3 files",
                      "example": 10
                    },
                    "posix_gid": {
                      "type": "number",
                      "description": "(S3 only) POSIX GID for this user's S3 files",
                      "example": 10
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "summary": "Delete user",
          "operationId": "deleteUser",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "tags": [
            "User"
          ],
          "description": "",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "User uid",
              "schema": {
                "type": "string"
              },
              "required": true
            }
          ]
        }
      },
      "/users/password": {
        "put": {
          "summary": "Update user password",
          "operationId": "updateUserPassword",
          "tags": [
            "User"
          ],
          "description": "",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username",
                    "old_password",
                    "new_password"
                  ],
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "example": "some_username"
                    },
                    "old_password": {
                      "type": "string",
                      "description": "Old password",
                      "example": "NewUser123"
                    },
                    "new_password": {
                      "type": "string",
                      "description": "New password",
                      "example": "NewPass123"
                    },
                    "org": {
                      "type": "string",
                      "description": "Organization name, default 'Root'",
                      "example": "root"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/{uid}/password": {
        "put": {
          "summary": "Set user password",
          "operationId": "setUserPassword",
          "tags": [
            "User"
          ],
          "description": "",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "User uid",
              "schema": {
                "type": "string"
              },
              "required": true
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "password"
                  ],
                  "properties": {
                    "password": {
                      "type": "string",
                      "description": "New password",
                      "example": "NewPass123"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/whoami": {
        "get": {
          "summary": "Get user info",
          "operationId": "whoAmI",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "org_id": {
                            "type": "number",
                            "example": 0
                          },
                          "username": {
                            "type": "string",
                            "example": "admin"
                          },
                          "uid": {
                            "type": "string",
                            "example": "uid_string"
                          },
                          "source": {
                            "type": "string",
                            "example": "Internal"
                          },
                          "role": {
                            "type": "string",
                            "example": "ClusterAdmin"
                          },
                          "org_name": {
                            "type": "string",
                            "example": "Root"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            }
          },
          "tags": [
            "User"
          ],
          "description": ""
        }
      },
      "/users/{uid}/revoke": {
        "delete": {
          "summary": "Revoke user tokens",
          "operationId": "revokeUser",
          "responses": {
            "200": {
              "$ref": "#/components/responses/200"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          },
          "tags": [
            "User"
          ],
          "description": "",
          "parameters": [
            {
              "in": "path",
              "name": "uid",
              "description": "User uid",
              "schema": {
                "type": "string"
              },
              "required": true
            }
          ]
        }
      }
    },
    "tags": []
  }
